*Done today*

_Feed_
  - add feed sorting (https://github.com/Cardero-X/api-service/pull/317):
     - "sort by new": according to feed item's created date
     - "sort by popular": according to feed item's likes/dislikes
     - "sort by hot": mix of new + popular
     - add API documentation and tests
     - fix `populatedev` to ensure real-life-like feed item's created dates (as opposed to all set when `populatedev` script is run)
  - add `PUT /feed/:id` (https://github.com/Cardero-X/api-service/pull/318)
     - add route, controller, service
     - ensure authorization, including allowing non-owners to update their user data (rating, "saved")
     - add API documentation and tests

_Database_
  - compressed production database (from 1.5GB to 112MB)

_Development_
  - run prettier on YAML files (f187e98)

To do:
  - Feed:
     - save with each YAML files to update indentation
     - switch from Joi().allow() to Joi().valid()???
        - why aren't tests failing???
     - merge `PUT /feed/:id` PR and deploy
     - rename `feedId` to `feedItemId`
     - `GET /feed|posts|sheets?ids`
     - break down FeedServices into several files
     - `Post|Sheet.feedItem` client:
        - `POST /posts|sheets` with payload `{ feedItem: ... }` -> `POST /posts|sheets` then `PUT /feed/:id` with payload `{ ... }`
        - `PUT /posts|sheets/:id` with payload `{ feedItem: ... }` -> `PUT /feed/:id` with payload `{ ... }`
        - then merge `feature/remove-compat-put-feed` back-end branch
     - `Feed.ratings` client:
        - `Post.ratings` -> `Post.feedItem.ratings` (responses)
        - `Post.userData.rating` -> `Post.feedItem.userData.rating` (responses + requests)
        - `GET /posts?order=ratings` -> `GET /feed?type=post&order=ratings`
        - then merge `feature/feed-ratings-remove-compat` back-end branch
     - do not populate `Post.icos[*].ico` on `GET /posts` (but do it on `GET /posts/:id`)
     - fix `populateMany()` helper so that it preserves sorting order
        - fix the places that use it and currently have to re-sort
  - ICOS:
     - remove bookmark feature
     - `GET /icos?url=FULL_URL`
        - filter according to algorithm:
            // `GET /icos?url=http://www.example.co.uk:80/path?query#hash` -> ['www', 'example', 'co', 'uk']
            const hostnameParts = getHostname(query.url).split('.')

            // Iterate over full hostname, removing one subdomain at a time
            for (const i = 0; i < hostnameParts.length; i++) {
              const hostname = hostnameParts.slice(i).join('.')

              // We did not find any matches
              // TLDs can have dots in them, e.g. `.co.uk`
              if (isTopLevelDomain(hostname)) { return [] }

              const matchingIcos = icos.filter(ico => getHostname(ico.url).endsWith(hostname))
              if (matchingIcos.length !== 0) { return matchingIcos }
            }
        - probably run algorithm in reverse because of higher probably of returning nothing
        - note that `ICO.url` can be null
  - Sheet:
     - add `ICO.userData.sheets`
     - database indexes
     - `Sheet` automatic adding feature
        - should perform database migrations to re-actively do it on current users
  - tests, API documentation and refactoring for `/icos` endpoints
  - learn latest MongoDB and upgrade it
  - finish branch feature/errors_v2
     - also fix errors in API documentation
     - do not report local errors to Sentry, only stage and production
  - fix deleted ICOs still showing up: https://trello.com/c/rQuTpeyV/86-deleted-icos-are-still-available-in-the-ico-details-page-url. Proposal:
     - `ICO.state` can be set to `draft`, `public`, `hidden` or `deleted` with `PUT /icos/:icoId`
        - when an `ICO` is created, `ICO.state` defaults to `draft`
        - it is eventually published by setting `ICO.state` to `public`
        - it can then be deleted or hidden by setting `ICO.state` to `deleted|hidden`
     - updating `ICO.state` can only be done by Admins or DES specialists.
        - ICO owners can make an ICO edit request though
     - neither the `ICO` nor any of its related data is never removed from the database.
     - modifying an ICO (`PUT`, `POST`, `DELETE`, `PATCH`) should return `400` (i.e. read-only) if `ICO.state` is `deleted`. Other `ICO.state` do not have that restriction
     - `GET` a deleted/draft/hidden `ICO` by ID/slug should return `404` unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - `GET` several `ICO`s should skip deleted/draft/hidden ICOs unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - this is for any ICOs requests, whether being top-level on `/icos` or as a nested attribute within another route/model.
     - When it comes to the front-end, it should use `?state` parameter depending on the use case:
        - ICO lists vs calendar vs main listing page vs etc.
        - front-end app vs admin app
        - etc. (edited)
  - API documentation:
     - allow toggling endpoints according to role (admin, DES, ICO owner, premium, normal)
  - blog post about test-openapi
  - integration testing
     - also test middleware (not only endpoints)
  - refactoring:
     - make status codes more consistent and hide behind a common interface
     - refactor authentication to simplify it
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - add a model layer between controller and Mongoose:
     - provide caching invalidation functionality
     - provide ICO slug update functionality
     - make any DELETE flag the model as deleted, but not removed from database
  - upgrade node.bcrypt.js to fix security vulnerability (when they release a version)
  - Gulp buildwatch crashes (does not watch anymore) after the first OpenAPI error
  - switch Jasmine to Jest, like in front-end
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
 Â - replace current dependency REQUEST by CROSS-FETCH
  - lint-staged currently does not allow committing only half of a file
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
