Doing
Refactor bootstrap code, including database bootstrap and middleware setup

To do:
  - gulp:
     - compare with autoserver:
        - change GULP-ESLINT based on how I do it in autoserver
     - watch task
        - including using GULP.lastRun(), eslint --cache or GULP-CHANGED()
     - add task descriptions
     - npm scripts:
        - ./node_modules/.bin/ is not needed
        - start: node index.js (no gulp)
        - dev: gulp build && gulp watch && gulp nodemon
        - test: gulp test
        - precommit: lint-staged gulp format (no gulp test)
        - prepush: gulp lint && gulp test
        - heroku-postbuild: gulp build
     - change README to include documentation about gulp instead of npm scripts
     - problems:
        - execCommand() implies node_modules/.bin/ is in PATH
        - fix lint-staged
        - fix prettier Gulp task
        - fix NODE_ENV (e.g. with gulp test, it's wrong)
           - uncomment the beforeAll() test that checks that in unit tests
        - seed scripts should return PROMISE
        - Nodemon: process does not stop if Gulp failed
     - try to replace lint-staged by eslint --fix --cache + eslint-plugin-prettier
        - make sure it works with precommit, e.g. that newly fixed changes get committed
     - separate into several files
     - add built files to .gitignore, and remove them from Git
     - checking:
        - test that most middleware work as intended
        - make sure it deploys correctly on stage
  - add prettier/prettier ESLint rule
  - add postman collections from OpenAPI spec
  - integration testing, dredd
  - fix configuration, it's a little messy
     - implies learning about configuration tools first
  - use node-uuid (front-end already uses that)
  - change minimist to yargs (front-end already uses that)
  - Node 9
  - use JSON schema instead of joi:
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - search:
     - compare ICOs
  - monetization:
     - featured ICOs
  - community:
     - news:
        - RSS/Atom
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tell about vacation

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - prettier
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
