Done:
  - ratings:
     - distinguish between "not rated" and "coming soon" on the front-end (https://github.com/Cardero-X/frontend-app/pull/586)
     - do not show `metricScores` as "not rated" when there is an admin score (e8da043)
     - fix `metricScores.*.type` not being returned by API (fcb7e42)
  - using Node.js latest version on all repos:
     - fix `yarn` not working in front-end (https://github.com/Cardero-X/frontend-app/commit/5c32b1865d0aa0383a9da95394260ea871a1eba4)
     - fix `yarn` not working in admin app (https://github.com/Cardero-X/admin-app/commit/5e6dbdf0cfe7ab16a3583f54d2e6a7c11fe3c3f3)
     - fix CircleCI to use latest Node.js version in back-end (d0b1cb1), front-end (f4fe6a3) and admin app (a3e09ea)
  - bug fixes:
     - fix tests failing on CircleCI for admin app because of localStorage error (47c2af6)
     - fix `profilePictureUrl` being optional (9acbe67)
  - integation tests:
     - fix bugs with integration testings tool
  - code reviews:
     - fixing email templates for managed ICO emails (https://github.com/Cardero-X/api-service/pull/296)
     - lists: support new URL slug format: "@user-name/@list-title" (https://github.com/Cardero-X/api-service/pull/297)

To do:
  - fix optionality in tests
  - fix deleted ICOs still showing up: https://trello.com/c/rQuTpeyV/86-deleted-icos-are-still-available-in-the-ico-details-page-url
  - ratings:
     - remove `votes` in API on Monday (after all front-end have migrated to `usersCount`)
  - List:
     - finish refactoring
     - add all tests
     - fix OpenAPI security / access token documentation for those endpoints
     - all `List` should return counts in the same consistent way, i.e. as `List.likesCount|dislikesCount|rankingScore` (no more nested `ratings`)
        - ask Scott to help with new shape in the front-end
     - bug:
        1. Being logged in, open any list with no likes / dislikes
        2. Try to set a like
        3. Refresh the page, expected counts: `likes: 1, dislikes: 0`; actual counts: `likes: 1, dislikes: 1`
  - blog post about test-openapi
  - integration testing
     - also test middleware (not only endpoints)
  - refactoring:
     - make status codes more consistent and hide behind a common interface
     - refactor authentication to simplify it
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - add a model layer between controller and Mongoose:
     - provide caching invalidation functionality
     - provide ICO slug update functionality
     - make any DELETE flag the model as deleted, but not removed from database
  - upgrade node.bcrypt.js to fix security vulnerability (when they release a version)
  - Gulp buildwatch crashes (does not watch anymore) after the first OpenAPI error
  - switch Jasmine to Jest, like in front-end
  - Node 10
  - 404 are HTML even in JSON
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - update API documentation to Widdershins
 Â - replace current dependency REQUEST by CROSS-FETCH
  - lint-staged currently does not allow committing only half of a file
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
