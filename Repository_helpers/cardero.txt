Doing:
Add base for integration testing

Integration testing:
  - specification:
     - validate with SWAY (using built specification)
     - use SWAY for normalization of SPEC|OPERATION.consumes|produces, PARAM.schema, SECURITY
  - run one it() for each combination of OPERATION + RESP + RESP.x-test-params
  - RESP.x-test-params OBJ_ARR:
     - key is '[IN_]PARAM_NAME' or '[TYPE_]SEC_NAME'
     - value can be:
        - any VAL (including not specified)
        - 'any': random possible value
        - 'error': random not possible value
     - def OBJ_ARR: [{}]
     - def param value:
        - non-required query|headers and SECURITY params: undefined
        - otherwise: use possible value
        - allow overriding OBJ properties???
     - use PATHDEF|OPERATION.parameters, PARAM.name|in
        - and SPEC|OPERATION.security, SPEC.securityDefinitions
     - should allow specifying (outside specification) SECURITY PARAMs for all requests
        - think of making it work with authentication
  - [Not] possible value generation:
     - generate NUM [not] possible values, where NUM is hard-coded
        - generated from [SMALL_]SCHEMA
        - using JSON-SCHEMA-FAKER
     - if test fails, should print the generated values
     - do not create new it() for each possible value, i.e. keep inside the it() so it:
        - is less verbose: only report one success|failure
        - is faster: do not process further possible values
     - add fuzzy testing values???
  - HTTP request:
     - URL: use SERVER, OPERATION.schemes
        - allow overriding host|port (outside specification)
     - headers:
        - Content-Type [C] and Accept [C] according to SPEC|OPERATION.consumes|produces
  - Validation:
     - RESP STATUS_CODE
     - RESP.schema
     - RESP.headers.HEADER:
        - key is present
        - value matches SCHEMA
     - Content-Type [S], Accept [S] against SPEC|OPERATION.produces
     - check SWAY's validateResponse()
     - use custom Frisby matchers
  - SCHEMA (for both value generation and RESP validation):
     - remember SCHEMA it is not 100% JSON schema
     - should include PARAM.allowEmptyValue
     - probably use OPENAPI-SCHEMA-TO-JSON-SCHEMA library
  - Parsing|serializing???
     - parsing RESP.headers
     - serializing PARAM
     - including collectionFormat
     - check SWAY's convertValue() and validateResponse()
     - check SWAGGER-JS
  - Global state:
     - before all tests, connect and create new database.
       At end of all tests (including if failed or uncaught exception), delete that database and disconnect.
     - live vs fake database???
     - servers and databases must be running???
  - State sharing:
     - for performance, run each it() in parallel (Promise.all())
     - avoid to avoid sharing state:
        - inside it() with generated data???
        - between parallel it()???
        - think about path variables???
        - maybe safe requests done against immutable database with specific IDs, unsafe requests against another database with
          random IDs??? How to handle DELETE|PUT|PATCH that assume model exists???
     - how to handle sequence of endpoints (e.g. handshake like OAuth)???
  - Libraries:
     - Jasmine (no Chai)
     - Frisby
  - Other:
     - also test middleware (not endpoints)
     - Gulp task
     - Jasmine-eslint
  - Explore:
     - fake data
     - data-driven tests
     - fuzzy testing
     - stress testing
     - load testing
     - test coverage
     - test runners, reporting

To do:
  - make sure feature/gulp branch deploys correctly on stage
     - remove npm run lint and fix CI accordingly
     - also check if Heroku needs to be fixed
  - merge feature/openapi_parsing after feature/gulp is merged
     - this should also fix Snyk vulnerability
  - Gulp ESLint should use --max-warnings 0 --report-unused-disable-directives
  - tell what has been done so far on Slack
  - Upgrade:
     - gulp-jasmine 4.0.0
     - jasmine-console-reporter 3.0.0
     - eslint 5.0.0-alpha.1
     - eslint-config-standard 11.0.0
     - eslint-plugin-import 2.11.0
     - eslint-plugin-node 6.0.1
     - eslint-plugin-promise 3.7.0
     - prettier 1.12.1
     - eslint-plugin-prettier 2.6.0
     - lint-staged 7.0.4
     - dotenv 5.0.1
     - ejs 2.5.8
     - express 4.16.3
     - express-useragent 1.0.12
     - helmet 3.12.0
     - joi 13.2.0
     - lodash 4.17.5
     - moment 2.22.1
     - nconf 0.10.0
     - nodemon 1.17.3
     - request 2.85.0
     - winston 2.4.1
  - use node-uuid (front-end already uses that)
  - change minimist to yargs (front-end already uses that)
  - consider if can use OpenAPI 3.0
  - integration testing
  - fix configuration, it's a little messy
     - implies learning about configuration tools first
  - Node 9
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - update API documentation to Widdershins
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
