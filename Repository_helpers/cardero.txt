Ideas:
  - search:
     - compare ICOs
  - monetization:
     - featured ICOs
  - community:
     - news:
        - RSS/Atom
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tell about vacation

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - prettier
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - minimist
  - husky, lint-staged

Things to change:
  - api-service:
     - use node-uuid (front-end already uses that)
     - change minimist to yargs (front-end already uses that)
     - update postman collections, possibly from OpenAPI spec file
     - use JSON schema instead of joi:
        - first use JSON schema during integration testing, then suggesting merging
           - maybe use enjoi as transition
        - possible advantages of JSON schemas:
           - declarative:
              - can be communicated to clients so they can validate before sending to APIs
                 - there are even library to generate <form> and <input>
              - schema is data not code, i.e. easier to manipulate for other purpose
                 - e.g. can be used for auto-documentation
           - we do not want to be loose on validation with sanitization, but fail hard instead
              - joi is built as sanitizer, e.g. every validation creates a deep copy
           - not JavaScript-specific
           - https://github.com/icebob/validator-benchmark
     - replace server-driven populating by client-driven populating:
        - first refactor populating so that each route declaratively specify which models to populate instead of
          doing it imperatively
        - then let clients decide it with a query parameter instead of declaring it on the routes
        - same for:
          - filter
          - aggregation
          - pagination
          - sorting
          - population
     - Node 9
     - redirects middleware
        - changes REQ.url
        - sets Content-Location [S]
        - uses YAML definition, e.g. /docs -> /openapi.html
     - should add /openapi.json file (with js-yaml)
     - Gulp:
        - add built files to .gitignore
     - yamllint
  - front-end-app:
     - keep .editorconfig in sync with back-end one
