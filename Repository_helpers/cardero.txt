Done:
Code review of rating report PR
Test and merge Gulp PR
OpenAPI specification improvements:
  - divide specification into several files
  - change how the specification is built
  - validate specification against syntax and semantic errors
Fix Snyk vulnerabilities related to swagger-jsdoc dependency
Improve linting
Use node-uuid instead of our own code for UUIDv4
Replace minimist by yargs (to match the libraries what the front-end uses)
Upgrade dependencies:
  - major versions: lint-staged v6 -> v7, ESlint v4 -> v5, Gulp-Jasmine v3 -> v4, jasmine-console-reporter v2 -> v3
  - minor versions: request, nconf, moment, joi, helmet, several eslint plugins, eslint-plugin-prettier
  - release versions: winston, nodemon, lodash, express-useragent, express, ejs, dotenv, prettier

Doing:
Add base for integration testing

Integration testing:
  - specification:
     - validate with SWAY (using built specification)
     - use SWAY for normalization of SPEC|OPERATION.consumes|produces, PARAM.schema, SECURITY
  - run one it() for each combination of OPERATION + RESP + RESP.x-test-params
  - RESP.x-test-params OBJ_ARR:
     - def OBJ_ARR: [{}]
     - key can be:
        - '[IN_]PARAM_NAME'
        - '[TYPE_]SEC_NAME'
        - 'schema|headers':
           - like RESP.schema|headers but for those possible params
           - combined as union (not intersection nor override) of RESP.schema|headers
           - "schema|headers" should never be considered a possible parameter name, unless prefixed with "TYPE_"
     - value (unless schema|headers) can be:
        - any VAL (including not specified)
        - 'any': random possible value
        - 'error': random not possible value
     - def param value (unless schema|headers):
        - non-required query|headers and SECURITY params: undefined
        - otherwise: use possible value
        - allow overriding OBJ properties???
     - use PATHDEF|OPERATION.parameters, PARAM.name|in
        - and SPEC|OPERATION.security, SPEC.securityDefinitions
     - should allow specifying (outside specification) SECURITY PARAMs for all requests
        - think of making it work with authentication
     - gulp openapi should validate x-test-params
  - [Not] possible value generation:
     - generate NUM [not] possible values, where NUM is hard-coded
        - generated from [SMALL_]SCHEMA
        - using JSON-SCHEMA-FAKER
     - if test fails, should print the generated values
     - do not create new it() for each possible value, i.e. keep inside the it() so it
       is less verbose: only report one success|failure
        - unless there is a way of doing many it() without verbosity
     - add fuzzy testing values???
  - HTTP request:
     - URL: use SERVER, OPERATION.schemes
        - allow overriding host|port (outside specification)
     - headers:
        - Content-Type [C] and Accept [C] according to SPEC|OPERATION.consumes|produces
  - Validation:
     - RESP STATUS_CODE
     - RESP.[x-test-params.*.]schema
     - RESP.[x-test-params.*.]headers.HEADER:
        - key is present
        - value matches SCHEMA
     - Content-Type [S], Accept [S] against SPEC|OPERATION.produces
     - check SWAY's validateResponse()
     - use custom Frisby matchers
  - SCHEMA (for both value generation and RESP validation):
     - remember SCHEMA it is not 100% JSON schema
     - should include PARAM.allowEmptyValue
     - probably use OPENAPI-SCHEMA-TO-JSON-SCHEMA library
  - Parsing|serializing:
     - parsing RESP.headers
     - serializing PARAM
     - including collectionFormat
     - check SWAY's convertValue() and validateResponse()
     - check SWAGGER-JS
  - parallelism:
     - should run in parallel (Promise.all()):
        - tests, i.e. it()
        - data-driven runs / value generation, i.e. inside it()
           - it() should fail if any failed, and only first failed one should reported
           - but they should still all run in parallel
     - should use CPU parallelism for speed too
     - maxConcurrency settings to avoid going over OS limits???
  - Global state:
     - before all tests, connect and create new database.
       At end of all tests (including if failed or uncaught exception), delete that database and disconnect.
     - live vs fake database???
     - servers and databases must be running???
  - tests should not share state:
     - i.e. probably should all start with same data state
     - possibilities???
        - mock ORM with no persistence
        - dry runs
        - deep copies of whole database
           - could be with ID namespacing, so can create pool of models during beforeAll()
     - what about when using data-driven tests inside one it()???
     - do not allow specifying path parameters in SPEC:
        - so we use mocked models
        - what about other parameters being relations???
     - Think or relations between models when it comes to generating data:
        - including array size for many relations
        - including whether to leave optional relation empty
        - relations ids should follow Array JSON schema, e.g. minItems
  - Variations:
     - could:
        - connect to real database or use mock ORM
        - use generated data or use production data
        - dry run vs non dry run
     - instead of running every variations, could???
        - only run ones most likely to fail, then run weaker ones if they do fail.
        - or maybe run two sets (one with each weak, one with each strong variation)
  - how to handle sequence of endpoints (e.g. handshake like OAuth)???
  - Libraries:
     - Jasmine (no Chai)
     - Frisby
  - Other:
     - also test middleware (not endpoints)
     - Gulp task
  - Explore:
     - fake data
     - data-driven tests
     - fuzzy testing
     - stress testing
     - load testing
     - test coverage
     - test runners, reporting

To do:
  - integration testing
  - consider if can use OpenAPI 3.0
  - fix configuration, it's a little messy
     - implies learning about configuration tools first
  - Node 9
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - update API documentation to Widdershins
  - lint-staged currently does not allow committing only half of a file
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
