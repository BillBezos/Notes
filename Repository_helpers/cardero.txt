Done
Add Gulp tasks:
  - make sure we do not forget to build the OpenAPI specification and the API documentation
  - add builds in watch mode
  - more automation/CI-friendly builds: fix npm scripts exiting when the task is not complete, or reporting success while it failed
  - improve performance:
     - Gulp adds streaming and parallelism to the build process, making it faster
     - use `eslint --cache`
  - better separation of data (`package.json`) and code, e.g. Gulp tasks code is linted by `eslint` and formatted by `prettier`
  - better build documentation with `gulp --tasks`
  - built files are now excluded in Git
  - update `README.md` with new build process
Allow creating Postman/Insomnia collections from the OpenAPI specification
Bug fixes:
  - fix MongoDB log transport (it was not working).
  - fix linting conflict between `yarn` and `prettier` (they do not agree with each other on how to format JSON files).
Vulnerability:
  - send a [pull request](https://github.com/sindresorhus/gulp-jasmine/pull/97) to fix Snyk vulnerability related to `gulp-jasmine`
  - send another [pull request](https://github.com/micromatch/anymatch/pull/25) to fix [Snyk vulnerabily](https://snyk.io/vuln/npm:braces:20180219) related to the `braces` package.
Dependencies:
  - upgrade `prettier` to `1.12.0`.
  - remove dead code: `cookie-parser` module.
Big refactoring:
  - refactor server startup code and database helpers so they return a promise and does not execute immediately
  - streamline middleware usage
  - fix wrong middleware order
  - simplify database helpers
  - add possibility to disconnect from the database (both Mongoose and MongoDB log transport)
  - use object destructuring in Mongoose schemas and importing models.
    Please note database models are now imported slightly differently.

Doing:
Add base for integration testing
Fix several problems with swagger-jsdoc with pull requests

Dredd:
  - to do:
     - state between requests
     - live vs fake database
     - authentication and OpenAPI security defs
     - host|port in different environments
     - server must be running
     - maybe check logLevel
     - Gulp task
  - should also test:
     - middleware (not endpoints)
     - error responses
     - different values of parameters
     - sequences of request|responses

To do:
  - make sure feature/gulp branch deploys correctly on stage
     - remove npm run lint and fix CI accordingly
     - also check if Heroku needs to be fixed
  - integration testing, dredd
  - create Gulp task to replace swagger-jsdoc with simpler (because do not use JSDoc comments parsing)
     - also it fixes swagger-jsdoc leaving JSON references, then redoc does not completely handle JSON references, e.g. for responses
        - dredd also has issues there
     - this will also remove the Snyk vulnerability
  - fix configuration, it's a little messy
     - implies learning about configuration tools first
  - use node-uuid (front-end already uses that)
  - change minimist to yargs (front-end already uses that)
  - Node 9
  - add Flow
  - RSS/Atom
  - use JSON schema instead of joi:
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
