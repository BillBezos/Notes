Doing:
Add base for integration testing

SPEC|OPERATION.security, SPEC.securityDefinitions:
  - type 'apiKey|oauth2|basic', in 'query|header'
SPEC.consumes|produces
SERVER, OPERATION.schemes
PATHDEF|OPERATION.parameters
RESP: STATUS_CODE, headers.HEADER, schema, examples.MIME
PARAM: name, in 'path|query|header|formData|body', [SMALL_]SCHEMA, required, allowEmptyValue
[SMALL_]SCHEMA:
  - [x-]example, default, enum
  - items|properties|additionalProperties, allOf
  - others validation props
  - not real JSON schema
  - collectionFormat
  - parsing|serializing

Integration testing:
  - tests:
     - for each:
        - OPERATION
        - RESP
  - think of sequences of HTTP requests and states between it()
  - run each it() in parallel (Promise.all())
  - Jasmine for the moment, including assertions (no Chai)
  - Frisby or swagger-js???
  - fake data
  - data-driven tests
  - fuzzy testing
  - stress testing
  - load testing
  - Jasmine-eslint
  - test coverage
  - explore test runners, reporting
  - test mocking less important for integration testing

Dredd:
  - to do:
     - state between requests
     - live vs fake database
     - authentication and OpenAPI security defs
     - host|port in different environments
     - server must be running
     - maybe check logLevel
     - Gulp task
  - should also test:
     - middleware (not endpoints)
     - error responses
     - different values of parameters
     - sequences of request|responses

To do:
  - make sure feature/gulp branch deploys correctly on stage
     - remove npm run lint and fix CI accordingly
     - also check if Heroku needs to be fixed
  - merge feature/openapi_parsing after feature/gulp is merged
     - this should also fix Snyk vulnerability
  - Gulp ESLint should use --max-warnings 0 --report-unused-disable-directives
  - Upgrade:
     - gulp-jasmine 4.0.0
     - jasmine-console-reporter 3.0.0
     - eslint 5.0.0-alpha.1
     - eslint-config-standard 11.0.0
     - eslint-plugin-import 2.11.0
     - eslint-plugin-node 6.0.1
     - eslint-plugin-promise 3.7.0
     - prettier 1.12.1
     - eslint-plugin-prettier 2.6.0
     - lint-staged 7.0.4
     - dotenv 5.0.1
     - ejs 2.5.8
     - express 4.16.3
     - express-useragent 1.0.12
     - helmet 3.12.0
     - joi 13.2.0
     - lodash 4.17.5
     - moment 2.22.1
     - nconf 0.10.0
     - nodemon 1.17.3
     - request 2.85.0
     - winston 2.4.1
  - use node-uuid (front-end already uses that)
  - change minimist to yargs (front-end already uses that)
  - consider if can use OpenAPI 3.0
  - integration testing, dredd
  - fix configuration, it's a little messy
     - implies learning about configuration tools first
  - Node 9
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - update API documentation to Widdershins
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - faker
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
