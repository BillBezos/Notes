To do:
  - ICOS:
     - `GET /icos?domain`
        - filter by `ICO.url` domain (without protocol nor subdomain) exact match
           - note that `ICO.url` can be null
     - remove bookmark feature (can be deployed on Monday)
  - Feed:
     - database migrations on stage/production
        - add `Sheet.feedItem`
        - add `Post.feedItem`
        - add `Feed` items from `Sheet.feedItem`
        - add `Feed` items from `Post.feedItem`
     - add `GET /feed?owner`
     - `Feed.visibility`:
        - `Sheet|Post.feedItem.visibility` can be `private` (default value), `unlisted` or `public`.
        - `Sheet|Post.feedItem.visibility` is always returned in all `/sheets|posts` endpoints responses.
        - `Sheet|Post.feedItem.visibility` can be directly updated by using `PUT /sheets|posts/:id`.
        - `GET /sheets|posts` only returns `Sheets|Posts` with `visibility` `public`
           - probably requires a MongoDB $lookup to get `Sheet|Post.feedItem.visibility`
        - `GET /sheets|posts/:id` returns `403` if `visibility` is `private` (but not `unlisted`)
        - `PUT|DELETE|POST /sheets|posts/:id` work as is, since only owners can use those endpoints anyway
        - add `GET /sheets|posts?visibility` STR_ARR filter parameter
           - can only be used when `GET /feed?owner` (i.e. filter to current owner) is used. `400` otherwise.
  - Sheet:
     - add `ICO.userData.sheets`
     - database indexes
     - `Sheet` automatic adding feature
        - should perform database migrations to re-actively do it on current users
  - tests, API documentation and refactoring for `/icos` endpoints
  - finish branch feature/errors_v2
     - also fix errors in API documentation
     - do not report local errors to Sentry, only stage and production
  - fix deleted ICOs still showing up: https://trello.com/c/rQuTpeyV/86-deleted-icos-are-still-available-in-the-ico-details-page-url. Proposal:
     - `ICO.state` can be set to `draft`, `public`, `hidden` or `deleted` with `PUT /icos/:icoId`
        - when an `ICO` is created, `ICO.state` defaults to `draft`
        - it is eventually published by setting `ICO.state` to `public`
        - it can then be deleted or hidden by setting `ICO.state` to `deleted|hidden`
     - updating `ICO.state` can only be done by Admins or DES specialists.
        - ICO owners can make an ICO edit request though
     - neither the `ICO` nor any of its related data is never removed from the database.
     - modifying an ICO (`PUT`, `POST`, `DELETE`, `PATCH`) should return `400` (i.e. read-only) if `ICO.state` is `deleted`. Other `ICO.state` do not have that restriction
     - `GET` a deleted/draft/hidden `ICO` by ID/slug should return `404` unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - `GET` several `ICO`s should skip deleted/draft/hidden ICOs unless `?state=["draft|public|hidden|deleted", ...]` query parameter is used (default: `['public']`)
     - this is for any ICOs requests, whether being top-level on `/icos` or as a nested attribute within another route/model.
     - When it comes to the front-end, it should use `?state` parameter depending on the use case:
        - ICO lists vs calendar vs main listing page vs etc.
        - front-end app vs admin app
        - etc. (edited)
  - API documentation:
     - allow toggling endpoints according to role (admin, DES, ICO owner, premium, normal)
  - blog post about test-openapi
  - integration testing
     - also test middleware (not only endpoints)
  - refactoring:
     - make status codes more consistent and hide behind a common interface
     - refactor authentication to simplify it
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - add a model layer between controller and Mongoose:
     - provide caching invalidation functionality
     - provide ICO slug update functionality
     - make any DELETE flag the model as deleted, but not removed from database
  - upgrade node.bcrypt.js to fix security vulnerability (when they release a version)
  - Gulp buildwatch crashes (does not watch anymore) after the first OpenAPI error
  - switch Jasmine to Jest, like in front-end
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
 Â - replace current dependency REQUEST by CROSS-FETCH
  - lint-staged currently does not allow committing only half of a file
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
