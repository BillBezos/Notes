Done today:
  - revert bug fixes from yesterday/this morning related to CI issues. The real problem was CircleCI not our code.
  - ratings:
     - rework score calculation with new algorithm (https://github.com/Cardero-X/api-service/pull/287)
     - implement feedback and merge PRs:
        - API:
           - Remove `globalConfig` #278
           - Feature/rename ratings #279
           - Feature/ratings populatedev #280
           - Remove `Metric.min|max` #281
        - `admin` app:
           - Remove `globalConfig` UI #58
           - Feature/rename ratings #59
           - Remove `metric.min|max` #60
     - data migrations on stage and production:
        - drop `config` collection
        - drop `ICOScore` collection
        - rename ICO.ratingsReport* attributes
        - remove `Metric.min|max|deleted|isDefaultFilter|isPublic|user` attributes
     - remove `ICO.scoreMinUsersToShow`:
        - in API (https://github.com/Cardero-X/api-service/pull/288)
        - in admin app (https://github.com/Cardero-X/admin-app/pull/61)
     - bug fix: `Metric`s being sorted in reverse order (https://github.com/Cardero-X/api-service/commit/bab1b31149ff8a7c10dcfda5c5b9a3e03711c2be)
  - deploy API to production
  - deploy `admin` app to production
  - code review:
     - Remove special characters from slugs #283
     - After list is updated, return the updated slug #284
     - Updates URL Slugs to resolve some of its issues #285

To do:
  - ratings:
     - database migration (stage and production):
        - db.getCollection('icos').update({}, { $set: { scoreStartCount: null } }, {multi: true})
     - deploy API to production
     - ICO.scoreMinUsersToShow:
        - merge API PR
        - merge `admin` PR
        - database migration (stage and production): remove `ICO.scoreMinUsersToShow`
        - must deploy `admin` app to production before deploying API to production
     - make sure everything is done with this feature, including from Trello
  - refactor icoService filtering, code is terrible
  - List:
     - finish refactoring
     - add all tests
     - fix OpenAPI security / access token documentation for those endpoints
     - all `List` should return counts in the same consistent way, i.e. as `List.likesCount|dislikesCount|rankingScore` (no more nested `ratings`)
        - ask Scott to help with new shape in the front-end
     - bug:
        1. Being logged in, open any list with no likes / dislikes
        2. Try to set a like
        3. Refresh the page, expected counts: `likes: 1, dislikes: 0`; actual counts: `likes: 1, dislikes: 1`
  - bug fixes:
     - search improvement: https://trello.com/c/VDh79tAJ/95-search-algorithm-on-public-site-not-returning-an-exact-match
     - any other important ones on Trello
  - blog post about test-openapi
  - integration testing
     - also test middleware (not only endpoints)
  - refactoring:
     - make status codes more consistent and hide behind a common interface
     - refactor authentication to simplify it
  - migrations:
     - check production database matches our data model (perform live queries to fix it otherwise)
     - automated system that syncs staging database with production database
     - system to perform and test migrations against production database
  - add a model layer between controller and Mongoose:
     - provide caching invalidation functionality
     - provide ICO slug update functionality
     - make any DELETE flag the model as deleted, but not removed from database
  - upgrade node.bcrypt.js to fix security vulnerability (when they release a version)
  - Gulp buildwatch crashes (does not watch anymore) after the first OpenAPI error
  - switch Jasmine to Jest, like in front-end
  - Node 10
  - 404 are HTML even in JSON
  - add Flow
  - RSS/Atom
  - generate client SDKs from OpenAPI: JavaScript, Bash, others
  - update API documentation to Widdershins
 Â - replace current dependency REQUEST by CROSS-FETCH
  - lint-staged currently does not allow committing only half of a file
  - use declarative way (with JSON-SCHEMA-MOCKER) instead of current approach for populating scripts
  - create fake|test database from OpenAPI:
     - can maybe specify in OpenAPI if a specific type of data is prefered
        - e.g. at least one user should be admin
        - can use faker, etc.
     - can replace populating scripts
     - can be merged with the test populating task at beginning of integration tests
  - use JSON schema instead of joi:
     - probably using SWAY.validateRequest|Response()
     - first use JSON schema during integration testing, then suggesting merging
        - maybe use enjoi as transition
     - possible advantages of JSON schemas:
        - declarative:
           - can be communicated to clients so they can validate before sending to APIs
              - there are even library to generate <form> and <input>
           - schema is data not code, i.e. easier to manipulate for other purpose
              - e.g. can be used for auto-documentation
        - we do not want to be loose on validation with sanitization, but fail hard instead
           - joi is built as sanitizer, e.g. every validation creates a deep copy
        - not JavaScript-specific
        - https://github.com/icebob/validator-benchmark
     - also validate response
     - also parse request parameters
  - replace server-driven populating by client-driven populating:
     - first refactor populating so that each route declaratively specify which models to populate instead of
       doing it imperatively
     - then let clients decide it with a query parameter instead of declaring it on the routes
     - same for:
       - filter
       - aggregation
       - pagination
       - sorting
       - population
  - generate Mongoose models from OpenAPI specification
  - add GraphQL:
     - swagger-to-graphql would allow automating it while still supporting REST
     - I estimated it at 2 days of work
  - other possible uses of OpenAPI:
     - server-side routing
     - web automation
     - mock server
  - yamllint

To do (front-end app):
  - keep .editorconfig in sync with back-end one

Ideas:
  - gamification:
     - simple overall/aggregate ranking number
     - widget/badges showing "certified by"
     - rankings, "best of the week"
     - think of potentialpark

Tools to update:
  - MongoDB, mongoose
  - nvm
  - cors
  - helmet
  - moment
  - morgan
  - winston, winston-mongodb, winston-sentry
  - lodash

Tools to learn (high priority):
  - Flow (they mentioned adding it):
     - maybe also TypeScript
     - go through to_learn to check related projects too
  - Heroku
  - Circle CI
  - ElasticSearch
  - documentation, static website generation (for API doc generation)
  - web security:
     - snyk

Tools to learn (priority):
  - yarn
  - Sentry
  - HTTPS
  - Mailgun
  - Twilio
  - Stripe

Tools to learn:
  - dotenv, nconf
  - express-rate-limit
  - express-useragent
  - geoip-lite
  - libphonenumber-js
  - husky, lint-staged
