
         
   SINON  
         



VERSION ==>                       #4.4.8
                                  #Node.js or browser
                                  #Provides: spies, function stubs, mocks timers, mocks client-side responses (XHR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SANDBOX            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SANDBOX                           #Like SINON, but not global
                                  #Except: no test|createStubInstance()
SINON.sandbox.create()->SANDBOX   #
SANDBOX.restore()                 #Fire all *.restore() (removing all mocks, stubs, spies, etc.)
SANDBOX.reset()                   #Fire all SPYFUNC.reset()



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPIES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SINON.spy([FUNC])->SPYFUNC        #Creates a SPYFUNC
                                  #FUNC is original function (def: empty).
SINON.spy(OBJ, 'FUNC')            #Same but with OBJ.FUNC, and SPYFUNC is assigned to OBJ.FUNC

SPYFUNC.restore()                 #Transform back to original FUNC (for OBJ.FUNC)
SPYFUNC.reset()                   #Erase previous calls. Does not transform back.

SPYFUNC.withArgs(SVAL...)->SPYFUNC#Only for calls made with arguments SVAL...

SPYFUNC.callCount                 #Number of times it has been fired
SPYFUNC.called                    #callCount > 0
SPYFUNC.calledOnce|Twice|Thrice   #callCount == 1|2|3
SPYFUNC.calledBefore|After
(SPYFUNC2)->BOOL                  #First call of SPYFUNC before|after SPYFUNC2
SPYFUNC|SPYCALL.
[always|never]calledWith          #True if fired at least once|always|never with at least|exactly those arguments.
[Exactly|Match](SVAL...)          #With "Match": automatically wrap SVAL with SINON.match(VAL)
SPYFNC.[always]returned(VAL)->BOOL#Returned VAL at least once|always (deep comparison).
SPYFNC.[always]calledOn(OBJ)->BOOL#Fired with OBJ as `this` at least once|always.
SPYFUNC.calledWithNew()->BOOL     #Fired as new SPYFUNC
SPYFUNC|SPYCALL.
[always]threw([VAL|STR])->BOOL    #Threw at least once|always. STR is ERROR.type.

SPYFUNC.getCall(UINT)->SPYCALL    #
SPYFNC.first|second|third|lastCall#Same as SPYFUNC.getCall(1|2|3|last)
SPYCALL.[not]calledWithExactly|
Match|calledOn|threw(...)         #Same as above but for this specific call
SPYCALL.args                      #VAL_ARR
SPYCALL.returnValue               #Return VAL
SPYCALL.thisValue                 #this OBJ
SPYCALL.exception                 #Exception thrown VAL (or undefined)
SPYFUNC.thisValues|args|
exceptions|returnValues           #Same but as ARR

SINON.assert.*                    #Assertions functions (see online doc).
                                 ##Prefer using SINON-CHAI (Node module 2.5.0) below
                                 ##There is also jasmine-sinon for Jasmine
SHOULD_SPYFUNC.[have.been.]
callCount(NUM)                   ##
SHOULD_SPYFUNC.[have.been.]
called[Once|Twice|Thrice]        ##
SHOULD_SPYFUNC.[have.been.]
calledBefore|After(SPYFUNC2)     ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledWith
[Exactly|Match](VAL...)          ##
SHOULD_SPYFUNC.[have.been.]
[always.]returned(VAL)           ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledOn(OBJ)           ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledWithNew           ##
SHOULD_SPYFUNC.[have.been.]
[always.]thrown([ERROR|STR])     ##

SPYFUNC.printf(STR[, VAL...])     #Printf using formatting STR with:
                                  #  - "%n": 'FUNC'
                                  #  - "%c": SPYFUNC.callCount in word
                                  #  - "%C": string representation of calls
                                  #  - "%t": calls this
                                  #  - "%NUM": VAL...
                                  #  - "%*": all VAL...


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STUBS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STUB                              #SPYFUNC (inherit all its members) which behavior can be manipulated.

SINON.stub([FUNC2])->STUB
SINON.stub
 (OBJ[, 'FUNC'][, FUNC2])->STUB   #Like SINON.spy() except function is replaced by FUNC2 (if present)
SINON.wrapMethod
 (OBJ[, 'FUNC'][, FUNC2])->STUB   #Same for get|set access descriptors
SINON.createStubInstance(TYPE)    #Same for a function TYPE

STUB.onCall(UINT)...              #Like STUB.withArgs(...) but for the number of the call not its arguments.
STUB.onFirst|Second|ThirdCall()...#

STUB.returns(VAL)                 #Mocks: return VAL
STUB.returnsThis()                #Mocks: return `this`
STUB.returnsArg(UINT)             #Mocks: return arguments[UINT]

STUB.throws([ERROR|STR])          #Mocks: throw (STR is ERROR.type)

STUB.call[s]Arg[On][With][Async]  #Mocks: fire arguments[UINT]():
(UINT[, OBJ][, VAL...])           #  - "On": with OBJ as `this`
                                  #  - "With" + VAL...: with those arguments
                                  #  - If "s", for future calls. If no "s", fire all previous calls in order.
                                  #  - If "Async", doesn't block (doesn't work with "s")
STUB.yield[s][On][Async](...)     #Same as STUB.call[s]Arg[On]With[Async](0, ...)
STUB.yield[s][On][Async]Right(...)#Same for last arg
STUB.yield[s]To[On][Async][Right]
 ('FUNC', ...)                    #Same but using ARG.FUNC() instead of ARG()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MATCHER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SVAL                              #VAL|SINONMATCH
SINONMATCH                        #Everything below

SINON.match
 (FUNC(VAL)->BOOL[, 'ERROR'])     #
SINONMATCH.and|or(SINONMATCH2)    #

SINON.match.any                   #Always true
SINON.match(VAL)                  #== VAL
SINON.match.same(VAL)             #=== VAL

SINON.match.defined               #!== null|undefined
SINON.match.truthy|falsy          #!== 0|""|false

SINON.match.typeof(STR)           #typeof STR
SINON.match.instanceOf(TYPE)      #instanceof TYPE
SINON.match.number|string|
object|func|array|regexp|date     #Checks type

SINON.match(STR|REGEXP)           #typeof "string" and partially matches STR|REGEXP

SINON.match(OBJ)                  #Contains OBJ
SINON.match.has[Own]('VAR'[, VAL])#Same for one specific property
                                  #Can only check own members (non-inherited)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SINON.useFakeTimers
 ([DATE, ]['FUNC'...])->CLOCK     #Calls LOLEX.install(global, ...) (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              XHR              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SINON.useFakeXMLHttpRequest()
 ->SINONXHR                       #Mocks XMLHttpRequest (client-side)
SINONXHR.restore()                #

SINONXHR.addFilter                #Don't mock request made to XHR.open(...) if BOOL true and
(FUNC(...)->BOOL)                 #SINONXHR.useFilters is true (def: false)
                                  #Does't seem to work.

SINONXHR.onCreate = FUNC(XHR)     #When a request is sent.
                                  #Must set up XHR then use XHR.respond(...)
XHR                               #Inherits from real XHR
XHR.url                           #
XHR.method                        #
XHR.requestHeaders                #OBJ
XHR.requestBody                   #STR
XHR.username|password             #
XHR.async                         #BOOL

XHR.status                        #NUM
XHR.statusText                    #STR
XHR.getResponseHeader('VAR')->VAL #
XHR.setResponseHeader('VAR', VAL) #
XHR.getAllResponseHeaders()->OBJ  #
XHR.response[Text]                #STR
XHR.responseXML                   #DOCUMENT
XHR.setResponseBody(STR)          #
XHR.respond(UINT, OBJ, STR)       #Respond to a request. UINT is status code, OBJ is headers, STR is body.
XHR.autoRespond                   #If true, respond after XHR.autoRespondAfter (def: 10, in ms)


SINON.fakeServer[WithClock].      #Calls SINON.useFakeXMLHttpRequest()
 create()->FAKESERVER             #FAKESERVER is a higher-level API above XHR
                                  #Use "WithClock" if using SINON.useFakeTimers()
FAKESERVER.restore()              #

FAKESERVER.respondWith            #Do XHR.respond() to requests matching METHOD and PATH.
([['METHOD',]PATH_STR|REGEXP,]VAL)#Response is according to VAL:
                                  #  - [UINT, OBJ, STR]: XHR.respond(...)
                                  #  - STR: same as [200, {}, STR]
                                  #  - FUNC(XHR, ...):
                                  #     - must call XHR.respond()
                                  #     - if REGEXP, also pass parenthesis groups as additional arguments
                                  #XHR not matching anything will get [404, {}, '']
                                  #Responses are queued until FAKESERVER.respond() is called.
                                  #Must be called before actual requests.
FAKESERVER.autoRespond            #If true, respond after FAKESERVER.autoRespondAfter (def: 10)
FAKESERVER.respondImmediately     #If true, respond after 0ms
FAKESERVER.respond()              #
