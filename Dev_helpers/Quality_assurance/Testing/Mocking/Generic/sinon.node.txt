
         
   SINON  
         



VERSION ==>                       #1.15.0
                                  #Node.js or browser
                                  #Provides: spies, function stubs, mocks timers, mocks client-side responses (XHR)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SANDBOX            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SANDBOX                           #Like SINON, but not global
                                  #Except: no test|createStubInstance()
SINON.sandbox.create()->SANDBOX   #
SANDBOX.restore()                 #Fire all *.restore() (removing all mocks, stubs, spies, etc.)
SANDBOX.reset()                   #Fire all SPYFUNC.reset()

MOCHA-SINON ==>                  ##For tests:
                                 ##  - calls this.sinon = SINON.sandbox.create() in beforeEach()
                                 ##  - this.sinon.restore() in afterEach()
                                 ##Also provide SINON.test(FUNC()):
                                 ##  - same but only during FUNC
                                 ##  - uses this.* instead of this.sinon.*
                                 ##Version 1.1.4


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MATCHER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SVAL                              #Means either:
                                  #  - a VAL which will be compared for equality
                                  #  - a SINONMATCH, i.e. SINON.match(FUNC(VAL2) -> BOOL[, STR]) which will test conformance
                                  #    (STR is error message if used in assertions)
SINONMATCH.and|or(SINONMATCH2)    #Returns SINONMATCH3
                                  #Already-made SINONMATCH are available:
SINON.match.any                   #Always true
SINON.match.defined               #Not null|undefined
SINON.match.typeof(STR)           #typeof
SINON.match.instanceOf(FUNC)      #TYPE
SINON.match.number|string|
object|func|array|regexp|date     #Checks type
SINON.match.truthy|falsy          #Falsy is NUM 0, STR "", BOOL false. OBJ always truthy
SINON.match.same(VAL)             #=== VAL
SINON.match(VAL)                  #== VAL
SINON.match(STR|REGEXP)           #typeof "string", and partially matches STR|REGEXP
SINON.match(OBJ)                  #Partially matches properties+values of OBJ
SINON.match.has[Own]
(VAR[, VAL])                      #Same for one specific property+value, and can only check own members (non-inherited)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPIES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SINON.spy([FUNC])->SPYFUNC        #Creates a SPYFUNC
                                  #FUNC is original function (def: empty).
SINON.spy(OBJ, 'FUNC')            #Same but with OBJ.FUNC, and SPYFUNC is assigned to OBJ.FUNC

SPYFUNC.restore()                 #Transform back to original FUNC (for OBJ.FUNC)
SPYFUNC.reset()                   #Erase previous calls. Does not transform back.

SPYFUNC.withArgs(SVAL...)->SPYFUNC#Only for calls made with arguments SVAL...

SPYFUNC.callCount                 #Number of times it has been fired
SPYFUNC.called                    #callCount > 0
SPYFUNC.calledOnce|Twice|Thrice   #callCount == 1|2|3
SPYFUNC.calledBefore|After
(SPYFUNC2)->BOOL                  #First call of SPYFUNC before|after SPYFUNC2
SPYFUNC|SPYCALL.
[always|never]calledWith          #True if fired at least once|always|never with at least|exactly those arguments.
[Exactly|Match](SVAL...)          #With "Match": automatically wrap SVAL with SINON.match(VAL)
SPYFNC.[always]returned(VAL)->BOOL#Returned VAL at least once|always (deep comparison).
SPYFNC.[always]calledOn(OBJ)->BOOL#Fired with OBJ as `this` at least once|always.
SPYFUNC.calledWithNew()->BOOL     #Fired as new SPYFUNC
SPYFUNC|SPYCALL.
[always]threw([VAL|STR])->BOOL    #Threw at least once|always. STR is ERROR.type.

SPYFUNC.getCall(UINT)->SPYCALL    #
SPYFNC.first|second|third|lastCall#Same as SPYFUNC.getCall(1|2|3|last)
SPYCALL.[not]calledWithExactly|
Match|calledOn|threw(...)         #Same as above but for this specific call
SPYCALL.args                      #VAL_ARR
SPYCALL.returnValue               #Return VAL
SPYCALL.thisValue                 #this OBJ
SPYCALL.exception                 #Exception thrown VAL (or undefined)
SPYFUNC.thisValues|args|
exceptions|returnValues           #Same but as ARR

SINON.assert.*                    #Assertions functions (see online doc).
                                 ##Prefer using SINON-CHAI (Node module 2.5.0) below
                                 ##There is also jasmine-sinon for Jasmine
SHOULD_SPYFUNC.[have.been.]
callCount(NUM)                   ##
SHOULD_SPYFUNC.[have.been.]
called[Once|Twice|Thrice]        ##
SHOULD_SPYFUNC.[have.been.]
calledBefore|After(SPYFUNC2)     ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledWith
[Exactly|Match](VAL...)          ##
SHOULD_SPYFUNC.[have.been.]
[always.]returned(VAL)           ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledOn(OBJ)           ##
SHOULD_SPYFUNC.[have.been.]
[always.]calledWithNew           ##
SHOULD_SPYFUNC.[have.been.]
[always.]thrown([ERROR|STR])     ##

SPYFUNC.printf(STR[, VAL...])     #Printf using formatting STR with:
                                  #  - "%n": 'FUNC'
                                  #  - "%c": SPYFUNC.callCount in word
                                  #  - "%C": string representation of calls
                                  #  - "%t": calls this
                                  #  - "%NUM": VAL...
                                  #  - "%*": all VAL...


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             STUBS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


STUB                              #SPYFUNC (inherit all its members) which behavior can be manipulated.

SINON.stub([FUNC2])->STUB
SINON.stub
 (OBJ[, 'FUNC'][, FUNC2])->STUB   #Like SINON.spy() except function is replaced by FUNC2 (if present)
SINON.wrapMethod
 (OBJ[, 'FUNC'][, FUNC2])->STUB   #Same for get|set access descriptors
SINON.createStubInstance(TYPE)    #Same for a function TYPE

STUB.onCall(UINT)...              #Like STUB.withArgs(...) but for the number of the call not its arguments.
STUB.onFirst|Second|ThirdCall()...#

STUB.returns(VAL)                 #Mocks: return VAL
STUB.returnsThis()                #Mocks: return `this`
STUB.returnsArg(UINT)             #Mocks: return arguments[UINT]

STUB.throws([ERROR|STR])          #Mocks: throw (STR is ERROR.type)

STUB.call[s]Arg[On][With][Async]  #Mocks: fire arguments[UINT]():
(UINT[, OBJ][, VAL...])           #  - "On": with OBJ as `this`
                                  #  - "With" + VAL...: with those arguments
                                  #  - If "s", for future calls. If no "s", fire all previous calls in order.
                                  #  - If "Async", doesn't block (doesn't work with "s")
STUB.yield[s][On][Async](...)     #Same as STUB.call[s]Arg[On]With[Async](0, ...)
STUB.yield[s][On][Async]Right(...)#Same for last arg
STUB.yield[s]To[On][Async][Right]
 ('FUNC', ...)                    #Same but using ARG.FUNC() instead of ARG()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CLOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOLEX                            ##Version 1.3.1

LOLEX.install                    ##Mocks:
 ([GLOBAL, ][DATE, ]['FUNC'...]) ##  - set|clearTimeout|Immediate|Interval(), requestAnimationFrame(), Date() (or 'FUNC'...)
 ->CLOCK                         ##  - so they are synchronous and are advanced with CLOCK.tick(NUM)
                                 ##Def DATE: Date.now()
CLOCK.tick(NUM)->NUM2            ##In milliseconds. Returns number of ticks.
CLOCK.restore()                  ##

CLOCK.setSystemTime(DATE)->CLOCK ##Change current DATE

LOLEX.createClock([DATE])->CLOCK ##Same but does not mock
                                 ##Instead, use CLOCK.setTimeout|...()

SINON.useFakeTimers
 ([DATE, ]['FUNC'...])->CLOCK     #Calls LOLEX.install(global, ...) (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              XHR              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SINON.useFakeXMLHttpRequest()
 ->SINONXHR                       #Mocks XMLHttpRequest (client-side)
SINONXHR.restore()                #

SINONXHR.addFilter                #Don't mock request made to XHR.open(...) if BOOL true and
(FUNC(...)->BOOL)                 #SINONXHR.useFilters is true (def: false)
                                  #Does't seem to work.

SINONXHR.onCreate = FUNC(FAKEXHR) #When a request is sent.
                                  #Must set up FAKEXHR then use FAKEXHR.respond(...)
FAKEXHR                           #Inherits from real XHR
FAKEXHR.url                       #
FAKEXHR.method                    #
FAKEXHR.requestHeaders            #OBJ
FAKEXHR.requestBody               #STR
FAKEXHR.username|password         #
FAKEXHR.async                     #BOOL

FAKEXHR.status                    #NUM
FAKEXHR.statusText                #STR
FAKEXHR.response[Text]            #STR
FAKEXHR.responseXML               #DOCUMENT
FAKEXHR.respond(UINT, OBJ,STR)    #Respond to a request. UINT is response code, OBJ is headers, STR is response.
FAKEXHR.getResponseHeader
(VAR_STR)                         #
FAKEXHR.setResponseHeader
(VAR_STR, VAL)                    #
FAKEXHR.getAllResponseHeaders()   #
FAKEXHR.setResponseBody(STR)      #
FAKEXHR.autoRespond               #If true, respond after FAKEXHR.autoRespondAfter (def: 10)


SINON.fakeServer[WithClock].      #Calls SINON.useFakeXMLHttpRequest() then returns FAKESERVER, which is a higher-level API for
create()                          #the same purpose.
                                  #Use "WithClock" if using useFakeTimers()
FAKESERVER.restore()              #

FAKESERVER.respondWith            #Do FAKEXHR.respond() to requests whose path (starting with "/" after domain name) matches
([[METHOD,]URLSTR|REGEXP,]VAL)    #METHOD and URL (totally if STR, partially if REGEXP) according to VAL:
                                  #  - FUNC(FAKEXHR): must call FAKEXHR.respond()
                                  #    If REGEXP, also pass parenthesis groups as additional ARGS_STR...
                                  #  - [ UINT, OBJ, STR ]: call FAKEXHR.respond(...)
                                  #  - STR: same as [ 200, {}, STR ]
                                  #FAKEXHR not matching anything will get [ 404, {}, "" ]
                                  #Responses are queued until FAKESERVER.respond() is called.
                                  #Must be called before actual requests.
FAKESERVER.autoRespond            #If true, respond after FAKESERVER.autoRespondAfter (def: 10)
FAKESERVER.respondImmediately     #If true, respond after 0ms
