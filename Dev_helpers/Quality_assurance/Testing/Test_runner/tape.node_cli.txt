
        
   TAPE  
        



VERSION ==>                       #4.9.0
                                  #Node, browser and CLI

TAPE.test(['TITLE', ][OPTS, ]FUNC(TEST))
                                  #OPTS:
                                  #  - skip BOOL (def: false)
                                  #  - timeout NUM (def: 500)
                                  #  - objectPrintDepth NUM (def: 5): can also use ENVVAR NODE_TAPE_OBJECT_PRINT_DEPTH
TEST.end([ERROR])                 #Must either be called, or TEST.plan() must be defined
TEST.plan(NUM)                    #

TEST.test(...)                    #Like TAPE.test(...) but for a sub-test (i.e. like describe())

TAPE.skip(...)                    #Same as TAPE.test() but with OPTS.skip true
TEST.skip([STR])                  #
TEST.only(...)                    #Same as TAPE.test() but only run that test
TEST.timeoutAfter(NUM)            #

TEST.comment(STR)                 #TAP comment

TAPE.onFinish(FUNC())             #afterAll() hook
TAPE.onFailure(FUNC())            #Each time a test fails

TEST.fail('ERROR')                #
TEST.pass([STR])                  #
TEST.ok(VAL[, STR])               #== true
                                  #Aliases: TEST.true|assert()
TEST.notOk(VAL[, STR])            #== false
                                  #Aliases: TEST.false()
TEST.error(ERROR[, STR])          #== false (i.e. undefined)
                                  #Uses ERROR.message
                                  #Aliases: TEST.ifErr[or]()
TEST.equal(VAL, VAL2[, STR])      #===
                                  #Aliases: TEST.equals|isEqual|is|strictEqual[s]()
TEST.notEqual(VAL, VAL2[, STR])   #!==
                                  #Aliases: TEST.notEquals|isNotEqual|doesNotEqual|isInequal|isNot|not|notStrictEqual[s]()
TEST.deepEqual(VAL, VAL2[, STR])  #Deep members ===
                                  #Aliases: TEST.deepEquals|isEquivalent|same()
TEST.notDeepEqual(VAL, VAL2[,STR])#Deep members !==
                                  #Aliases: TEST.[is]notEquivalent|[is]notDeeply|notSame|isNotDeepEqual|isInequivalent()
TEST.deepLooseEqual               #Deep members ==
 (VAL, VAL2[, STR])               #Aliases: TEST.looseEqual[s]()
TEST.notDeepLooseEqual            #Deep members !=
 (VAL, VAL2[, STR])               #Aliases: TEST.notLooseEqual[s]()
TEST.throws                       #FUNC() throws
 (FUNC[, REGEXP|FUNC2][, STR])    #ERROR.message matches REGEXP or FUNC2(ERROR)->true
TEST.doesNotThrow
 (FUNC[, REGEXP|FUNC2][, STR])    #FUNC() does not throw

TEST.createHarness()->TEST???     #

TEST.createStream([OPTS])->IOSTREAM
                                  #Get TAP output
                                  #OPTS:
                                  #  - objectMode BOOL (def: false): get stream of tap-parser's TEST (see its doc) instead of STR
