
        
   JEST  
        



VERSION ==>                       #22.4.2

JASMINE ==>                       #Used to be used as the base but:
                                  #  - only for test files syntax and assertions (and with some differences)
                                  #  - not for CLI, programmatic usage, CONF nor mock helpers (Ajax, timers, spies)

ASSERTIONS ==>                    #See Jest assertions doc

To do???
  - finish documentation
  - go through guides
  - programmatic usage
  - put into different doc files
     - including reporters
  - check source code and different Jest packages
  - check edl entry for jest
  - search "jest" in edl
  - try to find Jest projects on GitHub
     - including parallelism
     - jest GitHub organization
     - jest-community GitHub organization
  - add "alternatives" entry in Mocha doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe[.skip|only]         #Test suite.
 (STR[, FUNC()])                  #Can be nested.
                                  #x or not using FUNC() to skip
                                  #f: for only running this suite
[x|f]it|test[.skip|only]          #Test case.
 (STR[, FUNC([FUNC2]])            #Async if:
                                  #  - FUNC2 defined
                                  #  - PROMISE returned
                                  #Fails if:
                                  #  - error thrown
                                  #  - calling FUNC2(ERROR)
                                  #  - calling [FUNC2.]fail(STR|ERROR) (better stack trace)
                                  #  - returned PROMISE is rejected
                                  #x|f: like describe() except can also call pending([STR])
                                  #FUNC can be FUNC* (generator)

before|afterAll|Each(FUNC([FNC2]))#Fire FUNC() before|after once|each in current describe() (or all if outside)
                                  #Since each top-level test file is isolated for each other,
                                  #this is only for current top-level test file (and the files required by it).
CONF.setupFiles                   #Files RPATH_ARR required before any test file (like beforeAll())
CONF.setupTestFrameworkScriptFile
--setupTestFrameworkScriptFile    #Same except single RPATH and run after CONF.setupFiles
CONF.globalSetup|Teardown         #RPATH to a FUNC([FUNC2]) executed once before all test files

this                              #Top-level `this` is an empty object
                                  #describe|it() `this` is not shared
                                  #I.e. can either:
                                  #  - use arrow functions and reuse that `this` object
                                  #  - not use `this` but share a top-level object


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #In:
                                  #  - jest -c|--config=CONFIF_FILE.js|json
                                  #  - ./jest.config.js
                                  #  - package.json: PACKAGE.jest
--showConfig                      #Prints resolved CONF then exits
--debug                           #Prints resolved CONF then run tests

CONF.preset                       #'MODULE' exporting a CONF to use as base config

CONF.projects                     #CONF_ARR. Run several instances of Jest at once, each with different CONF
--projects 'DIR'...               #Can also be 'DIR'_ARR as shortcut for { roots: ['DIR'] }...
                                  #Each CONF should have displayName STR property (used as title)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.testMatch                    #'GLOB'_ARR (using micromatch) of test files to include
                                  #Def: any *.spec|test.js[x] or __tests__/**/*.js[x]
CONF.testRegex
--testPathPattern=REGEXP
jest REGEXP...                    #Same as 'REGEXP'_ARR
CONF.testPathIgnorePatterns       #'REGEXP'_ARR (def: ['/node_modules/']) of test files to ignore

CONF.rootDir                      #Base 'DIR' (def: package.json DIR, or $PWD)
                                  #Can also use '<rootDir>' in other CONF.*
CONF.roots                        #'DIR'_ARR (def: ['<rootDir>']) where source files, test files and __mock__ files are searched

-o                                #Only run test files that have changed or whose required files have changed
--onlyChanged                     #Does not work with dynamic requires
                                  #"Changed" is any file modified since last commit, from a Git/Mercurial perspective
--lastCommit                      #Same but files modified by last commit (not ones currently modified)
--changedFilesWithAncestor        #Same as --onlyChanged --lastCommit
--changedSince BRANCH             #Same but files modifies since BRANCH's commit
--findRelatedTests FILE,...       #Same but with explicit list of files

--listTests                       #Show list of test files that will be run

-t REGEXP
--testNamePattern REGEXP          #Only run tests whose title matches REGEXP


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


-b
--bail
CONF.bail                         #BOOL (def: false). Stops running tests after first test failure.
--forceExit                       #Call process.exit() after test run, even if there are some pending macrotasks
--passWithNoTests                 #Make testing succeed (instead of fail) when there are no tests

--watch                           #Watch mode: re-run on files changes (uses watchman)
                                  #Only re-run impacted test files.
                                  #Has interactive mode, allowing to re-run with --onlyChanged, --testPathPattern,
                                  #--testNamePattern or only failed tests
--watchAll                        #Same but re-run all test files, not just impacted ones.
--no-watchman                     #Same but does not watch for new files.
CONF.watchPathIgnorePatterns      #'REGEXP'_ARR of files that should not trigger new run in watch mode

CONF.runner                       #RPATH. Main action performed by Jest.
                                  #By default is "jest-runner", i.e. perform tests with Jest.
                                  #But can do other things:
                                  #  - so Jest is used as a test framework instead of a test runner
                                  #  - i.e. re-use watch mode, reporting, parallelism, selection, execution, but not core test running
                                  #I think using a build automation tool (Gulp, etc.) is better for this.
                                  #Available ones (see their doc online):
                                  #  - jest-runner-eslint: ESLint
                                  #  - jest-runner-mocha: Mocha
                                  #  - jest-runner-tsc: TypeScript compiling
                                  #  - jest-runner-prettier: Prettier

--testRunner RPATH                #Core test running engine
CONF.testRunner RPATH             #Def: 'jasmine2' (jest-jasmine package)

CONF.transform.REGEXP             #MODULE for preprocessing files (e.g. Babel)
CONF.transformIgnorePatterns      #'REGEXP'_ARR (def: ['node_modules'])


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENVIRONMENT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.globals.VAR                  #Set a global variable
                                  #Must be JSON serializable

ENV                               #Sandboxed global environment. Can be:
                                  #  - node (package jest-environment-node)
                                  #     - uses VM core module
                                  #     - ENV_OPTS are additional global variables
                                  #  - jsdom (package jest-environment-jsdom) (def)
                                  #     - uses JSDOM (see its doc)
                                  #     - can use CONF.testURL for OPTS.url
                                  #     - ENV_OPTS:
                                  #        - any JSDOM option
                                  #        - console (def: global.console)
new Env(CONFIG)                   #
ENV.setup|teardown()->PROMISE     #
ENV.runScript(SCRIPT)->VAL        #

--env
CONF.testEnvironment              #ENV
/**
 * @jest-environment ENV
 */                               #Another way to set ENV, on top of test file
CONF.testEnvironmentOptions       #ENV_OPTS

TEST ISOLATED ENVIRONMENT ==>     #Each top-level test file (and the files required by it) runs in a separate ENV.runScript(),
                                  #i.e. an isolated environment:
                                  #  - global variables
                                  #  - before|afterAll|Each(), CONF.setup*
                                  #  - mocking (generic, modules, timers)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--silent                          #
--verbose
CONF.verbose                      #BOOL (def: false)

--useStderr                       #Use stderr instead of stdout

--colors                          #Force colors

--noStackTrace                    #On failure, do not show both stack trace and sample of source code that failed.
-e
--expand                          #Show multiline equality failures in full instead of as diff


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--testLocationInResults           #Add TEST.location.column|line NUM for the reporter to use
CONF.testResultsProcessor         #RPATH to FUNC(OBJ)->OBJ that transforms test results passed to reporters

--json                            #Reports as JSON
                                  #Prints JSON to stdout, rest to stderr
--outputFile FILE                 #Output of --json

--notify
CONF.notify                       #BOOL (def: false). Notifies at end of tests (using NODE-NOTIFIER)
CONF.notifyMode                   #When to send notification among:
                                  #  - 'always' (def)
                                  #  - 'failure|success': when tests failed|passed
                                  #  - '[failure|sucess-]change': when tests went from|to faillure from|to sucess

CONF.reporters                    #Reporters to use, as array of RPATH or [RPATH, REPORTER_OPTS]
                                  #See online doc for writing custom reporters

REPORTERS ==>                     #  - "default"
                                  #  - JSON (see above)
                                  #  - NODE-NOTIFIER (see above)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JEST.timeout(NUM)                 #Test timeout (def: 5000)
                                  #Can also use last argument NUM to it|before|after*()

--[no-]cache                      #Cache several information, including filesystem information
                                  #Def: enabled
--clearCache                      #
CONF.cacheDirectory               #DIR (def: '/tmp/<path>')

--logHeapUsage                    #Show amount of memory used by each test file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]it.concurrent[.only|skip]    #Run concurrently with other it.concurrent() tests inside same test file (I/O parallelism)
 (...)                            #FUNC must return a PROMISE
                                  #Current limitation: beforeAll|Each() will be run afterwards not before
-w NUM                            #Number of top-level test files to run concurrently
--maxWorkers NUM                  #Each top-level test file will be started with CHILD_PROCESS.fork(), i.e. in different CPU
                                  #cores (CPU parallelism)
                                  #Def NUM: number of CPU cores
                                  #The describe|it() inside each top-level test file will be run serially (unless it.concurrent())
-i
--runInBand                       #Same as --maxWorkers 1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MOCK                              #Spies and mocks a function.
                                  #By def, only spies on the function.
JEST.fn([FUNC])->MOCK             #On FUNC (def: anonymous function)
JEST.spyOn(OBJ, 'FUNC'[, STR])    #On OBJ.FUNC
 ->MOCK                           #STR should be 'get|set' if it is getter|setter

MOCK.mockRestore()                #Removes mocking
                                  #Only if MOCK created through JEST.spyOn() not JEST.fn()
MOCK.mockClear()                  #Resets MOCK.mock.calls|instances
MOCK.mockReset()                  #MOCK.mockRestore() + MOCK.mockClear()
JEST.restore|clear|resetAllMocks()#Calls all MOCK.mockRestore|Clear|Reset()
CONF.restore|clear|resetMocks     #BOOL. If true (def: false), calls JEST.restore|clear|resetAllMocks() between each test

MOCK.mockImplementation(FUNC)     #Mocks function
MOCK.mockReturnValue(VAL)         #Mocks function: return VAL
MOCK.mockReturnThis()             #Mocks function: return this
MOCK.mockResolvedValue(VAL)       #Mocks function: return Promise.resolve(VAL)
MOCK.mockRejectedValue(VAL)       #Mocks function: return Promise.reject(VAL)

MOCK.mockImplementationOnce(FUNC)
MOCK.mockReturn|Resolved|         #Same as above but only for next call
 RejectedValueOnce(VAL)           #Can be called several times

MOCK.mock.calls                   #ARGS_ARR_ARR from previous calls
MOCK.mock.instances               #VAL returned by new MOCK(...) from previous calls
                                  #undefined for each call that did not use new

EXPECT_MOCK.toHaveBeenCalled()    #Asserts calls.length > 0
EXPECT_MOCK.
 toHaveBeenCalledTimes(NUM)       #calls.length === NUM
EXPECT_MOCK.
 toHaveBeenCalledWith(VAL,...)    #At least one calls is [VAL,...]
EXPECT_MOCK.
 toHaveBeenLastCalledWith(VAL,...)#Last call was [VAL,...]

JEST.isMockFunction(VAL)->BOOL    #

MOCK.mockName('NAME')             #Sets MOCK 'NAME' (def: 'jest.fn()'). Used only for debugging.
MOCK.getMockName()->'NAME'        #Gets MOCK 'NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RPATH                             #Argument to require(), i.e. can be 'MODULE', 'PATH', etc.

JEST.genMockFromModule(RPATH)     #Like require(RPATH) but calls MOCK.mockImplementation(function () {})
                                  #on every function deep member

JEST.mock                         #Mock future calls to require(RPATH):
 (RPATH[, FUNC()->VAL][, OPTS])   #  - if FUNC()->VAL, return VAL
 ->JEST                           #  - if RPATH_DIR/../[.../]__mocks__/RPATH_FILENAME exists, use it
                                  #     - for node modules or core Node.js modules, should be node_modules/__mocks__/MODULE.js
                                  #  - otherwise JEST.genMockFromModule
                                  #OPTS:
                                  #  - virtual BOOL: if false (def), throw error if RPATH does not exist
JEST.setMock(RPATH, VAL)          #Same as JEST.mock(RPATH, FUNC()->VAL)
JEST.unmock(RPATH)                #Reverse JEST.mock()
JEST.do[nt]Mock(...)              #Same as JEST.[un]mock(...) except prevents babel-jest from hoisting that line of code to top-level scope

CONF.moduleNameMapper.REGEXP      #RPATH2. Replaces require(RPATH) (if it matches REGEXP) by require(RPATH2)

JEST.enable|disableAutomock()     #Automatically calls JEST.mock() on every require(RPATH) except:
                                  #  - core Node.js modules
                                  #  - modules mocked through CONF.moduleNameWrapper
                                  #  - any RPATH matching CONF.unmockedModulePathPatterns 'REGEXP'_ARR (def: [])
CONF.automock                     #Def: false|disabled

require.requireActual|Mock(...)   #Like require(...) but forces using [un]mocked version

JEST.resetModules()               #Resets require() caching
CONF.resetModules                 #BOOL. If true (def: false), calls JEST.resetModules() between every test

CONF.moduleFileExtensions         #'EXT'_ARR that are optional in require() (def: ['js', 'json', 'node', 'jsx'])
CONF.moduleDirectories            #Directories searched on ancestors by require() (def: ['node_modules'])
CONF.modulePaths                  #Additional diretories searched by require() (def: [])
CONF.modulePathIgnorePatterns     #'FILE|DIR'_ARR to not allow in require() (def: [])
CONF.browser                      #BOOL (def: false). Use package.json 'browser' field on require()

CONF.resolver                     #Custom require() handler
                                  #Must be FUNC(RPATH, OBJ)->PATH
                                  #OBJ are CONF-related: basedir STR, rootDir ARR, extensions 'EXT'_ARR,
                                  #moduleDirectory 'DIR'_ARR, paths ARR, browser BOOL


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TIMERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JEST.useFake|RealTimers()         #[Un]mocks clear|setTimeout|Interval|Immediate and process.nextTick()
                                  #Def: disabled
CONF.timers                       #Same but as CONF: 'real' (def) or 'fake'

JEST.clearAllTimers()             #Clears all setTimeout|Interval|Immediate() and process.nextTick()

AUTOMATIC ADVANCE ==>             #At end of any async test, automatically advances setImmediate() and process.nextTick() timers
                                  #until there are no more left
                                  #This is done even if fake timers are disabled

JEST.advanceTimersByTime(NUM)     #Advance timers mocks (except process.nextTick()) by NUMms
JEST.runAllTimers()               #Advance timers mocks until there are no more left
JEST.runAllImmediates()           #Like runAllTimers() for only setImmediate()
JEST.runAllTicks()                #Like runAllTimers() for only process.nextTick()
JEST.runOnlyPendingTimers()       #Like runAllTimers() but if new timers are registered by them, those timers are advanced but not run

