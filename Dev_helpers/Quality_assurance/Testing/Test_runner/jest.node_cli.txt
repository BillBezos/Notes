
        
   JEST  
        



VERSION ==>                       #22.4.2

JASMINE ==>                       #Used to be used as the base but:
                                  #  - only for test files syntax and assertions (and with some differences)
                                  #  - not for CLI, programmatic usage, CONF nor mock helpers (Ajax, timers, spies)

ASSERTIONS ==>                    #See Jest assertions doc

To do???
  - finish documentation
  - go through guides
  - put into different doc files
  - check source code and different Jest packages

EXPECT.extend()???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MOCKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MOCK                              #Spies and mocks a function.
                                  #By def, only spies on the function.
JEST.fn([FUNC])->MOCK             #On FUNC (def: anonymous function)
JEST.spyOn(OBJ, 'FUNC'[, STR])    #On OBJ.FUNC
 ->MOCK                           #STR should be 'get|set' if it is getter|setter

MOCK.mockRestore()                #Removes mocking
                                  #Only if MOCK created through JEST.spyOn() not JEST.fn()
MOCK.mockClear()                  #Resets MOCK.mock.calls|instances
MOCK.mockReset()                  #MOCK.mockRestore() + MOCK.mockClear()
JEST.restore|clear|resetAllMocks()#Calls all MOCK.mockRestore|Clear|Reset()
CONF.restore|clear|resetMocks     #BOOL. If true (def: false), calls JEST.restore|clear|resetAllMocks() between each test

MOCK.mockImplementation(FUNC)     #Mocks function
MOCK.mockReturnValue(VAL)         #Mocks function: return VAL
MOCK.mockReturnThis()             #Mocks function: return this
MOCK.mockResolvedValue(VAL)       #Mocks function: return Promise.resolve(VAL)
MOCK.mockRejectedValue(VAL)       #Mocks function: return Promise.reject(VAL)

MOCK.mockImplementationOnce(FUNC)
MOCK.mockReturn|Resolved|         #Same as above but only for next call
 RejectedValueOnce(VAL)           #Can be called several times

MOCK.mock.calls                   #ARGS_ARR_ARR from previous calls
MOCK.mock.instances               #VAL returned by new MOCK(...) from previous calls
                                  #undefined for each call that did not use new

EXPECT_MOCK.toHaveBeenCalled()    #Asserts calls.length > 0
EXPECT_MOCK.
 toHaveBeenCalledTimes(NUM)       #calls.length === NUM
EXPECT_MOCK.
 toHaveBeenCalledWith(VAL,...)    #At least one calls is [VAL,...]
EXPECT_MOCK.
 toHaveBeenLastCalledWith(VAL,...)#Last call was [VAL,...]

JEST.isMockFunction(VAL)->BOOL    #

MOCK.mockName('NAME')             #Sets MOCK 'NAME' (def: 'jest.fn()'). Used only for debugging.
MOCK.getMockName()->'NAME'        #Gets MOCK 'NAME'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JEST.genMockFromModule('MODULE')  #Like require('MODULE') but calls MOCK.mockImplementation(function () {})
                                  #on every function deep member

JEST.mock                         #Mock future calls to require('MODULE'):
 ('MODULE'[, FUNC()->VAL][, OPTS])#  - if FUNC()->VAL, return VAL
 ->JEST                           #  - if MODULE_DIR/../[.../]__mocks__/MODULE_FILENAME exists, use it
                                  #     - for node modules or core Node.js modules, should be node_modules/__mocks__/MODULE.js
                                  #  - otherwise JEST.genMockFromModule
                                  #OPTS:
                                  #  - virtual BOOL: if false (def), throw error if MODULE does not exist
                                  #Each top-level test file is independent from other top-level tests when it comes to module mocking
JEST.setMock('MODULE', VAL)       #Same as JEST.mock('MODULE', FUNC()->VAL)
JEST.unmock('MODULE')             #Reverse JEST.mock()
JEST.do[nt]Mock(...)              #Same as JEST.[un]mock(...) except prevents babel-jest from hoisting that line of code to top-level scope

CONF.moduleNameMapper.REGEXP      #'MODULE2'. Replaces require('MODULE') (if it matches REGEXP) by require('MODULE2')

JEST.enable|disableAutomock()     #Automatically calls JEST.mock() on every require('MODULE') except:
                                  #  - core Node.js modules
                                  #  - modules mocked through CONF.moduleNameWrapper
                                  #  - any MODULE matching CONF.unmockedModulePathPatterns 'REGEXP'_ARR (def: [])
CONF.automock                     #Def: false|disabled

require.requireActual|Mock(...)   #Like require(...) but forces using [un]mocked version

JEST.resetModules()               #Resets require() caching
CONF.resetModules                 #BOOL. If true (def: false), calls JEST.resetModules() between every test

CONF.moduleFileExtensions         #'EXT'_ARR that are optional in require() (def: ['js', 'json', 'node', 'jsx'])
CONF.moduleDirectories            #Directories searched on ancestors by require() (def: ['node_modules'])
CONF.modulePaths                  #Additional diretories searched by require() (def: [])
CONF.modulePathIgnorePatterns     #'FILE|DIR'_ARR to not allow in require() (def: [])
CONF.browser                      #BOOL (def: false). Use package.json 'browser' field on require()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TIMERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JEST.useFake|RealTimers()         #[Un]mocks clear|setTimeout|Interval|Immediate and process.nextTick()
                                  #Def: disabled
CONF.timers                       #Same but as CONF: 'real' (def) or 'fake'

JEST.clearAllTimers()             #Clears all setTimeout|Interval|Immediate() and process.nextTick()

AUTOMATIC ADVANCE ==>             #At end of any async test, automatically advances setImmediate() and process.nextTick() timers
                                  #until there are no more left
                                  #This is done even if fake timers are disabled

JEST.advanceTimersByTime(NUM)     #Advance timers mocks (except process.nextTick()) by NUMms
JEST.runAllTimers()               #Advance timers mocks until there are no more left
JEST.runAllImmediates()           #Like runAllTimers() for only setImmediate()
JEST.runAllTicks()                #Like runAllTimers() for only process.nextTick()
JEST.runOnlyPendingTimers()       #Like runAllTimers() but if new timers are registered by them, those timers are advanced but not run


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe[.skip|only]         #Test suite.
 (STR[, FUNC()])                  #Can be nested.
                                  #x or not using FUNC() to skip
                                  #f: for only running this suite
[x|f]it|test[.skip|only]          #Test case.
 (STR[, FUNC([FUNC2]])            #Async if:
                                  #  - FUNC2 defined
                                  #  - PROMISE returned
                                  #Fails if:
                                  #  - error thrown
                                  #  - calling FUNC2(ERROR)
                                  #  - calling [FUNC2.]fail(STR|ERROR) (better stack trace)
                                  #  - returned PROMISE is rejected
                                  #x|f: like describe() except can also call pending([STR])
                                  #FUNC can be FUNC* (generator)

before|afterAll|Each(FUNC([FNC2]))#Fire FUNC() before|after once|before_each in current describe()
                                  #(or all if outside)

this                              #Top-level `this` is an empty object
                                  #describe|it() `this` is not shared
                                  #I.e. can either:
                                  #  - use arrow functions and reuse that `this` object
                                  #  - not use `this` but share a top-level object

JEST.timeout(NUM)                 #Test timeout (def: 5000)
                                  #Can also use last argument NUM to it|before|after*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.rootDir                      #Base 'DIR' (def: package.json DIR, or $PWD)
                                  #Can also use '<rootDir>' in other CONF.*
CONF.roots                        #'DIR'_ARR (def: ['<rootDir>']) where source files, test files and __mock__ files are searched
CONF.testMatch                    #'GLOB'_ARR (using micromatch) of test files to include
                                  #Def: any *.spec|test.js[x] or __tests__/**/*.js[x]
CONF.testRegex
--testpathPattern=REGEXP          #Same as 'REGEXP'_ARR
CONF.testPathIgnorePatterns       #'REGEXP'_ARR (def: ['/node_modules/']) of test files to ignore


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



INCLUDED BY DEFAULT ==>           #  - JSDOM
                                  #  - [x]pit(...)

jest                              #
--watch                           #Check interactive mode???
--watchExtensions=EXT,...         #Def: 'js'
--json                            #JSON output

JCONF                             #In:
                                  #  - jest --config=PATH
                                  #  - package.json: PACKAGE.jest

jest --bail
JCONF.bail                        #BOOL. Like CONF.stopSpecOnExpectationFailure
jest --verbose
JCONF.verbose                     #BOOL (def: false)

jest --coverage                   #
JCONF.collectCoverage             #BOOL (def: false): code coverage using Istanbul
JCONF.collectCoverageOnlyFrom     #{ VAR: PATH }: code coverage

JCONF.globals                     #{ VAR: VAL }: global vars reinit for each test.
jest --testEnvData="JSON"         #Passed as JEST.getEnvData()

JCONF.scriptPreprocessor          #MODULE for preprocessing files (e.g. Babel)
                                  #Must be OBJ:
                                  #  - process(STR, 'PATH')->STR
JCONF.preprocessorIgnorePatterns  #'REGEXP'_ARR

JCONF.setupEnvScriptFile          #FILE run before each test
JCONF.setupTestFrameworkScriptFile#Same except run after setupEnvScriptFile

JCONF.cacheDirectory              #DIR (def: 'jest-cli/.hash_cache'): where deps info are cached.
