
        
   JEST  
        



VERSION ==>                       #22.4.2

JASMINE ==>                       #Used to be used as the base but:
                                  #  - only for test files syntax and assertions (and with some differences)
                                  #  - not for CLI, programmatic usage, CONF nor mock helpers (Ajax, timers, spies)

ASSERTIONS ==>                    #See Jest assertions doc

require.requireActual('MODULE')
require.requireMock('MODULE')

EXPECT.toHaveBeen*()

EXPECT.extend()

MOCK                              #Spies and mocks a function.
                                  #By def, only spies on the function.
JEST.fn([FUNC])->MOCK             #On FUNC (def: anonymous function)
JEST.spyOn(OBJ, 'FUNC'[, STR])    #On OBJ.FUNC
 ->MOCK                           #STR should be 'get|set' if it is getter|setter

MOCK.mockRestore()                #Removes mocking
                                  #Only if MOCK created through JEST.spyOn() not JEST.fn()
MOCK.mockClear()                  #Resets MOCK.mock.calls|instances
MOCK.mockReset()                  #MOCK.mockRestore() + MOCK.mockClear()
JEST.restore|clear|resetAllMocks()#Calls all MOCK.mockRestore|Clear|Reset()

MOCK.mockImplementation(FUNC)     #Mocks function
MOCK.mockReturnValue(VAL)         #Mocks function: return VAL
MOCK.mockReturnThis()             #Mocks function: return this
MOCK.mockResolvedValue(VAL)       #Mocks function: return Promise.resolve(VAL)
MOCK.mockRejectedValue(VAL)       #Mocks function: return Promise.reject(VAL)

MOCK.mockImplementationOnce(FUNC)
MOCK.mockReturn|Resolved|         #Same as above but only for next call
 RejectedValueOnce(VAL)           #Can be called several times

MOCK.mock.calls                   #ARGS_ARR_ARR from previous calls
MOCK.mock.instances               #VAL returned by new MOCK(...) from previous calls
                                  #undefined for each call that did not use new

JEST.isMockFunction(VAL)->BOOL    #

MOCK.mockName('NAME')             #Sets MOCK 'NAME' (def: 'jest.fn()'). Used only for debugging.
MOCK.getMockName()->'NAME'        #Gets MOCK 'NAME'



JEST.genMockFromModule('MODULE')  #Like require('MODULE') but calls MOCK.mockImplementation(function () {}) on every function
                                  #deep member
JEST.mock                         #Make future calls to require('MODULE') return VAL instead
 ('MODULE'[, FUNC()->VAL][, OPTS])#Def FUNC: JEST.genMockFromModule
 ->JEST                           #OPTS:
                                  #  - virtual BOOL: if false (def), throw error if MODULE does not exist
                                  #Each top-level test file is independent from other top-level tests when it comes to module mocking
JEST.setMock('MODULE', VAL)       #Same as JEST.mock('MODULE', FUNC()->VAL)
JEST.unmock('MODULE')             #Reverse JEST.mock()
JEST.do[nt]Mock(...)              #Same as JEST.[un]mock(...) except prevents babel-jest from hoisting that line of code to top-level scope

JEST.enable|disableAutomock()     #Automatically calls JEST.mock() on every require('MODULE') except core Node.js modules
CONF.automock                     #Def: false|disabled

JEST.resetModules()               #Resets require() caching

CONF.moduleFileExtensions         #'EXT'_ARR that are optional in require() (def: ['js', 'json', 'node', 'jsx'])
CONF.moduleDirectories            #Directories searched by require() (def: ['node_modules'])


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe[.skip|only]         #Test suite.
 (STR[, FUNC()])                  #Can be nested.
                                  #x or not using FUNC() to skip
                                  #f: for only running this suite
[x|f]it|test[.skip|only]          #Test case.
 (STR[, FUNC([FUNC2]])            #Async if:
                                  #  - FUNC2 defined
                                  #  - PROMISE returned
                                  #Fails if:
                                  #  - error thrown
                                  #  - calling FUNC2(ERROR)
                                  #  - calling [FUNC2.]fail(STR|ERROR) (better stack trace)
                                  #  - returned PROMISE is rejected
                                  #x|f: like describe() except can also call pending([STR])
                                  #FUNC can be FUNC* (generator)

before|afterAll|Each(FUNC([FNC2]))#Fire FUNC() before|after once|before_each in current describe()
                                  #(or all if outside)
this                              #Top-level `this` is an empty object
                                  #describe|it() `this` is not shared
                                  #I.e. can either:
                                  #  - use arrow functions and reuse that `this` object
                                  #  - not use `this` but share a top-level object

JEST.timeout(NUM)                 #Test timeout (def: 5000)
                                  #Can also use last argument NUM to it|before|after*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



INCLUDED BY DEFAULT ==>           #  - JSDOM
                                  #  - [x]pit(...)

jest                              #
--watch                           #
--watchExtensions=EXT,...         #Def: 'js'
--json                            #JSON output


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         CONFIGURATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JCONF                             #In:
                                  #  - jest --config=PATH
                                  #  - package.json: PACKAGE.jest

JCONF.rootDir                     #'DIR' (def: package.json DIR, or $PWD) used for require() and test files paths
                                  #Can also use '<rootDir>' in other JCONF.*
JCONF.testPathDir                 #'DIR' (def: '<rootDir>')
JCONF.testDirectoryName           #'DIR' (def: '__tests__'). Can have many DIR with that name.
JCONF.testFileExtensions          #STR_ARR (def: ['js'])
JCONF.testPathIgnorePatterns      #STR_ARR (def: ['/node_modules/'])
jest --testPathPattern=REGEXP
JCONF.testPathPattern             #REGEXP
JEST.currentTestPath()->'PATH'    #

jest --bail
JCONF.bail                        #BOOL. Like CONF.stopSpecOnExpectationFailure
jest --verbose
JCONF.verbose                     #BOOL (def: false)

jest --coverage                   #
JCONF.collectCoverage             #BOOL (def: false): code coverage using Istanbul
JCONF.collectCoverageOnlyFrom     #{ VAR: PATH }: code coverage

JCONF.globals                     #{ VAR: VAL }: global vars reinit for each test.
jest --testEnvData="JSON"         #Passed as JEST.getEnvData()

JCONF.scriptPreprocessor          #MODULE for preprocessing files (e.g. Babel)
                                  #Must be OBJ:
                                  #  - process(STR, 'PATH')->STR
JCONF.preprocessorIgnorePatterns  #'REGEXP'_ARR

JCONF.setupEnvScriptFile          #FILE run before each test
JCONF.setupTestFrameworkScriptFile#Same except run after setupEnvScriptFile


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         REQUIRE MOCK          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require(MODULE)                   #Will:
                                  #  - if MODULE/../.../__mocks__/MODULE_FILENAME exists, use it instead
                                  #      - MODULE2 must use JEST.genMockFromModule(MODULE) instead of require(MODULE)
                                  #  - otherwise, turn all FUNC into a MOCKFUNC instead.
require.requireActual(MODULE)     #Normal require()
JCONF.moduleFileExtensions        #STR_ARR (def: ['js', 'json', 'node']): possible extension of MODULE from require(MODULE)
JCONF.modulePathIgnorePatterns    #DIR_ARR (def: []): do not look in those DIR for require() lookup
JCONF.moduleNameWrapper           #{ 'REGEXP': MODULE2 }: if require(MODULE) totally matches REGEXP, require(MODULE2) instead
JCONF.cacheDirectory              #DIR (def: 'jest-cli/.hash_cache'): where deps info are cached.

JEST.autoMockOff|On()             #Turns on|off all require() mocking
JEST.mock|dontMock(MODULE)        #Turns on|off specific require() mocking
JCONF.unmockedModulePathPatterns  #Turns off specific require() mocking according to 'REGEXP'_ARR
JEST.setMock(MODULE, OBJ)         #Make require(MODULE) return OBJ
JEST.genMockFn()->MOCKFUNC        #

MOCKFUNC.mockImpl(FUNC)           #Make MOCKFUNC(...) fire FUNC(...)
MOCKFUNC.mockReturnThis()         #Same as MOCKFUNC.mockImpl(function () { return this; })
MCKFUNC.mockReturnValue(VAL)      #Same as MOCKFUNC.mockImpl(function () { return VAL; })
MCKFUNC.mockReturnValueOnce(VAL)  #Same as MOCKFUNC.mockImpl(function () { if (!once) { once=true; return VAL; } })
                                  #"Once" can be done several times

MOCKFUNC.mock.calls               #ARR_ARR of previous calls arguments
MOCKFUNC.mock.instances           #ARR of previous calls return values
MOCKFUNC.mockClear()              #Clears MOCKFUNC.mock.*

expect(MOCKFUNC).toBeCalled()     #
expect(MKFUNC).toBeCalledWith(...)#
expect(MKFUNC).lastCalledWith(...)#


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CLOCK MOCK           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.clock.install()           #Automatically run

JEST.runAllTimers()               #Runs JASMINE.clock().tick(NUM) until all setTimeout|setInterval() done, recursively
JEST.runOnlyPendingTimers()       #Same as runAllTimers() but not recursively
JEST.runAllTicks()                #Same as runAllTimers() but for PROCESS.nextTick()
JEST.clearAllTimers()             #Calls all clearTimeout|clearInterval()
