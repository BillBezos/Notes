
       
   AVA  
       



VERSION ==>                       #1.0.0-beta.4
                                  #Node or CLI

GLOB                              #Uses multimatch, i.e. can use '!...'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AVA('TEST_TITLE', TFUNC(TEST))    #Define a test

ASYNC ==>                         #Either:
                                  #  - TFUNC()->PROMISE|GENERATOR|OBSERVABLE
                                  #  - AVA.[before|after*.]cb(...): end test with TEST.end()

EXCEPTION AND PROMISE REJECTION HANDLING???

AVA('TEST_TITLE',                 #Pass TARGS to TFUNC()
 TFUNC(TEST, TARGS...), TARGS...) #Meant for data-driven testing

TFUNC.title('TEST_TITLE',TARGS...)#Can be overriden to modify 'TEST_TITLE' according to arguments
 ->'TEST_TITLE'                   #Meant to be used together with data-driven testing
                                  #When defined:
                                  #  - 'TEST_TITLE' can be omitted (defaults to '')
                                  #  - TFUNC can be TFUNC_ARR instead (must provide unique titles or not???) (can be done with TFUNC.title()???)

TEST.plan(NUM)                    #

AVA.before|after(...)             #Before|after all, for current test file
                                  #Same signature and async as tests
AVA.before|afterEach(...)         #Before|after each test, for current test file
                                  #Same signature and async as tests
AVA.after[Each].always(...)       #Same but also runs even if there were test failures

TEST CONTEXT ==>                  #Cloned (deeply???) before each test or before|afterEach()

AVA.failing(...)                  #Inverse result of FUNC: passes if fails, and vice-versa
                                  #Meant as temporary until test is fixed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                          #Can be:
                                  #  - package.json "ava" CONF_OBJ
                                  #  - ava --FLAG: only the ones documented below

--init???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ava [FILE|DIR|GLOB...]            #Def: test[-*].js, *.test.js or test|__tests__/**/*.js
CONF.files                        #Always ignore fixtures|helpers|node_modules/** and _*

CONF.require                      #'MODULE'_ARR to require first

--match|m GLOB                    #Only run tests with matching TEST_TITLE
                                  #Can be done several times

AVA.skip(...)                     #Skip that test.
AVA.todo(...)                     #Skip that test. FUNC must not be defined

AVA.only(...)                     #Only run this test
                                  #Only for current file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--fail-fast                       #Stop all tests on first test failure

--watch|w                         #Watch mode (using Chokidar, see its doc)
                                  #Can be re-run by typing r
                                  #Can run --update-snapshots by typing u
CONF.sources                      #'GLOB'_ARR that trigger re-run in watch mode


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.log(...)                     #Like console.log(...)???

REPORTERS ==>                     #Default reporter is minimal (mostly only shows failure)
                                  #To get other reporters, use TAP output with --tap

--verbose|v                       #

--tap|t                           #TAP output
                                  #Cannot be used with --watch
                                  #What's the output???

--[no-]color                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--timeout|T NUM                   #Different than in other test runners???

--no-cache                        #Caches files (which ones???) to tmp directory instead of ./node_modules/.cache/ava/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--concurrency|c NUM               #CPU parallelism: run test files in parallel, in different processes, with maximum NUM processes at once
                                  #Def NUM: number of CPUs

I/O PARALLELISM ==>               #Tests within a specific test file are run in parallel.
AVA.serial[.before|skip|...](...) #Make this test serial instead
--serial|s                        #Make all tests serial instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.failWithoutAssertions        #BOOL (def: true): fail tests with no assertions
                                  #Must be false if built-in assertion library not used

DO ASSERTIONS THROW ERRORS???

TEST.*(..., 'ASSERT_TITLE')       #For any assertion. Def 'ASSERT_TITLE':
                                  #  - ???

TEST.*.skip(...)                  #For any assertion, skip it

TEST.pass()                       #
TEST.fail()                       #

TEST.is|not(VAL, VAL2)            #Object.is()
TEST.[not]deepEqual(VAL, VAL2)    #Deep ==

TEST.truthy|falsy(VAL)            #== true|false
TEST.true|false(VAL)              #=== true|false

TEST.[not]regex(STR, REGEXP)      #REGEXP.test()

TEST.throws(FUNC|PROMISE[, VAL])  #FUNC()|PROMISE throws or rejects an ERROR matching VAL:
 ->PROMISE2                       #  - OBJ:
                                  #     - instanceof TYPE
                                  #     - name STR: ERROR.name
                                  #     - message STR|REGEXP: ERROR.message
                                  #     - is ERROR
                                  #  - TYPE: like OBJ.instanceof
                                  #  - STR|REGEXP: like OBJ.message
                                  #Must await PROMISE2
TEST.notThrows(FUNC|PROMISE)      #FUNC()|PROMISE does not throw nor reject
 ->PROMISE2                       #Must await PROMISE2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SNAPSHOTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.snapshot(VAL[, OPTS])        #Compare against snapshot
                                  #OPTS: id 'NAME' (def: 'TEST_TITLE')
                                  #Details???
--update-snapshots|u              #Write snapshot
CONF.snapshotDir                  #'PATH'. Def:
                                  #  - TEST_FILE/../snapshots/FILE.snap
                                  #  - TEST_FILE/../__snapshots__/... instead if inside __tests__/
                                  #Also creates sibling FILE.md which contains description of snapshot
                                  #  - used to show --update-snapshots's diff on new git commit
                                  #When compiling test files and using source maps, use them (i.e. store snapshots as
                                  #siblings to non-compiled test files)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TO SORT            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BABEL ==>                         #Automatically done (by monkey patching require()):
                                  #  - to test files and helper files (helpers/** and _*) ending with *.js
                                  #  - not to source files
                                  #Uses two Babel presets:
                                  #  - package @ava/babel-preset-stage-4:
                                  #     - all ES stage 4 features, minus ones already supported by current Node.js version
                                  #  - package @ava/babel-transform-test-files:
                                  #     - babel-plugin-espower for power asserts
                                  #     - linter for correct usage of TEST.throws() (i.e. must pass FUNC not FUNC())
CONF.babel                        #Either:
                                  #  - false: disable
                                  #  - OBJ.testOptions:
                                  #     - plugins STR_ARR, presets STR_ARR:
                                  #        - adds
                                  #        - STR can be [STR, false] instead to remove
                                  #     - babelrc BOOL (def: true): re-use current .babelrc[.js] if finds one

Magic assert???
                                  #TEST must be named t
                                  #Also works with ASSERT Node.js core module???
--no-power-assert
CONF.compileEnhancements          #BOOL (def: true)

Clean stack trace???
