
       
   AVA  
       



ALTERNATIVES ==>                  #See Mocha

VERSION ==>                       #1.0.0-beta.4
                                  #Node or CLI

GLOB                              #Uses multimatch, i.e. can use '!...'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


AVA('TEST_TITL',TFUNC(TEST)[_ARR])#Define a test
                                  #Thrown exceptions and rejectes promises make test fail.
                                  #Using several TFUNC is same as defining several tests.
                                  #'TEST_TITLE':
                                  #  - does not need to be unique
                                  #  - def to FUNC.name or '[anonymous]'

ASYNC ==>                         #Either:
                                  #  - TFUNC()->PROMISE|GENERATOR|OBSERVABLE
                                  #  - AVA.[before|after*.]cb(...): end test with TEST.end()

AVA('TEST_TITLE',                 #Pass TARGS to TFUNC()
 TFUNC(TEST, TARGS...), TARGS...) #Meant for data-driven testing

TFUNC.title('TEST_TITLE',TARGS...)#Can be overriden to modify 'TEST_TITLE' according to arguments
 ->'TEST_TITLE'                   #Only works when data-driven testing is used
                                  #When defined, 'TEST_TITLE' defaults to '' instead

TEST.plan(NUM)                    #

AVA.before|after(...)             #Before|after all, for current test file
                                  #Same signature and async as tests
AVA.before|afterEach(...)         #Before|after each test, for current test file
                                  #Same signature and async as tests
AVA.after[Each].always(...)       #Same but also runs even if there were test failures

TEST.context                      #OBJ:
                                  #  - set to {} before any beforeEach()
                                  #  - shared by reference by test and beforeEach|afterEach()
                                  #  - cannot be used in before|after()

AVA.failing(...)                  #Make test pass if it fails (but reported as "known failure" by default reporter)
                                  #Make test fail if it passes.
                                  #Meant as temporary until test is fixed


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                          #Can be:
                                  #  - package.json "ava" CONF_OBJ
                                  #  - ava --FLAG: only the ones documented below, unless possible only through package.json

--init                            #npm install -D ava, then add npm script "npm test: ava"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SELECTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ava [FILE|DIR|GLOB...]            #Def: test[-*].js, *.test.js or test|__tests__/**/*.js
CONF.files                        #Always ignore fixtures|helpers|node_modules/** and _*

CONF.require                      #'MODULE'_ARR to require first

--match|m GLOB                    #Only run tests with matching TEST_TITLE
                                  #Can be done several times

AVA.skip(...)                     #Skip that test.
AVA.todo(...)                     #Skip that test. FUNC must not be defined

AVA.only(...)                     #Only run this test
                                  #Only for current file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--fail-fast                       #Stop all tests on first test failure

--watch|w                         #Watch mode (using Chokidar, see its doc)
                                  #Can be re-run by typing r
                                  #Can run --update-snapshots by typing u
CONF.sources                      #'GLOB'_ARR that trigger re-run in watch mode


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.log(...)                     #Like console.log(...) but indented for that test, and only shown on failure
                                  #In TAP output, is unknown line prepended by '  * '

--verbose|v                       #

--[no-]color                      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORTERS ==>                     #Default reporter is minimal:
                                  #  - mostly only shows failure
                                  #  - also shows source code
                                  #To get other reporters, use TAP output with --tap

--tap|t                           #TAP output (see TAP format doc for details)
                                  #Cannot be used with --watch


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--timeout|T NUM|STR               #As opposed to other test runners, timeout is reset to 0 each time another concurrent test ends
                                  #NUM is in ms, STR ends with 's|ms'
                                  #Def: none

--no-cache                        #Caches files to tmp directory instead of ./node_modules/.cache/ava/


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PARALLELISM          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--concurrency|c NUM               #CPU parallelism: run test files in parallel, in different processes, with maximum NUM processes at once
                                  #Def NUM: number of CPUs

I/O PARALLELISM ==>               #Tests within a specific test file are run in parallel.
AVA.serial[.before|skip|...](...) #Make this test serial instead
--serial|s                        #Make all tests serial instead


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXCEPTIONS ==>                    #Assertions only report: they do not throw (i.e. control flow continues)
                                  #However following exceptions are handled silently, i.e. it's just like if assertions were throwing

CONF.failWithoutAssertions        #BOOL (def: true): fail tests with no assertions

OTHER ASSERTION LIBRARY ==>       #Can use other assertion library (e.g. core Node.js assert)
                                  #However CONF.failWithoutAssertions must be false

--no-power-assert                 #BOOL (def: true).
CONF.compileEnhancements          #Automatically uses POWER-ASSERT (see its doc)
                                  #Only with built-in assertion library
                                  #TEST must be named t

STACK TRACES ==>                  #Stack trace are automatically cleaned

TEST.*(..., 'ASSERT_TITLE')       #For any assertion.
                                  #Def 'ASSERT_TITLE': none
                                  #Is printed to console by default reporter

TEST.*.skip(...)                  #For any assertion, skip it

TEST.pass()                       #
TEST.fail()                       #

TEST.is|not(VAL, VAL2)            #Object.is()
TEST.[not]deepEqual(VAL, VAL2)    #Deep ==

TEST.truthy|falsy(VAL)            #== true|false
TEST.true|false(VAL)              #=== true|false

TEST.[not]regex(STR, REGEXP)      #REGEXP.test()

TEST.throws(FUNC|PROMISE[, VAL])  #FUNC()|PROMISE throws or rejects an ERROR matching VAL:
 ->PROMISE2                       #  - OBJ:
                                  #     - instanceof TYPE
                                  #     - name STR: ERROR.name
                                  #     - message STR|REGEXP: ERROR.message
                                  #     - is ERROR
                                  #  - TYPE: like OBJ.instanceof
                                  #  - STR|REGEXP: like OBJ.message
                                  #Must await PROMISE2
TEST.notThrows(FUNC|PROMISE)      #FUNC()|PROMISE does not throw nor reject
 ->PROMISE2                       #Must await PROMISE2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SNAPSHOTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.snapshot(VAL[, OPTS])        #Compare against snapshot
                                  #OPTS: id 'NAME' (def: 'TEST_TITLE')
                                  #Details???
                                  #Write snapshot first time it is called

--update-snapshots|u              #Write snapshot

CONF.snapshotDir                  #'PATH'. Def:
                                  #  - TEST_FILE/../snapshots/FILE.snap (binary file)
                                  #  - TEST_FILE/../__snapshots__/... instead if inside __tests__/
                                  #Also creates sibling FILE.md which contains description of snapshot
                                  #  - used to show --update-snapshots's diff on new git commit
                                  #When compiling test files and using source maps, use them (i.e. store snapshots as
                                  #siblings to non-compiled test files)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             BABEL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BABEL ==>                         #Automatically done (by monkey patching require()):
                                  #  - to test files and helper files (helpers/** and _*) ending with *.js
                                  #  - not to source files
                                  #Uses two Babel presets:
                                  #  - package @ava/babel-preset-stage-4:
                                  #     - all ES stage 4 features, minus ones already supported by current Node.js version
                                  #  - package @ava/babel-transform-test-files:
                                  #     - babel-plugin-espower for power asserts
                                  #     - linter for correct usage of TEST.throws() (i.e. must pass FUNC not FUNC())
CONF.babel                        #Either:
                                  #  - false: disable
                                  #  - OBJ.testOptions:
                                  #     - plugins STR_ARR, presets STR_ARR:
                                  #        - adds
                                  #        - STR can be [STR, false] instead to remove
                                  #     - babelrc BOOL (def: true): re-use current .babelrc[.js] if finds one
