
            
   NODE_TAP  
            



VERSION ==>                       #12.0.1

tap FILE...                       #
--cov
--coverage-report=FORMAT

TAP                               #Is also a TEST except:
                                  #  - piped to stdout
                                  #  - some extra properties???
                                  #  - process 'exit' event handler???
                                  #  - autoend true if there is tearDown???
new Test(...)

TEST                              #Is an ISTREAM, piped to their parent

TEST.test(['TEST_TITLE', ][OPTS, ][FUNC(TEST2)])->PROMISE_TEST
                                  #Def 'TEST_TITLE': FUNC.name, or '(unnamed test)'
                                  #If no FUNC: like TOPTS.todo true
                                  #Exceptions in FUNC or rejected PROMISE make test fail???
                                  #  - what's the TAP output???
                                  #  - does that mean other assertion libraries can be used???
TEST.end()                        #Automatically done when test's FUNC() return a PROMISE
TEST.plan(NUM)                    #Automatically calls TEST.end() after NUM assertions
                                  #Make test fail if wrong assertions count

TAP's YAML ERROR PROPERTIES ==>   #  - at STR, stack STR: using (new Error).stack

TEST.*(...[, 'ASSERT_TITLE'][, TOPTS])
                                  #Can be passed for all assertion functions
TOPTS.todo                        #BOOL (def: false): pending test
TOPTS.skip                        #BOOL (def: false): skipped test
TOPTS.diagnostic                  #BOOL (def: false): set YAML error properties even if assertion passes

TEST.pass()
TEST.equal(VAL, VAL2)

TEST.match(STR, REGEXP)
