
        
   TAPE  
        



ALTERNATIVES (TAP SERIALIAZING)
 ==>                              #  - tape (prefered)

ALTERNATIVES (TEST RUNNER) ==>    #See Mocha

VERSION ==>                       #4.9.0
                                  #Node, browser and CLI

ASSERTIONS ==>                    #See Tape assertions doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAPE.test(['TEST_TITLE', ]        #Define a test
 [TOPTS, ]FUNC(TEST))             #Def 'TEST_TITLE': '(anonymous)'
                                  #Can specify different default TOPTS with COPTS.*
TEST.end([ERROR])                 #Must be called (otherwise will hang)
TEST.plan(NUM)                    #Automatically calls TEST.end() after NUM assertions
                                  #Assertion failure if plan does not match assertion count

TEST.test(...)                    #Like TAPE.test(...) but for a sub-TEST (i.e. like describe())

TOPTS.skip                        #BOOL (def: false)
TAPE.skip(...)                    #Same arguments as TAPE.test(...)
TEST.skip(['ASSERT_TITLE'])       #

TAPE.only(...)                    #Same as TAPE.test(...) but only run that test

TAPE.onFinish(FUNC())             #afterAll() hook
TAPE.onFailure(FUNC())            #Each time a test fails

TEST.comment(STR)                 #TAP comment


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TAPE.getHarness([HOPTS])->TAPE    #Optional initialization, specifying HOPTS for all TAPE.*() calls
                                  #TAPE return value is same reference (must be done before any TAPE.*() calls)
TAPE.createHarness([COPTS])->TAPE2#Optional initialization, specifying COPTS for all TAPE2.*() calls
                                  #TAPE2 return value is different reference from TAPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           EXECUTION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST RUN ==>                      #Tests are run:
                                  #  - after first test is defined, on next microtask
                                  #  - serially, waiting for each TEST.end()
                                  #     - sub-TESTs must end as well
                                  #  - when all tests are run, closes stream (writing final TAP output)

PROCESS EXIT ==>                  #On process 'exit' event:
                                  #  - make tests still running fail
                                  #  - exit code 1 if one assertion failed, or if STREAM 'error' event
                                  #Not done if either:
                                  #  - HOPTS.exit false
                                  #  - initialized with TAPE.createHarness()

tape FILE...                      #Same as running each require(FILE) (i.e. not very useful)
                                  #FILE can contain globbing (using node-glob, see its doc)
--require|r FILE2                 #Same as first running require(FILE2)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPEED             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOPTS.timeout                     #NUM (def: 500)
TEST.timeoutAfter(NUM)            #Assertion failure after NUMms


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORTERS ==>                     #See TAP reporters doc

TAP OUTPUT ==>                    #See TAP format doc for details

STREAMING ==>                     #TAP output is piped to either:
                                  #  - stdout
                                  #     - def unless initialized with TAPE.createHarness()
                                  #  - HOPTS.stream ISTREAM
                                  #  - TAPE.createStream([SOPTS])->ISTREAM
                                  #     - must be called before any TAPE.*() calls
HOPTS|SOPTS.objectMode            #BOOL (def: false)
                                  #Instead of STR lines, get stream of OBJ:
                                  #  - type 'test', name 'TEST_TITLE', id TEST_ID, parent TEST_ID
                                  #  - type 'assert', name 'ASSERT_TITLE', ok BOOL, id INDEX, operator STR, test TEST_ID, skip BOOL, actual|expected VAL,
                                  #    error ERROR, functionName 'FUNC', file STR, line|column NUM, at STR, objectPrintDepth NUM
                                  #  - 'COMMENT'
                                  #  - type 'end', test TEST_ID (end of each TEST)
                                  #  - null (end of all TESTs)

TAPE.close()                      #Closes stream, adding final TAP output (plan and # tests|pass|fail|ok)
                                  #Done automatically once all tests have run, unless COPTS.autoclose false
                                  #Only available when initialized using TAPE.getHarness|createHarness()
