
           
   TAP-OUT  
           



ALTERNATIVES ==>                  #See tap-parser

VERSION ==>                       #2.0.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new TAP-OUT.Parser()              #EVENTEMITTER
PARSER.handleLine(STR)            #Fills PARSER.results and emit events

TAP-OUT([FUNC(ERROR, RESULTS)])   #IOSTREAM that calls PARSER.handleLine() on each line, and outputs RESULTS
 ->IOSTREAM                       #Events from PARSER are emitted on IOSTREAM

PARSER.results                    #RESULTS
RESULTS.asserts|pass|fail|results|
 tests|versions|plans|comments    #TOKEN_ARR
RESULTS.errors                    #'ERROR'_ARR on plan error
                                  #Only when called through TAP-OUT() (not TAP-OUT.Parser())

tap-out                           #Same as CLI, using stdin|stderr


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TOKENS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TOKEN                             #Any of the types below
TOKEN.type                        #'version|plan|assert|result|test|comment'
TOKEN.raw                         #Line as STR

PARSER.on('version',FUNC(VERSION))#TAP version line. VERSION has no other properties than TOKEN
PARSER.on('plan', FUNC(PLAN))     #PLAN:
                                  #  - from|to NUM
                                  #  - skip 'COMMENT' (if "# skip COMMENT")
PARSER.on('assert', FUNC(ASSERT)) #Single test:
                                  #  - ok BOOL
                                  #  - number INDEX
                                  #  - name 'TITLE'
                                  #  - error OBJ (YAML props):
                                  #     - raw STR (exclude stack when there is one)
                                  #     - VAR: VAL
                                  #     - stack STR
                                  #     - at: file 'PATH', line|character NUM
PARSER.on('pass', FUNC(ASSERT))   #Emitted after 'assert' if ASSERT.ok true
PARSER.on('fail', FUNC(ASSERT))   #Emitted after 'assert' if ASSERT.error defined

PARSER.on('result', FUNC(RESULT)) #Comment # VAR: NUM
                                  #  - name 'VAR'
                                  #  - count NUM
PARSER.on('test', FUNC(TEST))     #Any other # COMMENT:
                                  #  - name 'COMMENT'
                                  #Aimed at being prepended to each test, i.e. it increments a TEST_NUM set to:
                                  #  - TEST.number
                                  #  - PARSER.testNumber
                                  #  - ASSERT.test
                                  #  - COMMENT.test
PARSER.on('comment',FUNC(COMMENT))#Unknown lines (not comment)
