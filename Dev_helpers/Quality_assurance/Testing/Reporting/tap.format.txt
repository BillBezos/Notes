
       
   TAP  
       



ALTERNATIVES ==>                  #  - Jasmine:
                                  #     - own reporters
                                  #     - available: min, normal, spec, HTML, TAP, JUnit, NUnit, AppVeyor, TeamCity
                                  #  - Mocha:
                                  #     - own reporters
                                  #     - available: min, normal, spec, fun, HTML, Markdown, JSON, TAP, XUnit
                                  #  - Jest:
                                  #     - own reporters

VERSION ==>                       #13
                                13#13-only is marked like this
                                 ##Non-standard

MIME TYPE ==>                     #application/tap

UNKNOWN LINES ==>                 #Are allowed but ignored (for future compatibility)

TAP version NUM                   #
                                13#Required

# COMMENT                         #

1..NUM [# DIRECTIVE [COMMENT]]    #"plan": this file should have NUM tests
                                  #Must be at beginning or end

[not] ok [INDEX] [TITLE]          #Single test
 [# DIRECTIVE [COMMENT]]          #INDEX is incrementing from 1 for each test (def: auto-incrementing)
                                  #TITLE should not start with dot
                                  #DIRECTIVE can be:
                                  #  - SKIP: tested but skipped (should be ok)
                                  #  - TODO: not tested yet (should be not ok, however be treated as ok)
  ---                           13#Error properties, as YAML
  message: STR                  13#Error message
  severity: 'warn|error|fail'   13#
  data: OBJ                     13#
  ...                           13#


NESTED TESTS ==>                 ##E.g. when using describe()
                                 ##Have same structure as above, i.e. a plan, etc.
                                 ##There are several syntaxes:
                                 ##  - indented, before their parent test
                                 ##     - sometimes prepended with a # Subtest: TITLE
                                 ##  - indented, after their parent test, enclosed with {}
                                 ##     ok ... {
                                 ##       CHILD
                                 ##     }
                                 ##     ok ...
                                 ##     ---
                                 ##     ...
                                 ##     {
                                 ##       CHILD
                                 ##     }


Bail out! [COMMENT]               #Testing was interrupted

pragma +VAR|-VAR                 ##Parser-specific directive



ALTERNATIVES ==>                  #  - tap-parser (prefered): most high-profile
                                  #  - tap-out: not well maintained

TAP-PARSER ==>                    #7.0.0

new TapParser([OPTS, ][FUNC])     #IOSTREAM (in object mode) that parses TAP format from input
                                  #OPTS:
                                  #  - passes BOOL (def: false): add RESULTS.passes
                                  #  - strict BOOL (def: false):
                                  #     - consider invalid TAP (e.g. unknown line, invalid YAML) as a test failure
                                  #     - can use pragma +strict|-strict to turn on|off
                                  #  - preserveWhitespace BOOL (def: false): emit 'line' events for empty lines outside YAML props
                                  #  - bail BOOL (def: false): stop parsing on 'bailout' event
                                  #  - omitVersion BOOL (def: false): do not emit 'version' event
                                  #FUNC is 'complete' event

TAPPARSER.on                      #All tests. RESULTS:
 ('complete', FUNC(RESULTS))      #  - plan PLAN
                                  #  - count NUM: of tests
                                  #  - pass|fail|todo|skip NUM: of successful|failed|todo|skipped tests
                                  #  - failures|passes TEST_ARR
                                  #  - bailout BOOL
                                  #  - ok BOOL: count === pass (except skipped|todo), no Bail out, no Plan error and no syntax error

TAPPARSER.on('line', FUNC('LINE'))#Single line (of any type)
TAPPARSER.on
 ('comment', FUNC('COMMENT'))     #Single #COMMENT line
TAPPARSER.on('plan', FUNC(PLAN))  #Single plan line. PLAN:
                                  #  - start|end NUM
                                  #  - comment 'COMMENT'
                                  #  - skipAll BOOL
                                  #  - skipReason 'COMMENT'
TAPPARSER.on
 ('version', FUNC(VERSION_NUM))   #
TAPPARSER.on('assert', FUNC(TEST))#Single test line. TEST:
                                  #  - ok BOOL
                                  #  - id INDEX
                                  #  - name 'TITLE'
                                  #  - todo|skip undefined|true|'COMMENT'
                                  #  - diag OBJ (YAML properties)
                                  #  - buffered BOOL (child starting with '{' then newline)
                                  #  - tapError STR (TAP syntax error)
TAPPARSER.on
 ('bailout', FUNC('COMMENT'))     #

TAPPARSER.on
 ('child', FUNC(TAPPARSER2))      #Supports any of the syntaxes

TAPPARSER.on
 ('pragma', FUNC('VAR', BOOL))    #On pragma +VAR|-VAR

TAPPARSER.on('extra', FUNC(STR))  #Unknown line


tap-parser
                                  #Exit code if ???
--input|i FILE                    #Def: stdin
--output|o FILE                   #
--results|r                       #???
