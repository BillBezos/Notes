
            
   FAKER.JS  
            



VERSION ==>                       #4.1.0
                                  #Node/Browser


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKER.*.*()                       #Returns a random STR according to a specific category.

FAKER.seed(NUM)                   #Changes seed (def: current microsec)
FAKER.helpers.randomize(ARR)->VAL #Returns random element
FAKER.helpers.shuffle(ARR)->ARR   #

FAKER.random.number([MAX|OPTS])   #OPTS
 ->NUM                            #  - min NUM (def: 0)
                                  #  - max NUM (def: 99999)
                                  #  - precision NUM (def: 1): removes modulo


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           TEMPLATES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEMPLATE                          #STR which can contain template {{NAME.FUNC[(...)]}} which will be replaced by
                                  #FAKE.NAME.FUNC(...)
FAKE.fake('TEMPLATE')->STR        #
FAKER.helpers.
 mustache(STR, OBJ)->STR          #Underlying method used

FAKER.helpers.                    #Replaces:
 replaceSymbolWithNumber          #  - '#' (or CHAR) by [0-9]
 (STR[, 'CHAR'])->STR             #  - '!' by [2-9]
                                  #Leaves rest as is
FAKER.helpers.replaceSymbols(STR) #Replaces:
 ->STR                            #  - "#" by [0-9]
                                  #  - "?" by [A-Z]
                                  #  - "*" by [0-9A-Z]
                                  #Leaves rest as is


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         LOCALIZATION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKER.locale                      #LANG (def: 'en'). Many are supported
FAKER.localeFallback              #LANG (def: 'en')
FAKER.locales.LANG                #OBJ containing locale data

require('faker/locale/LANG')
 ->FAKER                          #Same as require('faker') but does not require all possible FAKER.locales.LANG


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            HELPERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKER.helpers.slugify(STR)->STR   #Only keep [:alnum:]._- and replace space by -

FAKER.helpers.createCard()
FAKER.helpers.contextualCard()
FAKER.helpers.userCard()
FAKER.helpers.createTransaction() #Create fake OBJ with combinations of other methods


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          GENERATORS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAKER.address.country()           #"France"
FAKER.address.countryCode()       #"FR"
FAKER.address.state([BOOL])       #"Oregon"|"Aquitaine"|...
                                  #If true, uses stateAbbr()
FAKER.address.stateAbbr()         #"MN"
FAKER.address.county()            #"Bedfordshire"
FAKER.address.city                #"Shanellburgh"
 (['TEMPLATE'|NUM])               #NUM can be (def any of them):
                                  #  - 0: '{{address.cityPrefix}} {{name.firstName}} {{address.citySuffix}}'
                                  #  - 1: '{{address.cityPrefix}} {{name.firstName}}'
                                  #  - 2: '{{name.firstName}} {{address.citySuffix}}'
                                  #  - 3: '{{name.lastName}} {{address.citySuffix}}'
FAKER.address.cityPrefix()        #"New|Port|West|..."
FAKER.address.citySuffix()        #"view|side|port|..."
FAKER.address.zipCode([STR])      #"0124"
                                  #Uses FAKER.helpers.replaceSymbols()
FAKER.address.streetAddress       #"5606 Kuhic Summit" (NUM + streetName())
 ([BOOL])                         #If true, adds secondaryAddress()
FAKER.address.streetName()        #"Kunde Union" (firstName|lastName() + streetSuffix())
FAKER.address.streetPrefix()      #"Passage|Rue|..."
FAKER.address.streetSuffix()      #"Way|Green|Wall|de Provence|..."
FAKER.address.secondaryAddress()  #"Apt. NUM"|"Suite NUM"|...
FAKER.address.latitude|longitude
 ([MAX][, MIN])                   #NUM

FAKER.commerce.color()            #"white|red|..."
FAKER.commerce.price              #"NUM2.00"
 ([MIN][, MAX][, NUM][, STR])     #Def MIN|MAX: 0|1000
                                  #NUM is number of decimals (def: 2)
                                  #STR is currency (def: '')
FAKER.commerce.productName()      #"Licensed Granite Shoes" (productAdjective() + product() + productMaterial())
FAKER.commerce.product()          #"Shoes"
FAKER.commerce.productAdjective() #"Refined|Practical|..."
FAKER.commerce.productMaterial()  #"Cotton"
FAKER.commerce.department()       #"Kids|Jewelery|..."

FAKER.company.companyName         #"Willms Inc"
 (['TEMPLATE'|NUM])               #NUM can be (def any of them):
                                  #  - 0: '{{name.lastName}} {{compamy.companySuffix}}'
                                  #  - 1: '{{name.lastName}} - {{name.lastName}}'
                                  #  - 2: '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}'
FAKER.company.companySuffix()     #"Inc"
FAKER.company.catchPhrase()       #"Reverse-engineered asynchronous superstructure"
                                  #(catchPhraseAdjective() + catchPhraseDescriptor() + catchPheaseNoun())
FAKER.company.
 catchPhraseAdjective()           #"Reverse-engineered"
FAKER.company.
 catchPhraseDescriptor()          #"asynchronous"
FAKER.company.catchPhraseNoun()   #"superstructure"
FAKER.company.bs()                #"enterprise orchestrate functionalities"
FAKER.company.
 bsAjective|Buzz|Noun()           #Similar as FAKE.company.catchPhrase*()

FAKER.database.engine()           #"CSV|InnoDB|..."
FAKER.database.type()             #"float|datetime|..."
FAKER.database.column()           #"id|createdAt|email|..."
FAKER.database.collation()        #"utf8_unicode_ci"

FAKER.date.between
 (DATE[_STR], DATE2[_STR])        #DATE3
FAKER.data.past|future            #DATE
 ([NUM][, DATE2[_STR]])           #NUM is number of years behind|ahead (def: 1)
                                  #DATE2 is reference (def: now)
FAKER.data.recent([NUM])          #DATE
                                  #NUM is number of days behind
FAKER.data.month([OPTS])          #'January'
                                  #OPTS: abbr BOOL (def: false): 'Jan'
FAKER.data.weekday([OPTS])        #'Thursday'
                                  #OPTS: abbr BOOL (def: false): 'Thu'

FAKER.finance.account([NUM])      #"13263160"
                                  #NUM is length (def: 8)
FAKER.finance.accountName()       #"Home Loan Account"
FAKER.finance.mask                #"1731"
 ([NUM][, BOOL][, BOOL2])         #NUM is length (def: 4). BOOL true (def: false) is "(1731)". BOOL2 true (def: false) is "...1731"
FAKER.finance.amount(...)         #"207.39". Same as FAKER.commerce.price()
FAKER.finance.transactionType()   #"deposit|invoice|..."
FAKER.finance.currencyCode()      #"USD"
FAKER.finance.currencyName()      #"Gibraltar Pound"
FAKER.finance.currencySymbol()    #"$"
FAKER.finance.bitcoinAddress()    #"1REDI9HX9IJK496TXU1A71JWEEZK"
FAKER.finance.iban()              #"VG5035164080892153032160"
FAKER.finance.bic()               #"ENJOTKY1"

FAKER.hacker.phrase()             #"I'll back up the optical AI pixel, that should driver the SSL transmitter!" (uses the five below)
FAKER.hacker.abbreviation()       #"HTTP|SMTP|..."
FAKER.hacker.adjective()          #"multi-byte|primary|..."
FAKER.hacker.noun()               #"port|system|..."
FAKER.hacker.verb()               #"bypass|connect|..."
FAKER.hacker.ingverb()            #"calculating|backing up|..."

FAKER.image.dataUri               #"data:image/svg+xml;charset=UTF-8,..."
 (WIDTH, HEIGHT)                  #SVG image (as data URI) showing gray rectangle with dimension written in corner.
FAKER.image|internet.avatar()     #"https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg"
FAKER.image.imageUrl              #"http://lorempixel.com/WIDTH/HEIGHT[/CATEGORY]"
 ([WIDTH][, HEIGHT][, 'CATEGORY'] #Def WIDTH|HEIGHT: 640|480
 [, BOOL][, BOOL2])               #If BOOL true, adds random query variable to bust cache
                                  #If BOOL2 true, use "https:"
FAKER.image.image
 ([WIDTH][, HEIGHT][, BOOL])      #Same only within categories below
FAKER.image.abstract(...)
FAKER.image.animals(...)
FAKER.image.business(...)
FAKER.image.cats(...)
FAKER.image.city(...)
FAKER.image.food(...)
FAKER.image.fashion(...)
FAKER.image.nature(...)
FAKER.image.nightlife(...)
FAKER.image.people(...)
FAKER.image.sports(...)
FAKER.image.technics(...)
FAKER.image.transport(...)        #Same within specific category

FAKER.internet.userName
 (['FIRST_NAME'][, 'LAST_NAME'])  #"Abdiel_Hegmann19" (uses FAKER.name.firstName|lastName())
FAKER.internet.email
 (['FIRST_NAME'][, 'LAST_NAME']
 [, 'DOMAIN'])                    #"Aryanna.Koepp16@gmail.com" (uses FAKER.internet.userName())
FAKER.internet.exampleEmail
 (['FIRST_NAME'][, 'LAST_NAME'])  #"Bernice.Lemke87@example.org" (uses FAKER.internet.email())
FAKER.internet.password           #"cTGkHU6610zwRFE"
 ([NUM][, BOOL][, REGEXP][, STR]) #NUM is length (def: 15)
                                  #If BOOL true (def: false): lowercase and alternates between vowels and consonants
                                  #REGEXP only works when BOOL false
                                  #STR is prepended
FAKER.internet.url()              #"https://maybelle.info" (protocol() + domainName())
FAKER.internet.protocol()         #"http|https"
FAKER.internet.domainName()       #"maybelle.info" (domainWord() + domainSuffix())
FAKER.internet.domainWord()       #"maybelle" (uses FAKER.name.firstName())
FAKER.internet.domainSuffix()     #"info"
FAKER.internet.ip()               #"17.220.52.253"
FAKER.internet.ipv6()             #"cb2b:60cb:d4f4:b165:1def:88de:f817:d945"
FAKER.internet.mac()              #"dc:d5:db:0f:a3:3c"
FAKER.internet.userAgent()        #"Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/532.2.2 (KHTML, like Gecko) Chrome/30.0.822.0 Safari/532.2.2"
FAKER.internet.color              #"#3e3c2d"
 ([RED][, GREEN][, BLUE])         #REF|GREEN|BLUE (def: 0) contributes at 50%

FAKER.lorem.text()                #Randomly calls FAKER.lorem.word[s]|sentence[s]|paragraph[s]|lines()
FAKER.lorem.word()                #Random latin word
FAKER.lorem.words([NUM])          #NUM (def: 3) times word(), space-delimited
FAKER.lorem.slug([NUM])           #Same as FAKER.lorem.words() but slugified
FAKER.lorem.sentence([NUM])       #Same but:
                                  #  - NUM default is random 3 to 10
                                  #  - starts with uppercase, ends with period
FAKER.lorem.sentences
 ([NUM][, 'SEPARATOR'])           #NUM (def: random 2 to 6) times sentence(), SEPARATOR-delimited (def: ' ')
FAKER.lorem.paragraph([NUM])      #Same as sentences(NUM + random(1,3))
                                  #Def NUM: 3
FAKER.lorem.paragraphs
 ([NUM][, 'SEPARATOR'])           #NUM (def: 3) times paragraph(), SEPARATOR-delimited (def: newline)
FAKER.lorem.lines([NUM])          #NUM (def: random 1 to 5) times sentences(), newline-delimited

FAKER.name.findName(['FIRST_NAME']#Retuns [sometimes prefix()] + firstName() + lastName() + [sometimes suffix()]
[, 'LAST_NAME'][, GENDER])        #
FAKER.name.firstName([GENDER])    #"Manuela"
                                  #GENDER is 0 male, 1 female
FAKER.name.lastName([GENDER])     #"Nader"
FAKER.name.prefix([GENDER])       #'Dr.|Miss|...'
FAKER.name.suffix()               #'Sr.|II|...'
FAKER.name.title|jobTitle()       #'Senior Solutions Analyst' (jobDescriptor() + jobArea() + jobType())
FAKER.name.jobDescriptor()        #'Senior'
FAKER.name.jobArea()              #'Solutions'
FAKER.name.jobType()              #'Analyst'

FAKER.phone.phoneFormats()        #Phone PATTERN, e.g. '(###) ###-####'
FAKER.phone.phoneNumber([PATTERN])#Same but using FAKER.helpers.replaceSymbolWithNumber()
FAKER.phone.phoneNumberFormat(NUM)#Same but using FORMAT with hard-coded index from builtin list.
