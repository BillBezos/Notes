
            
   ISTANBUL  
            



VERSION ==>                     #0.3.0
                                #JavaScript test coverage generation


CONF ==>                        #Can be:
                                #  - ./.istanbul.json|yml
                                #  - --config FILE.json|yml
CONF.instrumentation.*          #CONFI
CONF.reporting.*                #CONFR.


coverage.json                   #Low-level machine-friendly coverage output

istanbul instrument FILE.js ... #Generates test coverage (coverage.json) by running FILE.js ...
istanbul instrument DIR...      #Same but for DIR/**/.js and generating in --output DIR2

CONFI.root DIR
--root DIR                      #Root DIR of files to cover (def: '.')
CONFI.excludes STR_ARR
-x FILE...                      #Exclude files
CONFI.default-excludes BOOL
--[no-]default-excludes         #Default excluded files to cover (def: '**/node_modules|test[s]/**')

CONFI.save-baseline BOOL
--save-baseline                 #Save to --baseline-file FILE instead of only stdout
CONFI.baseline-file FILE
--baseline-file FILE            #Def: './coverage/coverage-baseline.json'

CONFI.embed-source BOOL
--embed-source                  #Embed JavaScript source code in coverage.json (def: false)
CONFI.complete-copy BOOL
--complete-copy                 #Embed non JavaScript source code in coverage.json (def: false)
CONFI.compact BOOL
--no-compact                    #Don't minimize output


/* istanbul ignore next
 [COMMENT] */                   #Consider next block|structure as covered
/* istanbul ignore WORD
 [COMMENT] */                   #Same with specific structure (if, else, etc.)


FORMAT                          #Reporting, created from coverage.json. Can be:
                                #  - lcov (html+lcov, def)
                                #  - html
                                #  - lcovonly
                                #  - text[-summary] (stdout)
                                #  - cobertura (XML)
                                #  - teamcity
                                #  - clover (XML)

istanbul report [OPTS]
[FORMAT [FILE...]]              #Turn coverage.json FILE... (def: **/coverage*.json) into FORMAT

CONFR.dir DIR
--dir DIR                       #Output DIR (def: './coverage/')
--root DIR                      #Prepended to FILE...

CONFR.reports OBJ
--report FORMAT                 #

CONFR.print STR                 #What to print on terminal among:
--print STR                     #  - summary
                                #  - detail
                                #  - both
                                #  - none
CONF.verbose BOOL
-v                              #



istanbul cover FILE.js ...      #istanbul instrument + instanbul report
                                #Same options
istanbul test FILE.js ...       #Like istanbul cover except only do something if ENVVAR npm_config_coverage is set
                                #(i.e. npm run SCRIPT --coverage)



istanbul check-coverage
--statements|functions|         #Exit code 1 if coverage < PERCENT
branches|lines PERCENT [FILE...]#Do so by looking at coverage.json FILE... (def: '**/coverage*.json')
CONFR.watermarks.statements|
 lines|functions|branches
 [PERCENT, PERCENT2]            #PERCENT is error, PERCENT2 is warning



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CLIENT-SIDE TESTING ==>         #This was for server-side test. For client-side:
                                #  - can use mocha-istanbul
                                #  - or (easier) with karma-coverage:
                                #     - preprocessors { SOURCE_FILE_GEXP: ["coverage"] ... }   //Instrument source code
                                #     - reporter "coverage"                                    //Produce reports
                                #     - CONFIGVAR coverageReporter:
                                #        - OBJ: type FORMAT, dir DIR, file FILE, etc.
                                #          Use DIR/BROWSER_VERSION_OS/FILE
                                #        - or OBJ2: reporters OBJ_ARR for several different formats
                                #  - and karma-threshold-reporter:
                                #     - reporter "threshold" (after reporter "coverage" from karma-coverage)
                                #     - CONFIGVAR thresholdReporter:
                                #        - statements|branches|functions|lines NUM (e.g. 90)

gulp.src(SOURCE_FILES)
  .pipe(GULP-ISTANBUL([OBJ2]))
  .pipe
  (GULP-ISTANBUL.hookRequire()) #Several actions (version 0.6.0):
  .on("finish", function() {    #  - GULP-ISTANBUL() instrument the source files
    gulp.src(TEST_FILES)        #  - summarizeCoverage() produce an IOSTREAM of OBJ with members
      .pipe(GULP-MOCHA())       #    lines|statements|functions|branches OBJ2: total|covered|skipped|pct NUM
      .pipe(GULP-ISTANBUL.      #  - writeReports() produce reports with OBJ:
        summarizeCoverage()|    #     - dir DIR (def: "./coverage/")
        writeReports(OBJ))      #     - reporters ARR (def: ["lcov"])
      .on("end", FUNC())        #OBJ2:
  });                           #  - includeUntested BOOL: if true (def: false), include non-required modules

GULP-COFFEE-ISTANBUL            #Like GULP-ISTANBUL, but for CoffeeScript
                                #Version 0.7.0

GULP-ISTANBUL-ENFORCER(OBJ)     #Do mocha check-coverage. OBJ:
                                #  - thresholds OBJ: statements|branches|lines|functions NUM: --statements|etc.
                                #  - coverageDirectory DIR: --dir
                                #  - rootDirectory DIR: --rot
