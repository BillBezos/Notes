
                
   SNAP-SHOT-IT  
                



== SNAP-SHOT-CORE ==

SNAP-SHOT-CORE(OPTS)
                                  #Compare OPTS.what against snapshot value:
                                  #  - if snapshot not there, create it
                                  #  - otherwise, throw error if different
                                  #OPTS:
                                  #  - what [PROMISE_]VAL: value to compare
                                  #  - file|__filename 'TEST_PATH'
                                  #  - ext '.EXT' (def: '.snapshot.js')
                                  #  - [exact]specName 'NAME'
                                  #     - if 'exact', does not append 'OFFSET'
                                  #  - opts:
                                  #     - update BOOL (def: false): forces updating snapshot
                                  #     - ci BOOL (def: false): throw if snapshot is missing
                                  #  - compare({ value, expected })
                                  #     - def: compare JSON.stringify()'d
                                  #     - must reject with 'ERROR' if different
                                  #     - must return a forktale/result object (see its doc)
SNAP-SHOT-CORE.restore([OPTS])    #Resets OFFSET (from 'NAME OFFSET') to 0
                                  #OPTS: specName 'NAME': for a specific one


STORAGE ==>                       #Is according to environment:
                                  #  - Node: stores on filesystem
                                  #  - Browser:
                                  #     - stores on localStorage
                                  #     - only one snapshot (no 'TEST_PATH' nor 'EXT')
                                  #  - Cypress:
                                  #     - stores on filesystem
                                  #     - only one snapshot (no 'TEST_PATH' nor 'EXT')
                                  #Only Node is feature-complete, i.e. documented here
TEST_DIR/__snapshots__/           #Where snapshot is persisted
 TEST_FILENAME.EXT                #Is module.exports = { 'NAME OFFSET': VAL }
                                  #OFFSET is automatically incremented by SNAP-SHOT-CORE()
                                  #  - is relative to NAME, not to TEST_PATH + NAME
                                  #JSON serialized:
                                  #  - it actually uses jsesc, i.e. should support non-JSON types
                                  #  - but SNAP-SHOT-CORE() forces JSON



FS.readFileSync()
FS.fromCurrentFolder('PATH')->'PATH': relative path from PWD
FS.loadSnapshots('TEST_PATH'[, 'EXT'])->OBJ: require() snapshot file
FS.saveSnapshots('TEST_PATH', { NAME: VAL, ... }[, 'EXT']): persist snapshot file
FS.fileForSpec('TEST_PATH'[, 'EXT'])->'PATH': path to snapshot file
FS.raiseIfDifferent(OPTS):
  - throw error message if VAL !== VAL2
  - OPTS:
     - value VAL, expected VAL2
     - compare({ value, expected })
     - specName 'NAME': used in error message
