
           
   JASMINE  
           



ALTERNATIVES ==>                                #See Mocha

VERSION ==>                                     #2.4.1
                                                #Node.js, CLI or browser

Jasmine                                         #require('jasmine')
JASMINE                                         #GLOBAL.jasmine


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe(STR[, FUNC()])                    #Test suite.
                                                #Can be nested.
                                                #x or not using FUNC() to skip
                                                #f: for only running this suite
[x|f]it(STR[, FUNC([FUNC2]])                    #Test case.
                                                #Async when either:
                                                #  - FUNC2 defined
                                                #  - PROMISE returned
                                                #Fails on either:
                                                #  - error thrown
                                                #  - calling [FUNC2.]fail(STR) (better stack trace)
                                                #  - returned PROMISE is rejected
                                                #x|f: like describe() except can also call pending(STR)

before|afterAll|Each(FUNC([FUNC2]))             #Fire FUNC() before|after once|before_each in current describe()
                                                #(or all if outside)
this                                            #OBJ shared by it|before|after*() inside given describe()
                                                #Shallow copied by each it()
                                                #Avoid arrow functions to keep right `this`

JASMINE.DEFAULT_TIMEOUT_INTERVAL                #Test timeout (def: 5000)
                                                #Can also use last argument NUM to it|before|after*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.toBe(VAL2)                               #=== VAL2
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null
EXPECT.toBeNaN()                                #Object.is(NaN)
EXPECT.toBeTruthy|Falsy()                       #== true|false

EXPECT_NUM.toBeLess|GreaterThan(NUM)            #< > NUM
EXPECT_NUM.toBeCloseTo(NUM, NUM2)               #== Math.round(NUM, NUM2) ???

EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring

EXPECT_ARR.toContain(VAL)                       #Any ARR element.toEqual(VAL)

EXPECT_FUNC.toThrow()
EXPECT_FUNC.toThrowError(ERROR|STR|REGEXP)      #

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
EXPECT.toEqual(JASMINE.anything())              #!== undefined|null
EXPECT.toEqual(JASMINE.any(TYPE))               #instanceof TYPE
EXPECT_STR.toEqual
 (JASMINE.stringMatching(REGEXP|'REGEXP'))      #REGEXP.test(STR)
EXPECT_ARR.toEqual(JASMIN.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.
EXPECT_OBJ.toEqual(JASMN.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())

                                                #JASMINE_ANY_HELPERS:
                                                #  - replace VAL2 to express a FUNC(VAL)->BOOL
                                                #  - can be nested, e.g. { VAR: JASMINE_ANY_HELPERS }
                                                #  - available:
                                                #     - FUNC(VAL)->BOOL if VAL|VAL2.asymmetricMatch FUNC
                                                #  - Can be extended by defining JASMINE.addCustomEqualityTester(FUNC(VAL,VAL2)->BOOL)
                                                #    for non-supported types:
                                                #     - FUNC should return true if VAL is same as VAL2, false otherwise, and not
                                                #       return if VAL or VAL2 are not of the right type
                                                #     - should be done in a beforeEach() or outside a test suite


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CUSTOM ASSERTION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCHER                                         #FUNC(UTIL, TESTERS)->OBJ:
                                                #  - compare(VAL[, ARG...])->OBJ2:
                                                #     - pass BOOL
                                                #     - message STR:
                                                #        - "Expected VAL [not] to be ..."
                                                #        - def. ...: use CUSTOM by adding space between camelcase
                                                #        - must be set even if pass true, but using "not"
                                                #  - negativeCompare(...):
                                                #     - same but used when "not" is used
                                                #     - def: just inverse pass BOOL
JASMINE.addMatchers({ CUSTOM: MATCHER ... })    #Add custom assertion EXPECT.CUSTOM([ARG...]):
                                                #Must be in beforeAll()

SIMPLE_MATCHER(UTIL, VAL[, ARG...])->BOOL       #Shorter version
JASMINE.addMatcher(SIMPLE_MATCHER)              #Function name must be "CUSTOM"
                                                #UTIL.*() do not need to pass TESTERS argument
                                                #Cannot set explicit message STR
                                                #Where is it???

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual()
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE-JQUERY ==>                             ##2.1.1

expect(ELEM).toEqual(ELEM2)                    ##
expect(JQ).toEqual(JQ2)                        ##

expect(JQ).toBeVisible|Hidden()                ##Asserts :visible|hidden
expect(JQ).toBeSelected()                      ##Asserts :selected
expect(JQ).toBeChecked()                       ##Asserts :checked
expect(JQ).toBeDisabled()                      ##Asserts :disabled
expect(JQ).toBeFocused()                       ##
expect(JQ).toBeEmpty()                         ##Asserts :empty

expect(JQ).toHaveClass(STR)                    ##Asserts class exists
expect(JQ).toHaveAttr|Prop|Data([VAL])         ##Asserts it exists and, if VAL, it equals VAL.
expect(JQ).toHaveId(NUM)                       ##Asserts id == NUM
expect(JQ).toHaveValue(VAL)                    ##Asserts JQ.val()
expect(JQ).toHaveCss(OBJ)                      ##Asserts CSS values

expect(JQ).toExist()                           ##Asserts there is at least one element
expect(JQ).toBeInDOM()                         ##Asserts JQ is children of main DOCUMENT
expect(JQ).toHaveLength(NUM)                   ##Same for NUM elements
expect(JQ).toHave|ContainHtml(STR|ELEM|JQ)     ##Asserts JQ.html()
expect(JQ).toHave|ContainText(STR)             ##Asserts JQ.text() after trimming
expect(JQ).toContainElement(STR|ELEM|JQ)       ##Asserts contains specified element
expect(JQ).toBeMatchedBy(SELECTOR)             ##Asserts contains an element matching SELECTOR

expect(JQ).toHandle(EVENT_STR)                 ##Asserts an event handler exists
expect(JQ).toHandleWith(EVENT_STR, FUNC)       ##Same for specific FUNC (comparaison by reference)

spyOnEvent(..., EVENT_STR)                     ##Make it possible to use following methods on $(...)
                                               ##Can be reset with spyEvent.reset()
expect(JQ).toHaveBeenTriggered()               ##
expect(JQ).toHaveBeenTriggeredOn(EVENT_STR)    ##
expect(JQ).toHaveBeenTriggeredOnAndWith
(EVENT_STR, ARGS[_ARR])                        ##Also asserts event handler arguments.
expect(JQ).toHaveBeenPrevented()               ##
expect(JQ).toHaveBeenPreventedOn(EVENT_STR)    ##If event handler used event.preventDefault()
expect(JQ).toHaveBeenStopped()                 ##
expect(JQ).toHaveBeenStoppedOn(EVENT_STR)      ##Same for event.stopPropagation()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                                            #Located at ENVVAR JASMINE_CONFIG_PATH (def: './spec/support/jasmine.json')

jasmine init                                    #Initialize configuration file and spec/

jasmine [FILE...]                               #Run tests
                                                #Def FILEs are:
                                                #  - CONF.spec_files|helpers 'FILE'_ARR
                                                #     - can include globbing, including globstar
                                                #     - helpers are loaded first
                                                #  - CONF.spec_dir: prefix 'DIR' prepended to CONF.spec_files|helpers
                                                #    (def: 'spec/')
--no-color                                      #

--filter="STR"                                  #Only run tests that include STR

--stop-on-failure=BOOL                          #Can also use CONF.stopSpecOnExpectationFailure BOOL (def: false)

--random=BOOL                                   #Random order.
                                                #Can also use CONF.random BOOL (def: true).
--seed=NUM                                      #With --random


BROWSER ==>                                     #See online doc
                                                #Def reporters are HtmlReporter and JsApiReporter


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Jasmine()                                   #JASMINE
JASMINE.loadConfigFile('PATH')
JASMINE.loadConfig(CONF)                        #
JASMINE.execute(['PATH'[_ARR][, 'FILTER']])     #


GULP-JASMINE([OBJ])                            ##Gulp plugin (2.2.1)
                                               ##Uses jasmine 2.1.0 and jasmine-terminal-reporter 1.0.0
                                               ##OBJ:
                                               ##  - verbose BOOL (def: false)
                                               ##  - timeout NUM (def: 5000)
                                               ##  - reporter REPORTER[_ARR]
                                               ##  - config OBJ: from JASMINE.loadConfig()
                                               ##  - includeStackTrace BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORTER ==>                                    #Output of the test runner
                                                #Def is ConsoleReporter
JASMINE.addReporter(new REPORTER([OPTS]))       #
JASMINE.configureDefaultReporter
 ({ VAR: new REPORTER([OPTS]) })                #

REPORTER.JASMINEStarted(OBJ)                    #OBJ: totalSpecsDefined NUM
REPORTER.JASMINEDone()                          #
REPORTER.suiteStarted|Done(OBJ)                 #OBJ:
                                                #  - id STR: opaque id
                                                #  - description STR: from describe(STR)
                                                #  - fullName "[PARENT_DESCRIPTION] DESCRIPTION"
REPORTER.specStarted|Done(OBJ)                  #OBJ:
                                                #  - id STR
                                                #  - description|fullName STR: same as above, but for it(STR)
                                                #    (fullName concatene suite fullName)
                                                #  - status 'pending|passed|failed': only define for specDone
                                                #  - failedExpectations|passedExpectations OBJ_ARR:
                                                #     - actual VAL
                                                #     - expected VAL2 or, if several, ARR_VAL
                                                #     - matcherName STR: e.g. "toEqual"
                                                #     - message STR: e.g. "Expected VAL to equal VAL2"
                                                #     - passed BOOL
                                                #     - stack STR: stack error message
JASMINE.onComplete(FUNC(BOOL))                  #BOOL is true if any failed

JASMINE.ConsoleReporter                         #REPORTER, with OPTS:
                                                #  - print([STR...]): e.g. console.log
                                                #  - timer:
                                                #     - OBJ: start(), elapsed()->NUM (in ms)
                                                #     - should use new JASMINE.Timer
                                                #  - showColors BOOL (def: false)
                                                #  - onComplete FUNC: like JASMIN.onComplete()
JASMINE.JsApiReporter                           #REPORTER, with OPTS:
                                                #  - timer: like ConsoleReporter
                                                #Seems to assign results and execution time to an OBJ, don't know where.
JASMINE.HtmlReporter                            #REPORTER.
                                                #Look at boot.js to customize (e.g. do in a <div> instead of <body>)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FIXTURES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


                                               ##Uses Jasmine-Jquery

[appendL|l]oad[Style|JSON]Fixtures(FILE_STR...)##Appends|replaces content of a container <div id="jasmine-fixtures"> at the
                                               ##end with HTML|CSS|JSON of ./spec/javascript/fixtures
                                               ##(or JASMINE.getFixtures().fixturesPath), so it can be used in $(...):
                                               ##typically top element will have id="ID" so can do $("#ID")
                                               ##Container is cleaned between tests cases, but AJAX requests are kept as cache,
                                               ##so loadFixtures() will be fast the second time.
                                               ##When using jasmine-ajax, need to preloadFixtures(FILE_STR...) before loading
                                               ##jasmine-ajax: put into cache but does not append to DOM.
                                               ##With Chrome, must launch it with --allow-file-access-from-files
readFixtures(FILE_STR...)                      ##Same but return as STR
getJSONFixture(FILE)                           ##For JSON

sandbox(OBJ)                                   ##Returns JQ with <div id="sandbox"></div> with attributes specified in OBJ
                                               ##(can override id)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SPIES/MOCKS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


spyOn(OBJ, FUNC_STR)                            #Starts spying on OBJ.FUNC(). Returns FUNC.
                                                #When FUNC is fired, it will do an action according to:
                                                #  - FUNC.and.stub(): do nothing (def)
                                                #  - FUNC.and.callThrough(): normal call
                                                #  - FUNC.and.returnValue(VAL): normal call, but force returning VAL
                                                #  - FUNC.and.returnValues(VAL...): normal call, but force returning VAL, then VAL2, etc.
                                                #  - FUNC.and.callFake(FUNC2): call FUNC2 instead, with same arguments
                                                #  - FUNC.and.throwError(VAL): throw VAL instead
JASMINE.createSpy(STR)                          #Starts spying on an anonymous empty FUNC called STR. Returns FUNC.
JASMINE.createSpyObj(STR, STR2_ARR)             #Starts spying on several anonymous empty FUNC called STR2 members of an OBJ
                                                #called STR. Returns this OBJ.
FUNC.calls.reset()                              #Removes spying
FUNC.and.identity()                             #Returns FUNC_STR

expect(FUNC).toHaveBeenCalled()                 #Asserts spied FUNC has been fired
expect(FUNC).toHaveBeenCalledWith(VAL...)       #Asserts spied FUNC has been called exactly with arguments VAL...
                                                #Same as toEqual(): OBJ|NaN comparison, JASMINE_ANY_HELPERS
FUNC.calls.any()                                #True if spied FUNC has been fired
FUNC.calls.count()                              #Returns NUM of times FUNC has been fired
FUNC.calls.argsFor(NUM)                         #Returns arguments called for the NUMth time FUNC was fired, as ARR
FUNC.calls.allArgs()                            #Same for all FUNC invocation, as ARR_ARR
FUNC.calls.all()                                #Same but as OBJ_ARR, where OBJ is { object: this, args: ARR, returnValue VAL }
FUNC.calls.mostRecent()                         #Same but only for the last FUNC invocation, as OBJ
FUNC.calls.first()                              #Same but first invocation

JASMINE.clock().[un]install()                   #In before|afterEach(), to mock setTimeout() and setInterval(), which will
                                                #not wait for real time, but for a call to JASMINE.clock().tick(NUM), where
                                                #NUM is in ms.
                                                #This makes them sync., not async., which is easier to test.
JASMINE.clock().mockDate(DATE)                  #Mocks new Date().getTime() along with JASMINE.clock()

JASMIN-AJAX ==>                                 #Mocks XMLHttpRequest:
                                                #  - XHR using send() do not send.
                                                #  - Can retrieve XHR as FAKEXHR
                                                #  - To send XHR, call either (sync., not async.):
                                                #     - Before XHR.send(): JASMINE.Ajax.stubRequest(URL_STR).andReturn(OBJ):
                                                #        - OBJ has members status[Text], contentType, responseText
                                                #     - After XHR.send(): FAKEXHR.respondWith(OBJ):
                                                #        - OBJ: same as above
                                                #        - can change FAKEXHR members.
JASMINE.Ajax.[un]install()                      #In before|afterEach(), sets the mocks
                                                #Can also use JASMINE.Ajax.withMock(FUNC()) in a test case to do
                                                #JASMINE.Ajax.[un]install() automatically.
FAKEXHR                                         #Has same members as XHR but:
                                                #   - can use FAKEXHR.responseTimeout() to fake a timeout after
                                                #     JASMINE.clock().tick(30000)
                                                #   - no responseType|XML, statusText nor upload()
                                                #   - withCredentials is password|username STR
                                                #   - also with method STR, url STR, requestHeaders OBJ, params OBJ and data()
JASMINE.Ajax.requests.first|mostRecent()        #Gets first|last XHR as FAKEXHR
JASMINE.Ajax.requests.at(UINT)                  #Same for XHR numero UINT
JASMINE.Ajax.requests.count(UINT)               #Returns number of requests
JASMINE.Ajax.requests.filter(ARG)               #Returns requests whose URL matches ARG, as FAKEXHR_ARR.
                                                #ARG can be REGEXP, STR (whole URL) or FUNC(FAKEXHR) returning BOOL
JASMINE.Ajax.requests.reset()                   #Cancels all previous requests
