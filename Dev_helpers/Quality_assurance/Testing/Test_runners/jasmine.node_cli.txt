
           
   JASMINE  
           



ALTERNATIVES ==>                                #See Mocha

VERSION ==>                                     #3.1.0
                                                #Node.js, CLI or browser

Jasmine                                         #require('jasmine')
JASMINE                                         #GLOBAL.jasmine


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe(STR[, FUNC()])                    #Test suite.
                                                #Can be nested.
                                                #x or not using FUNC() to skip
                                                #f: for only running this suite
[x|f]it(STR[, FUNC([FUNC2]])                    #Test case.
                                                #Async when either:
                                                #  - FUNC2 defined
                                                #  - PROMISE returned
                                                #Fails on either:
                                                #  - error thrown
                                                #  - calling [FUNC2.]fail(STR|ERROR) (better stack trace)
                                                #  - returned PROMISE is rejected
                                                #x|f: like describe() except can also call pending(STR)

before|afterAll|Each(FUNC([FUNC2]))             #Fire FUNC() before|after once|before_each in current describe()
                                                #(or all if outside)
this                                            #OBJ shared by it|before|after*() inside given describe()
                                                #Shallow copied by each it()
                                                #Avoid arrow functions to keep right `this`

JASMINE.DEFAULT_TIMEOUT_INTERVAL                #Test timeout (def: 5000)
                                                #Can also use last argument NUM to it|before|after*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.toBe(VAL2)                               #=== VAL2
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null
EXPECT.toBeNaN()                                #Object.is(NaN)
EXPECT.toBeTruthy|Falsy()                       #== true|false

EXPECT_NUM.toBeLess|GreaterThan(NUM)            #< > NUM
EXPECT_NUM.toBeCloseTo(NUM, NUM2)               #== Math.round(NUM, NUM2) ???

EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring

EXPECT_ARR.toContain(VAL)                       #Any ARR element.toEqual(VAL)

EXPECT_FUNC.toThrow()
EXPECT_FUNC.toThrowError(ERROR|STR|REGEXP)      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEEP ASSERTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEEP ASSERTIONS ==>                             #Assertions that can either be used:
                                                #  - top-level, e.g. EXPECT.toEqual(JASMINE.any(TYPE))
                                                #  - nested level, e.g. EXPECT.toEqual({ ..., VAR: JASMINE.any(TYPE) })

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
                                                #Can also do the reverse (i.e. assymetricMatch(...) on the expected value) but not both.

EXPECT.toEqual(JASMINE.anything())              #!== undefined|null
EXPECT.toEqual(JASMINE.any(TYPE))               #instanceof TYPE

EXPECT_STR.toEqual
 (JASMINE.stringMatching(REGEXP|'REGEXP'))      #REGEXP.test(STR)

EXPECT_ARR.toEqual(JASMIN.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.

EXPECT_OBJ.toEqual(JASMN.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())

JASMINE.addCustomEqualityTester                 #Add custom deep assertion.
 (FUNC(VAL, VAL2)->BOOL|undefined)              #FUNC() must return undefined if VAL and VAL2 are not comparable
                                                #Must be done in beforeAll()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CUSTOM ASSERTION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCHER                                         #FUNC(UTIL, TESTERS)->OBJ:
                                                #  - compare(VAL[, ARG...])->OBJ2:
                                                #     - pass BOOL
                                                #     - message STR:
                                                #        - "Expected VAL [not] to be ..."
                                                #        - def. ...: use CUSTOM by adding space between camelcase
                                                #        - must be set even if pass true, but using "not"
                                                #  - negativeCompare(...):
                                                #     - same but used when "not" is used
                                                #     - def: just inverse pass BOOL
JASMINE.addMatchers({ CUSTOM: MATCHER ... })    #Add custom assertion EXPECT.CUSTOM([ARG...]):
                                                #Must be in beforeAll()

SIMPLE_MATCHER(UTIL, VAL[, ARG...])->BOOL       #Shorter version
JASMINE.addMatcher(SIMPLE_MATCHER)              #Function name must be "CUSTOM"
                                                #UTIL.*() do not need to pass TESTERS argument
                                                #Cannot set explicit message STR
                                                #Where is it???

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual() (including using deep assertions)
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                                            #Located at ENVVAR JASMINE_CONFIG_PATH (def: './spec/support/jasmine.json')
jasmine init                                    #Adds default CONF file

jasmine [FILE...]                               #Run tests
                                                #Def FILEs are:
                                                #  - CONF.spec_files|helpers 'FILE'_ARR
                                                #     - def: '**/*[sS]pec.js' and 'helpers/**/*.js'
                                                #     - can include globbing, including globstar
                                                #     - helpers are loaded first
                                                #  - CONF.spec_dir: prefix 'DIR' prepended to CONF.spec_files|helpers
                                                #    (def: 'spec/')
--no-color                                      #

--filter="REGEXP"                               #Only run tests that partially match REGEXP

--stop-on-failure=BOOL                          #Can also use CONF.stopSpecOnExpectationFailure BOOL (def: false)

--random=BOOL                                   #Random order.
                                                #Can also use CONF.random BOOL (def: true).
--seed=NUM                                      #With --random


BROWSER ==>                                     #See online doc
                                                #Def reporters are HtmlReporter and JsApiReporter


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Jasmine([OPTS])                             #JASMINE
JASMINE.loadConfigFile('PATH')
JASMINE.loadConfig(CONF)                        #
JASMINE.execute(['PATH'[_ARR][, 'FILTER']])     #???


GULP-JASMINE([OBJ])                            ##Gulp plugin (2.2.1)
                                               ##Uses jasmine 2.1.0 and jasmine-terminal-reporter 1.0.0
                                               ##OBJ:
                                               ##  - verbose BOOL (def: false)
                                               ##  - timeout NUM (def: 5000)
                                               ##  - reporter REPORTER[_ARR]
                                               ##  - config OBJ: from JASMINE.loadConfig()
                                               ##  - includeStackTrace BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORTER ==>                                    #Output of the test runner
                                                #Def is ConsoleReporter
JASMINE.addReporter(new REPORTER([OPTS]))       #
JASMINE.configureDefaultReporter
 ({ VAR: new REPORTER([OPTS]) })                #

REPORTER.JASMINEStarted(OBJ)                    #OBJ: totalSpecsDefined NUM
REPORTER.JASMINEDone()                          #
REPORTER.suiteStarted|Done(OBJ)                 #OBJ:
                                                #  - id STR: opaque id
                                                #  - description STR: from describe(STR)
                                                #  - fullName "[PARENT_DESCRIPTION] DESCRIPTION"
REPORTER.specStarted|Done(OBJ)                  #OBJ:
                                                #  - id STR
                                                #  - description|fullName STR: same as above, but for it(STR)
                                                #    (fullName concatene suite fullName)
                                                #  - status 'pending|passed|failed': only define for specDone
                                                #  - failedExpectations|passedExpectations OBJ_ARR:
                                                #     - actual VAL
                                                #     - expected VAL2 or, if several, ARR_VAL
                                                #     - matcherName STR: e.g. "toEqual"
                                                #     - message STR: e.g. "Expected VAL to equal VAL2"
                                                #     - passed BOOL
                                                #     - stack STR: stack error message
JASMINE.onComplete(FUNC(BOOL))                  #BOOL is true if any failed

JASMINE.ConsoleReporter                         #REPORTER, with OPTS:
                                                #  - print([STR...]): e.g. console.log
                                                #  - timer:
                                                #     - OBJ: start(), elapsed()->NUM (in ms)
                                                #     - should use new JASMINE.Timer
                                                #  - showColors BOOL (def: false)
                                                #  - onComplete FUNC: like JASMIN.onComplete()
JASMINE.JsApiReporter                           #REPORTER, with OPTS:
                                                #  - timer: like ConsoleReporter
                                                #Seems to assign results and execution time to an OBJ, don't know where.
JASMINE.HtmlReporter                            #REPORTER.
                                                #Look at boot.js to customize (e.g. do in a <div> instead of <body>)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPIES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


spyOn(OBJ, 'FUNC')->OBJ.FUNC                    #Starts spying on OBJ.FUNC().
                                                #When OBJ.FUNC is fired, it will do an action according to:
                                                #  - FUNC.and.stub(): do nothing (def)
                                                #  - FUNC.and.callThrough(): call
                                                #  - FUNC.and.returnValue(VAL): call then return VAL
                                                #  - FUNC.and.returnValues(VAL...): call then return VAL, then VAL2, etc.
                                                #  - FUNC.and.callFake(FUNC2): call FUNC2 with same arguments
                                                #  - FUNC.and.throwError(VAL): throw VAL
JASMINE.createSpy('FUNC')->FUNC                 #Starts spying on an anonymous empty 'FUNC'.
JASMINE.createSpyObj('OBJ', 'FUNC'_ARR)->OBJ    #Starts spying on several anonymous empty 'FUNC' members of an OBJ called 'OBJ'.
FUNC.calls.reset()                              #Removes spying

FUNC.and.identity()->'FUNC'                     #

EXPECT_FUNC.toHaveBeenCalled()                  #FUNC has been fired
EXPECT_FUNC.toHaveBeenCalledWith(VAL...)        #FUNC has been called exactly with arguments VAL... (using toEqual())
EXPECT_FUNC.toHaveBeenCalledTimes(NUM)          #FUNC has been called NUM times

FUNC.calls.any()->BOOL                          #True if FUNC has been fired
FUNC.calls.count()->NUM                         #Number of times FUNC has been fired
FUNC.calls.argsFor(NUM)->ARR                    #Arguments called for the NUMth time FUNC was fired
FUNC.calls.allArgs()->ARR_ARR                   #Same for all FUNC invocation
FUNC.calls.all()->OBJ_ARR                       #Same but with { object: this, args: ARR, returnValue VAL }
FUNC.calls.first|mostRecent()->OBJ              #Same but only for the first|last FUNC invocation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TIMERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.clock()->CLOCK                          #Always returns same singleton

CLOCK.install()                                 #Mock setTimeout|Interval() so that they are triggered not with time
                                                #but with CLOCK.tick(NUM) (in ms).
                                                #Must be done in before*()
CLOCK.uninstall()                               #Must be done in after*()

CLOCK.mockDate([DATE])                          #Make new Date() follow CLOCK instead of time
                                                #DATE is time when CLOCK is starting (def: now).


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AJAX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                                     #???
                                                #Mocks XMLHttpRequest
                                                #Uses Jasmine

JASMINE.Ajax                                    #AJAX

AJAX.install()                                  #Sets the mocks
                                                #Must be done in before*()
AJAX.uninstall()                                #Must be done in after*()
AJAX.withMock(FUNC())                           #Calls AJAX.install|uninstall() before|after FUNC

XHR.send(...)->REQ                              #
REQ                                             #Same members as XHR except responseType|XML, statusText, upload(), withCredentials
                                                #Members can be directly set.
REQ.method                                      #STR
REQ.url                                         #STR
REQ.requestHeaders                              #OBJ
REQ.params                                      #OBJ (query variables)
REQ.data()->VAL                                 #VAL (request body)
REQ.password|username                           #STR
REQ.responseTimeout()                           #Fake a timeout after JASMINE.clock().tick(30000)

RESP                                            #OBJ:
                                                #  - status[Text]
                                                #  - contentType
                                                #  - responseText
AJAX.stubRequest('URL').andReturn(RESP)         #Make future calls to 'URL' respond with RESP.
REQ.respondWith(RESP)                           #Make this call respond with RESP

AJAX.requests                                   #REQUESTS
REQUESTS.first|mostRecent()->REQ                #Gets first|last REQ
REQUESTS.at(NUM)->REQ                           #Same for REQ numero NUM
REQUESTS.count()->NUM                           #Number of requests
REQUESTS.filter('URL'|REGEXP|FUNC(REQ)->BOOL)
 ->REQ_ARR                                      #Returns matching requests
REQUESTS.reset()                                #Cancels all previous requests
