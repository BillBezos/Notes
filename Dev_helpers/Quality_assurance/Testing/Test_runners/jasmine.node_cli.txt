
           
   JASMINE  
           



ALTERNATIVES ==>                                #See Mocha

VERSION ==>                                     #3.1.0
                                                #Node.js, CLI or browser

Jasmine                                         #require('jasmine')
JASMINE                                         #GLOBAL.jasmine

JASMINE.getEnv()->ENV???

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


[x|f]describe(STR[, FUNC()])                    #Test suite.
                                                #Can be nested.
                                                #x or not using FUNC() to skip
                                                #f: for only running this suite
[x|f]it(STR[, FUNC([FUNC2]])                    #Test case.
                                                #Async when either:
                                                #  - FUNC2 defined
                                                #  - PROMISE returned
                                                #Fails on either:
                                                #  - error thrown
                                                #  - calling FUNC2(ERROR)
                                                #  - calling [FUNC2.]fail(STR|ERROR) (better stack trace)
                                                #  - returned PROMISE is rejected
                                                #x|f: like describe() except can also call pending([STR])

before|afterAll|Each(FUNC([FUNC2]))             #Fire FUNC() before|after once|before_each in current describe()
                                                #(or all if outside)
this                                            #OBJ shared by it|before|after*() inside given describe()
                                                #Shallow copied by each it()
                                                #Avoid arrow functions to keep right `this`

JASMINE.DEFAULT_TIMEOUT_INTERVAL                #Test timeout (def: 5000)
                                                #Can also use last argument NUM to it|before|after*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.nothing()                                #Noop

EXPECT.toBe(VAL2)                               #=== VAL2
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null

EXPECT_BOOL.toBeTruthy|Falsy()                  #== true|false

EXPECT_NUM.toBeNaN()                            #Object.is(NaN)
EXPECT_NUM.toBePositive|NegativeInfinity()      #=== Infinity|-Infinity
EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)   #< > <= >= NUM
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])             #== Math.round(NUM, NUM2)
                                                #Def NUM2: 2

EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring

EXPECT_ARR.toContain(VAL)                       #Any ARR element.toEqual(VAL)

EXPECT_FUNC.toThrow([VAL])                      #VAL uses toEqual()
EXPECT_FUNC.toThrowError([TYPE], [STR|REGEXP])  #Def TYPE is Error
EXPECT_FUNC.toThrowMatching(FUNC(ERROR)->BOOL)  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEEP ASSERTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEEP ASSERTIONS ==>                             #Assertions that can either be used:
                                                #  - top-level, e.g. EXPECT.toEqual(JASMINE.any(TYPE))
                                                #  - nested level, e.g. EXPECT.toEqual({ ..., VAR: JASMINE.any(TYPE) })

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
                                                #Can also do the reverse (i.e. assymetricMatch(...) on the expected value) but not both.

EXPECT.toEqual(JASMINE.anything())              #!== undefined|null
EXPECT.toEqual(JASMINE.any(TYPE))               #instanceof TYPE

EXPECT_BOOL.toEqual(JASMINE.falsy|truthy())     #== false|true

EXPECT_STR.toEqual
 (JASMINE.stringMatching(REGEXP|'REGEXP'))      #REGEXP.test(STR)
EXPECT_STR.toEqual(JASMINE.[not]empty())        #=== ''

EXPECT_ARR.toEqual(JASMIN.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.
EXPECT_ARR
 .toEqual(JASMINE.arrayWithExactContents(ARR2)) #ARR2 has exact same elements as ARR (using toEqual())
                                                #Order does not matter.

EXPECT_OBJ.toEqual(JASMN.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())
EXPECT_OBJ|ARR.toEqual(JASMINE.[not]empty())    #=== {}|[]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CUSTOM ASSERTION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.addCustomEqualityTester                 #Will be used in toEqual(), providing it does not return undefined.
 (FUNC(VAL, VAL2)->BOOL|undefined)              #Must be done in beforeAll()


MATCHER                                         #FUNC(UTIL, TESTERS)->OBJ:
                                                #  - compare(VAL[, ARG...])->OBJ2:
                                                #     - pass BOOL
                                                #     - message STR:
                                                #        - "Expected VAL [not] to be ..."
                                                #        - def. ...: use CUSTOM by adding space between camelcase
                                                #        - must be set even if pass true, but using "not"
                                                #  - negativeCompare(...):
                                                #     - same but used when "not" is used
                                                #     - def: just inverse pass BOOL
JASMINE.addMatchers({ CUSTOM: MATCHER ... })    #Add custom assertion EXPECT.CUSTOM([ARG...]):
                                                #Must be in beforeAll()

SIMPLE_MATCHER(UTIL, VAL[, ARG...])->BOOL       #Shorter version
JASMINE.addMatcher(SIMPLE_MATCHER)              #Function name must be "CUSTOM"
                                                #UTIL.*() do not need to pass TESTERS argument
                                                #Cannot set explicit message STR
                                                #Where is it???

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual() (including using deep assertions)
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_ELEM.toHaveClass('CLASS')                #Check HTML class


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                                            #Located at:
                                                #  - ENVVAR JASMINE_CONFIG_PATH
                                                #  - jasmine --config=PATH
                                                #  - def: './spec/support/jasmine.json'
jasmine init                                    #Adds default CONF file

jasmine [FILE...]                               #Run tests
                                                #Def FILEs are:
                                                #  - CONF.spec_files|helpers 'FILE'_ARR
                                                #     - def: '**/*[sS]pec.js' and 'helpers/**/*.js'
                                                #     - can include globbing, including globstar
                                                #     - helpers are loaded first
                                                #  - CONF.spec_dir: prefix 'DIR' prepended to CONF.spec_files|helpers
                                                #    (def: 'spec/')
--no-color                                      #

--filter="REGEXP"                               #Only run tests that partially match REGEXP

--stop-on-failure=BOOL                          #Stop it() on EXPECT failure.
                                                #Can also use CONF.stopSpecOnExpectationFailure BOOL (def: false)
--fail-fast=BOOL                                #Stop jasmine on it() failure

--random=BOOL                                   #Random order.
                                                #Can also use CONF.random BOOL (def: true).
--seed=NUM                                      #With --random


BROWSER ==>                                     #See online doc
                                                #Def reporters are HtmlReporter and JsApiReporter


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Jasmine([OPTS])                             #JASMINE
JASMINE.loadConfigFile('PATH')
JASMINE.loadConfig(CONF)                        #
JASMINE.execute(['PATH'[_ARR][, 'FILTER']])     #
JASMINE.onComplete(FUNC(BOOL))                  #BOOL is true if any failed
                                                #Def: process.exit()

GULP-JASMINE([OBJ])                            ##Gulp plugin (2.2.1)
                                               ##Uses jasmine 2.1.0 and jasmine-terminal-reporter 1.0.0
                                               ##OBJ:
                                               ##  - verbose BOOL (def: false)
                                               ##  - timeout NUM (def: 5000)
                                               ##  - reporter REPORTER[_ARR]
                                               ##  - config OBJ: from JASMINE.loadConfig()
                                               ##  - includeStackTrace BOOL (def: false)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REPORTER ==>                                    #Output of the test runner
                                                #Def is ConsoleReporter

jasmine --reporter=REPORTER                     #

JASMINE.addReporter(new REPORTER([OPTS]))       #
JASMINE.configureDefaultReporter(OPTS)          #Set ConsoleReporter OPTS

REPORTER.*(...)                                 #Can all be async by using extra FUNC argument or returning PROMISE
REPORTER.jasmineStarted(OBJ)                    #OBJ:
                                                #  - totalSpecsDefined NUM
                                                #  - order 'random|'
REPORTER.jasmineDone(OBJ)                       #OBJ:
                                                #  - overallStatus 'passed|failed|incomplete'
                                                #  - incompleteReason STR
                                                #  - order 'random|'
                                                #  - failedExpectations|deprecationWarnings OBJ_ARR: see below
REPORTER.suiteStarted|Done(SUITE)               #SUITE:
                                                #  - id STR: opaque id
                                                #  - description STR: from describe(STR)
                                                #  - fullName "[PARENT_DESCRIPTION] DESCRIPTION"
                                                #  - failedExpectations|deprecationWarnings OBJ_ARR: see below
REPORTER.specStarted|Done(TEST)                 #TEST:
                                                #  - id STR
                                                #  - description|fullName STR: same as above, but for it(STR)
                                                #    (fullName concatene suite fullName)
                                                #  - status 'pending|passed|failed': only define for specDone
                                                #  - pendingReason STR
                                                #  - failedExpectations|passedExpectations|deprecationWarnings OBJ_ARR:
                                                #     - actual VAL
                                                #     - expected VAL2 or, if several, ARR_VAL
                                                #     - matcherName STR: e.g. "toEqual"
                                                #     - message STR: e.g. "Expected VAL to equal VAL2"
                                                #     - passed BOOL
                                                #     - stack STR: stack error message

JASMINE.ConsoleReporter                         #REPORTER, with OPTS:
                                                #  - print([STR...]): e.g. console.log
                                                #  - timer:
                                                #     - OBJ: start(), elapsed()->NUM (in ms)
                                                #     - should use new JASMINE.Timer()
                                                #  - showColors BOOL (def: false)
                                                #  - onComplete FUNC: like JASMIN.onComplete()

JASMINE.JsApiReporter                           #REPORTER, with OPTS:
                                                #  - timer: like ConsoleReporter
                                                #Seems to assign results and execution time to an OBJ, don't know where.

JASMINE.HtmlReporter                            #REPORTER.
                                                #Look at boot.js to customize (e.g. do in a <div> instead of <body>)

ENVVAR MAX_PRETTY_PRINT_ARRAY_LENGTH            #Def: 50
ENVVAR MAX_PRETTY_PRINT_CHARS                   #Def: 1000
ENVVAR MAX_PRETTY_PRINT_DEPTH                   #Def: 8


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SPIES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.createSpy('FUNC'[, FUNC])->SPYFUNC      #Starts spying on FUNC (def: anonymous empty function).
JASMINE.createSpyObj('OBJ', 'FUNC'_ARR|OBJ)->OBJ#Starts spying on several anonymous empty 'FUNC' members of an OBJ called 'OBJ'.
spyOn(OBJ, 'FUNC')->SPYFUNC                     #Starts spying on OBJ.FUNC()
spyOnProperty(OBJ, 'PROP'[,'get|set'])->SPYFUNC #Same but for a OBJ.PROP using a property descriptor get|set()

CALLS.reset()                                   #Removes spying

SPYFUNC.withArgs(...)                           #Only spies when calling with arguments ...

SPYFUNC.and.stub()                              #Mocks: do nothing (def)
SPYFUNC.and.callThrough()                       #Mocks: call FUNC
SPYFUNC.and.returnValue(VAL)                    #Mocks: call then return VAL
SPYFUNC.and.returnValues(VAL...)                #Mocks: call then return VAL, then VAL2, etc.
SPYFUNC.and.callFake(FUNC2)                     #Mocks: call FUNC2 with same arguments
SPYFUNC.and.throwError(VAL)                     #Mocks: throw VAL
SPYFUNC.and.CUSTOM(...)                         #Mocks: custom.
                                                #Must do JASMINE.addSpyStrategy('CUSTOM', FUNC(...)->FUNC2)

SPYFUNC.and.identity()->'FUNC'                  #

EXPECT_SPYFUNC.toHaveBeenCalled()               #SPYFUNC has been fired
EXPECT_SPYFUNC.toHaveBeenCalledWith(VAL...)     #SPYFUNC has been called exactly with arguments VAL... (using toEqual())
EXPECT_SPYFUNC.toHaveBeenCalledTimes(NUM)       #SPYFUNC has been called NUM times
EXPECT_SPYFUNC.toHaveBeenCalledBefore(FUNC2)    #SPYFUNC has been fired before FUNC2

SPYFUNC.calls                                   #CALLS
CALLS.any()->BOOL                               #True if SPYFUNC has been fired
CALLS.count()->NUM                              #Number of times SPYFUNC has been fired
CALLS.argsFor(NUM)->ARR                         #Arguments called for the NUMth time SPYFUNC was fired
CALLS.allArgs()->ARR_ARR                        #Same for all SPYFUNC invocation
CALLS.all()->OBJ_ARR                            #Same but with { object: this, args: ARR, returnValue VAL }
CALLS.first|mostRecent()->OBJ                   #Same but only for the first|last SPYFUNC invocation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TIMERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.clock()->CLOCK                          #Always returns same singleton

CLOCK.install()                                 #Mock setTimeout|Interval() so that they are triggered not with time
                                                #but with CLOCK.tick(NUM) (in ms).
                                                #Must be done in before*()
CLOCK.uninstall()                               #Must be done in after*()

CLOCK.mockDate([DATE])                          #Make new Date() follow CLOCK instead of time
                                                #DATE is time when CLOCK is starting (def: now).


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AJAX              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                                     #???
                                                #Mocks XMLHttpRequest
                                                #Uses Jasmine

JASMINE.Ajax                                    #AJAX

AJAX.install()                                  #Sets the mocks
                                                #Must be done in before*()
AJAX.uninstall()                                #Must be done in after*()
AJAX.withMock(FUNC())                           #Calls AJAX.install|uninstall() before|after FUNC

XHR                                             #Same members as XHR except responseType|XML, statusText, upload(), withCredentials
                                                #Members can be directly set.
XHR.method                                      #STR
XHR.url                                         #STR
XHR.requestHeaders                              #OBJ
XHR.params                                      #OBJ (query variables)
XHR.data()->VAL                                 #VAL (request body)
XHR.password|username                           #STR
XHR.responseTimeout()                           #Fake a timeout after JASMINE.clock().tick(30000)

RESP                                            #OBJ:
                                                #  - status NUM
                                                #  - statusText STR
                                                #  - contentType 'MIME'
                                                #  - responseText STR
AJAX.stubRequest('URL').andReturn(RESP)         #Make future calls to 'URL' respond with RESP.
XHR.respondWith(RESP)                           #Make this call respond with RESP

AJAX.requests                                   #REQUESTS
REQUESTS.first|mostRecent()->XHR                #Gets first|last XHR
REQUESTS.at(NUM)->XHR                           #Same for XHR numero NUM
REQUESTS.count()->NUM                           #Number of requests
REQUESTS.filter('URL'|REGEXP|FUNC(XHR)->BOOL)
 ->XHR_ARR                                      #Returns matching requests
REQUESTS.reset()                                #Cancels all previous requests
