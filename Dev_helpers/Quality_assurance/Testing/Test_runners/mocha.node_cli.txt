
         
   MOCHA  
         



ALTERNATIVES ==>                  #Jasmine, QUnit. Prefer Mocha

VERSION ==>                       #2.2.5
                                  #Node.js, browser and CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSERTIONS ==>                    #Can use several ones, but the best is Chai

describe[.only|skip](STR, FUNC()) #FUNC must fire it|before|after[Each]()
                                  #But can do any JavaScript, e.g.:
                                  #  ARR.forEach(VAL => it(STR + VAL, FUNC2))
                                  #Nested describe() will create indentations.
                                  #Using an already defined describe(STR) will get it instead of setting it.
it[.only|skip]                    #For async, can either:
 (STR[, FUNC([FUNC2])])           #  - fire FUNC2([ERROR])
                                  #  - return PROMISE
                                  #If no FUNC or "skip", pending. Can also use this.skip() inside it()
                                  #If "only", doesn’t run other test suits/test cases.

before|after(FUNC([FUNC2]))       #Fire FUNC() once before|after the current describe() or (if none) all describe()
                                  #Child describe()'s before() are fired after their parent, after() before their parent.
before|afterEach(FUNC([FUNC2]))   #Same but fired once for each it() instead

this                              #Is shared by all it|before|after[Each]() in a given describe()
                                  #Child describe() get a shallow copy.

GIVEN[.async](VAL...|ARR).        ##Create multiple test cases with description "STR <VAL|VAL.description>"
it(STR, FUNC([FUNC2, ]VAL...))    ##For async with FUNC2, use "async". For PROMISE, not needed.
                                  ##Module mocha-testdata (1.1.0)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNNERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


mocha [FILE|DIR...]               #Runs test files
                                  #Def: ./test/*.js
                                  #With DIR, should use --recursive
                                  #Options can be in a file at ./test/mocha.opts (as is, one per line)

-G                                #Use a final summary Growl notification
-c|C                              #colors|no-colors
-S                                #Sort test files

-t NUM                            #Test case timeout (def: 2000) (0 for none)
                                  #Can use this.timeout(NUM) to change for a specific it(), describe() or all (if top-level)
--disable-timeouts                #
-s NUM                            #Test case slow threshold (def: 75) (in ms).
                                  #Slow test cases can be highlighted by REPORTER

-g REGEXP                         #Only run test cases which description matching partially REGEXP
                                  #Can be used with pseudo-tags, e.g. "#..." or "@..." to include|exclude
-f STR                            #Same with just string matching
-i                                #Inverse -g or -f

-b                                #Stops at first error
-w                                #Runs then watches ./*.EXT for additional runs
--watch-extensions EXT,...        #Def: "js"

-r MODULE                         #Fires require(MODULE) at beginning
--compilers EXT:MODULE            #Same but only for *.EXT
                                  #E.g. coffee:coffee-script/register

node debug _mocha ...             #Debugging Mocha
mocha -d                          #Starts node debug FILE...

--globals VAR...                  #Allow some global vars
--ui STR                          #"bdd", "tdd", "qunit", "require", "exports": this doc is about "bdd" (describe(), it(), etc.),
                                  #others are not interesting.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


mocha
-R REPORTER                       #
-O VAR=VAL[,...]                  #REPORTER options

REPORTER                          #FUNC(RUNNER, MOCHA)

RUNNER.on("start|end", FUNC())    #
RUNNER
 .on("suite[ end]",FUNC(DESCRIBE))#
RUNNER.on("test[ end]", FUNC(IT)) #
RUNNER.on("pending", FUNC(IT))    #
RUNNER.on("pass", FUNC(IT))       #
RUNNER.on("fail", FUNC(IT, ERROR))#

DESCRIBE                          #
DESCRIBE.title                    #STR
DESCRIBE.root                     #BOOL

IT                                #
IT.title                          #STR
IT.fullTitle()->STR               #
IT.duration                       #NUM
IT.slow()->BOOL                   #

REPORTERS ==>                     #  - "min": only summary
                                  #  - "dot|nyan|landing|progress": short console output, printing dots|Nyan cat|plane|progress bar
                                  #  - "spec" (def): prints test suites/cases names and passed status
                                  #  - "list": same but flatten suites/test cases, and show all execution times
                                  #  - "tap"
                                  #  - "doc|html": HTML code (doc has no formatting, html can only be used client-side)
                                  #  - "json":
                                  #      - stats:
                                  #          - suites NUM
                                  #          - tests|passed|failures NUM
                                  #          - pending NUM
                                  #          - start|end DATE_STR, duration NUM
                                  #       - tests|failures|passes OBJ_ARR:
                                  #           - [full]title STR
                                  #           - duration NUM
                                  #           - err (when error) OBJ:
                                  #              - name STR (e.g. "AssertionError")
                                  #              - message STR, stack STR
                                  #              - actual|expected VAL
                                  #              - showDiff BOOL
                                  #   - "json-stream": OSTREAM emitting events:
                                  #       - "start" FUNC(OBJ) with members total NUM
                                  #       - "pass|fail" FUNC(OBJ) with members [full]title, duration
                                  #       - "end" FUNC(OBJ) with members suites, tests|passed|failures, pending, start|end, duration
                                  #    - "json|html-cov": test coverage
                                  #    - "xunit"
                                  #    - "markdown"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          PROGRAMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Mocha()                       #MOCHA

MOCHA.addFile(FILE)               #
MOCHA.files                       #FILE_ARR
MOCHA.run(FUNC(STR, NUM))->RUNNER #STR is output, NUM number of failed tests

MOCHA.options                     #OBJ, e.g. useColors BOOL. Following methods only change options.
MOCHA.reporter(MODULE_STR)        #
MOCHA.grep(PATTERN)               #
MOCHA.fgrep(STR)                  #
MOCHA.invert()                    #
MOCHA.growl()                     #
MOCHA.globals(VAR_STR_ARR)        #
MOCHA.ignoreLeaks(BOOL)           #
MOCHA.checkLeaks(BOOL)            #
MOCHA.useColors(BOOL)             #
MOCHA.useInlineDiffs(BOOL)        #
MOCHA.timeout(NUM)                #
MOCHA.ui(STR)                     #


GULP-MOCHA(OBJ)                   #Executes Mocha tests (2.1.0)
                                  #OBJ members are MOCHA.VAR(VAL) (ex: reporter: STR, etc.)


mocha-phantomjs FILE|URL          #Command line (Node module)
                                  #Run mocha on HTML file using PhantomJS
                                  #HTML page should replace mocha.run() by:
                                  #  if (window.mochaPhantomJS){mochaPhantomJS.run();}else{mocha.run();}
-R MODULE                         #Reporter.
                                  #Some reporters based on Node.js modules will not work (since it is run in browser),
                                  #e.g. "html-cov"
-C|--no-color                     #
-t NUM                            #Test startup timeout
-A USERAGENT                      #
-c COOKIE_FILE                    #
-h HEADER_VAR=VAL                 #
-s WEBPAGE.SETTINGSVAR=VAL        #
-v WIDTHxHEIGHT                   #

GULP-MOCHA-PHANTOMJS(OBJ)         #OBJ:
                                  #  - reporter STR
                                  #  - mocha OBJ
                                  #  - dump FILE (redirected output)
                                  #Client-side page must do (instead of mocha.run()):
                                  #  if ( window.mochaPhantomJS ) { mochaPhantomJS.run() } else { mocha.run() }
                                  #Version 0.6.1
