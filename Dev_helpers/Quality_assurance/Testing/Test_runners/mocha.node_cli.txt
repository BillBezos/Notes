
         
   MOCHA  
         



ALTERNATIVES ==>                  #Jasmine, QUnit. Prefer Mocha

VERSION ==>                       #5.0.4
                                  #Node.js, browser and CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSERTIONS ==>                    #Can use several ones, but the best is Chai

describe[.only|skip](STR, FUNC()) #FUNC must fire it|before|after[Each]()
                                  #But can do any JavaScript, e.g. data-driven testing:
                                  #  ARR.forEach(VAL => it(STR + VAL, FUNC2))
                                  #Nested describe() will create indentations.
                                  #Using an already defined describe(STR) will get it instead of setting it.

it[.only](STR, FUNC([FUNC2]))     #Will be async if:
                                  #  - FUNC2 is defined (or mocha -A|--async-only is used),
                                  #    in which case must fire FUNC2([ERROR])
                                  #  - return PROMISE
                                  #If "only", doesn’t run other test suits/test cases.
                                  #To make test fail, throw an ERROR

it.skip(...)                      #Marks tests as pending|skipped.
                                  #Can also:
                                  #  - pass no FUNC to it(...)
                                  #  - use this.skip() inside it|before[Each]()

before|after([STR, ]FUNC([FUNC2]))#Fire FUNC() once before|after the current describe() or (if none) all describe()
                                  #Child describe()'s before() are fired after their parent, after() before their parent.
                                  #STR is description. Only shown when FUNC() fails.
before|afterEach
 ([STR, ]FUNC([FUNC2]))           #Same but fired once for each it() instead

this                              #Is shared by all it|before|after[Each]() in a given describe()
                                  #Child describe() get a shallow copy.
                                  #Because of this, arrow functions should not be used
this.*                            #Contains some information about current it|before|after[Each](),
                                  #e.g. title, body, timeout, async, skip, parent|children

run()                             #Starts all run tests.
                                  #Only available when mocha --delay was used.
                                  #Useful when setting up describe() is async


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNNING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


mocha [FILE|DIR...]               #Runs test files
                                  #Def: ./test/*.js
--recursive                       #Looks recursively into DIR
                                  #Def will be ./test
--opts=FILE                       #Options file (one CLI flag per line)
                                  #Def: ./test/mocha.opts

--check-leaks                     #Errors if global variables are created
--globals VAR,...                 #Allow some global vars

-t NUM                            #Test case timeout (def: 2000) (0 for none)
--timeout NUM                     #Can also use this.timeout(NUM) inside it|before[Each]|describe()
--no-timeouts                     #Same as -t 0

-s NUM                            #Test case slow threshold (def: 75) (in ms).
--slow NUM                        #Slow test cases can be highlighted by REPORTER

--retries NUM                     #Silently retry tests if failed.
                                  #Only report last failure of a test if all retries failed
                                  #Can also use this.retries(NUM) inside it()

-g REGEXP                         #Only run test cases which description matching partially REGEXP
--grep REGEXP                     #Can be used with pseudo-tags, e.g. "#..." or "@..." to include|exclude
-f STR
--fgrep STR                       #Same with just string matching
-i
--invert                          #Inverse -g or -f

--forbid-only|pending             #Disallow it.only|skip()

-G                                #Use a final summary Growl notification
--growl                           #growl must first be installed

-c|C
--[no-]colors                     #

--full-trace                      #Show stack trace

ERROR.expected|actual             #If defined, many reporters will show a diff
--no-diff                         #Do not show diff
--inline-diffs                    #Show diffs in a more compact way

-S
--sort                            #Sort test files

-b
--bail                            #Stops at first error
--exit                            #Calls process.exit() after all tests have run, even if some Node.js tasks are still hanging.
--allow-uncaught                  #Allow uncaught exceptions to stop the process.
-w
--watch                           #Runs then watches ./*.EXT for additional runs
--watch-extensions EXT,...        #Def: "js"

-r MODULE
--require MODULE                  #Fires require(MODULE) at beginning
--file FILE                       #Require a FILE

-d
--debug[-brk]
--inspect[-brk]
-gc
--expose-gc
--preserve-symlinks
--icu-data-dir
--log-timer-events
--[perf-basic-]prof
--napi-modules
--no|throw|trace-
 deprecation|warnings
--use_strict
--es_staging
--harmony                         #Pass those options to node ...

-u STR                            #How functions are named:
--ui STR                          #  - "bdd" (def): describe|context(), it|specify(), before|after[Each]()
                                  #  - "require": same as "bdd" but must const { describe, ... } = require('mocha')
                                  #  - "tdd": suite(), test(), [suite]setup|teardown()
                                  #  - "exports": module.exports = { before|after[Each](...), STR: { ...: FUNC(...) } }
                                  #  - "qunit": suite(), test(), before|afterEach(), but without nesting
                                  #Custom ones can be created (see online doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REPORTERS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


mocha
-R REPORTER
--reporter REPORTER               #Can also use ENVVAR REPORTER
-O VAR=VAL[,...]
--reporter.options VAR=VAL[,...]  #

REPORTER                          #FUNC(RUNNER, MOCHA)

RUNNER.on("start|end", FUNC())    #
RUNNER
 .on("suite[ end]",FUNC(DESCRIBE))#
RUNNER.on("test[ end]", FUNC(IT)) #
RUNNER.on("hook[ end]", FUNC(IT)) #
RUNNER.on("pending", FUNC(IT))    #
RUNNER.on("pass", FUNC(IT))       #
RUNNER.on("fail", FUNC(IT, ERROR))#

DESCRIBE                          #
DESCRIBE.title                    #STR
DESCRIBE.root                     #BOOL

IT                                #
IT.title                          #STR
IT.fullTitle()->STR               #
IT.duration                       #NUM
IT.slow()->BOOL                   #

REPORTERS ==>                     #  - "min": only summary
                                  #  - "dot|nyan|landing|progress": short console output, printing dots|Nyan cat|plane|progress bar
                                  #  - "spec" (def): prints test suites/cases names and passed status
                                  #  - "list": same but flatten suites/test cases, and show all execution times
                                  #  - "tap"
                                  #  - "doc|html": HTML code (doc has no formatting, html can only be used client-side)
                                  #  - "json":
                                  #      - stats:
                                  #          - suites NUM
                                  #          - tests|passed|failures NUM
                                  #          - pending NUM
                                  #          - start|end 'DATE'
                                  #          - duration NUM
                                  #       - tests|failures|passes OBJ_ARR:
                                  #           - [full]title STR
                                  #           - duration NUM
                                  #           - currentRetry NUM
                                  #           - err (when error) OBJ:
                                  #              - name STR (e.g. "AssertionError")
                                  #              - message STR
                                  #              - stack STR
                                  #              - actual|expected VAL
                                  #              - showDiff BOOL
                                  #  - "json-stream": OSTREAM emitting events:
                                  #      - "start" FUNC(OBJ) with members total NUM
                                  #      - "pass|fail" FUNC(OBJ) with members [full]title, duration
                                  #      - "end" FUNC(OBJ) with members suites, tests|passed|failures, pending, start|end, duration
                                  #  - "xunit"
                                  #  - "markdown"

BROWSER ==>                       #See online doc for how to use Mocha in a browser
                                  #Can use mochawesome as a nice HTML reporter.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Mocha([OPTS])                 #MOCHA
                                  #Most OPTS are available and are camelCase

MOCHA.addFile(FILE)->MOCHA        #FILE will be require'd(), i.e. cached
MOCHA.files                       #FILE_ARR
MOCHA.run(FUNC(NUM))->RUNNER      #NUM is number of failed tests

MOCHA.options                     #OPTS.
MOCHA.OPT(VAL)->MOCHA             #Sets MOCHA.options.OPT = VAL


GULP-MOCHA([OPTS])                #Executes Mocha tests (5.0.0)


mocha-phantomjs FILE|URL          #Command line (Node module)
                                  #Run mocha on HTML file using PhantomJS
                                  #HTML page should replace mocha.run() by:
                                  #  if (window.mochaPhantomJS){mochaPhantomJS.run();}else{mocha.run();}
-R MODULE                         #Reporter.
                                  #Some reporters based on Node.js modules will not work (since it is run in browser),
                                  #e.g. "html-cov"
-C|--no-color                     #
-t NUM                            #Test startup timeout
-A USERAGENT                      #
-c COOKIE_FILE                    #
-h HEADER_VAR=VAL                 #
-s WEBPAGE.SETTINGSVAR=VAL        #
-v WIDTHxHEIGHT                   #

GULP-MOCHA-PHANTOMJS(OBJ)         #OBJ:
                                  #  - reporter STR
                                  #  - mocha OBJ
                                  #  - dump FILE (redirected output)
                                  #Client-side page must do (instead of mocha.run()):
                                  #  if ( window.mochaPhantomJS ) { mochaPhantomJS.run() } else { mocha.run() }
                                  #Version 0.6.1
