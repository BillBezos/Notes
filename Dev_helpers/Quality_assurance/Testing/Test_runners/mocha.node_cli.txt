
         
   MOCHA  
         



ALTERNATIVES ==>                  #Jasmine, QUnit. Prefer Mocha

VERSION ==>                       #2.2.5
                                  #Node.js, browser and CLI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TESTS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ASSERTIONS ==>                    #Can use several ones, but the best is Chai

describe[.only|skip](STR, FUNC()) #FUNC must fire it|before|after[Each]()
                                  #But can do any JavaScript, e.g.:
                                  #  ARR.forEach(VAL => it(STR + VAL, FUNC2))
                                  #Nested describe() will create indentations.
                                  #Using an already defined describe(STR) will get it instead of setting it.
it[.only|skip]                    #Inside describe()
 (STR[, FUNC([FUNC2])])           #For async, can either:
                                  #  - fire FUNC2([ERROR])
                                  #  - return PROMISE
                                  #If no FUNC or "skip", pending.
                                  #If "only", doesn’t run other test suits/test cases
this.skip()                       #Skips current test unit (inside an it())
before|after[Each](FUNC([FUNC2])) #before|after are fired only once on the current describe() or, if outside, all describe()
                                  #before|afterEach are fired once for each it() on the current describe() or, if outside, all
                                  #describe()
                                  #Child describe()'s before[Each] are fired after their parent, after[Each] before their parent.

GIVEN[.async](VAL...|ARR).        ##GIVEN = require("mocha-testdata")
it(STR,FUNC([FUNC2(),]VAL...))    ##Data-driven tests
                                  ##Create multipe test cases with description "STR <VAL>" (if VAL is OBJ with OBJ.description
                                  ##STR2, use <STR2> instead)
                                  ##Can use require() for ARR to put data in a separate file.
                                  ##FUNC2() is only if "async". If FUNC() returns PROMISE, do not use "aync"
                                  ##Version 1.1.0

this                              #Is shared by all it|before|after[Each]() in a given describe()
                                  #Child describe() get a shallow copy.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            RUNNERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



mocha [FILE|DIR...]               #Runs test files server-side (Node.js)
                                  #Def: ./test/*.js. With DIR, use --recursive
                                  #Options can be in a file at ./test/mocha.opts (as is, one per line)

-R MODULE                         #Changes reporters, i.e. how results are being output.
-O VAR=VAL[,...]                  #VAR=VAL are options.
                                  #MODULE is a FUNC(RUNNER_OBJ, MOCHA), where RUNNER_OBJ:
                                  #  - RUNNER_OBJ.on("start", FUNC())
                                  #  - RUNNER_OBJ.on("suite[ end]", FUNC(SUITE_OBJ)), where SUITE_OBJ has members root BOOL,
                                  #    title STR
                                  #  - RUNNER_OBJ.on("test[ end]", FUNC(TEST_OBJ))
                                  #  - RUNNER_OBJ.on("pending", FUNC(TEST_OBJ))
                                  #  - RUNNER_OBJ.on("pass", FUNC(TEST_OBJ)), where TEST_OBJ has members title|fullTitle(), slow(),
                                  #    duration NUM, title STR
                                  #  - RUNNER_OBJ.on("fail", FUNC(TEST_OBJ, ERROR))
                                  #  - RUNNER_OBJ.on("end", FUNC())
                                  #Extra reporters must be installed along mocha, which means in same node_modules (including if
                                  #it has been installed globally)
                                  #Built-in MODULE:
                                  #  - "min": only summary
                                  #  - "dot|nyan|landing|progress": short console output, printing dots|Nyan cat|plane|progress bar
                                  #  - "spec" (def): prints test suites/cases names and passed status
                                  #  - "list": same but flatten suites/test cases, and show all execution times
                                  #  - "tap"
                                  #  - "doc|html": HTML code (doc has no formatting, html can only be used client-side)
                                  #  - "json": OBJ_STR:
                                  #      - stats:
                                  #          - suites NUM
                                  #          - tests|passed|failures NUM
                                  #          - pending NUM
                                  #          - start|end DATE_STR, duration NUM
                                  #       - tests|failures|passes OBJ_ARR:
                                  #           - [fullT|t]itle STR
                                  #           - duration NUM
                                  #           - err (when error) OBJ:
                                  #              - name STR (e.g. "AssertionError")
                                  #              - message STR, stack STR
                                  #              - actual|expected VAL
                                  #              - showDiff BOOL
                                  #   - "json-stream": OSTREAM emitting events:
                                  #       - start FUNC(OBJ) with members total NUM
                                  #       - pass|fail FUNC(OBJ) with members [fullT|t]title, duration
                                  #       - end FUNC(OBJ) with members suites, tests|passed|failures, pending, start|end, duration
                                  #    - "json|html-cov": test coverage
                                  #    - "xunit"
                                  #    - "markdown"
-G                                #Use a final summary Growl notification
-c|C                              #colors|no-colors
-S                                #Sort test files

-t NUM                            #Test case timeout (def: 2000) (0 for none)
                                  #Can also change for a specific test case with this.timeout(NUM); or all test cases of a test
                                  #suite (put in describe() this.timeout(NUM), outside of any before())
                                  #Can also --disable-timeouts
-s NUM                            #Test case slow threshold (def: 75). Slow test cases can be highlighted by REPORTER

-g REGEXP                         #Only run test cases which description matching partially REGEXP
                                  #Can be used with pseudo-tags, e.g. "#..." or "@..." to include|exclude e.g. tests tagged with
                                  #"selenium"
-f STR                            #Same with just string matching
-i                                #Inverse -g or -f

-w                                #Runs then watches ./*.EXT (according to --watch-extensions STR,... def "js") for additional runs
-b                                #Stops at first error
-r MODULE                         #Like doing require(MODULE) in beginning of FILE (but not var VAR = require(MODULE), so
                                  #requiring must execute an action
-d                                #Starts node debug FILE...
--compilers EXT:MODULE            #Execute a MODULE first for *.EXT, e.g. coffee:coffee-script/register

--globals VAR...                  #Allow some global vars
--ui STR                          #"bdd", "tdd", "qunit", "require", "exports": this doc is about "bdd" (describe(), it(), etc.),
                                  #others are not interesting.

node debug _mocha ...             #Debugging Mocha


new require("mocha")              #As Node module. Returns MOCHA
MOCHA.addFile(FILE)               #
MOCHA.files                       #
MOCHA.run(FUNC(STR, NUM))         #STR is output, NUM number of failed tests
                                  #Returns a RUNNER_OBJ
MOCHA.options                     #OBJ, e.g. useColors BOOL. Following methods only change options.
MOCHA.reporter(MODULE_STR)        #
MOCHA.grep(PATTERN)               #
MOCHA.fgrep(STR)                  #
MOCHA.invert()                    #
MOCHA.growl()                     #
MOCHA.globals(VAR_STR_ARR)        #
MOCHA.ignoreLeaks(BOOL)           #
MOCHA.checkLeaks(BOOL)            #
MOCHA.useColors(BOOL)             #
MOCHA.useInlineDiffs(BOOL)        #
MOCHA.timeout(NUM)                #
MOCHA.ui(STR)                     #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          AUTOMATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-MOCHA(OBJ)                   #Executes Mocha tests (2.1.0)
                                  #OBJ members are MOCHA.VAR(VAL) (ex: reporter: STR, etc.)

mocha-phantomjs FILE|URL          #Command line (Node module)
                                  #Run mocha on HTML file using PhantomJS
                                  #HTML page should replace mocha.run() by:
                                  #  if (window.mochaPhantomJS){mochaPhantomJS.run();}else{mocha.run();}
-R MODULE                         #Reporter.
                                  #Some reporters based on Node.js modules will not work (since it is run in browser),
                                  #e.g. "html-cov"
-C|--no-color                     #
-t NUM                            #Test startup timeout
-A USERAGENT                      #
-c COOKIE_FILE                    #
-h HEADER_VAR=VAL                 #
-s WEBPAGE.SETTINGSVAR=VAL        #
-v WIDTHxHEIGHT                   #

GULP-MOCHA-PHANTOMJS(OBJ)         #OBJ:
                                  #  - reporter STR
                                  #  - mocha OBJ
                                  #  - dump FILE (redirected output)
                                  #Client-side page must do (instead of mocha.run()):
                                  #  if ( window.mochaPhantomJS ) { mochaPhantomJS.run() } else { mocha.run() }
                                  #Version 0.6.1
