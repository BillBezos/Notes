
         
   DREDD  
         



VERSION ==>                       #5.1.5
                                  #Supports API Blueprint, OpenAPI 2.0

INSTALLATION ==>                  #Unless npm install --no-optional is used, drafter (C++ library) will be used, i.e. will compile
                                  #The library is used for parsing API Blueprint, i.e. not needed if only used with OpenAPI.

CONF                              #Can be:
                                  #  - ./dredd.yml
                                  #  - dredd --config CONF_FILE
                                  #  - new Dredd(OPTS), using OPTS.options CONF
                                  #  - CLI flags
                                  #They are all dasherized
                                  #When not in CLI:
                                  #  - ARR are used when "can be used several times"
                                  #  - OBJ is used for --custom
dredd init                        #Creates a CONF file


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


dredd [SPEC_FILE|URL|GLOB]
 [SERVER_URL]
-p SPEC_FILE|URL|GLOB             #Specification files, e.g. openapi.yml. Can be used several times.
--path SPEC_FILE|URL|GLOB         #In Node.js, must specify both CONF.blueprint SPEC_FILE and CONF.path SPEC_FILE|URL|GLOB_ARR
--endpoint SERVER_URL             #
-g STR
--server STR                      #Run a shell command (to start server), then kills process after testing.
--server-wait NUM                 #Wait NUMsec (def: 3) before testing.

-r REPORTER
--reporter REPORTER               #Can be used several times.
-o FILE
--output FILE                     #Can be used several times.
-q
--silent                          #
-l
--level STR                       #Log level, among 'error', 'warn', 'info' (def), 'verbose', 'debug', 'silly'
-c BOOL
--color BOOL                      #Def: true
-t
--timestamp                       #Add timestamp to output (def: false)

-s
--sorted                          #Sort tests by HTTP method: CONNECT, OPTIONS, POST, GET, HEAD, PUT, PATCH, DELETE, TRACE
-n
--names                           #Only list all the tests TEST_NAME
-y
--dry-run                         #

-h 'VAR:VAL,...'
--header 'VAR:VAL,...'            #Sets HTTP request headers. Can be used several times.
-u 'USER:PASSWORD'
--user 'USER:PASSWORD'            #HTTP Basic authentication

-x 'TEST_NAME'
--only 'TEST_NAME'                #Only run those tests. Can be used several times.
-m 'METHOD'
--method 'METHOD'                 #Only run tests with this HTTP method. Can be used several times.

-j 'VAR:VAL,...'
--custom 'VAR:VAL,...'            #???
-d
--details                         #???
-e
--inline-errors                   #???


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Dredd(OPTS)                   #DREDD
                                  #OPTS:
                                  #  - server???
                                  #  - emitter EVENTEMITTER
                                  #  - hooksData???
                                  #  - data.PATH???
DREDD.run(FUNC(ERROR, STATS))     #

STATS.result.tests                #NUM
STATS.result.
 failures|errors|passes|skipped   #NUM
STATS.result.start|end            #DATE_NUM
STATS.result.duration             #NUM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOOKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


dredd
-f HOOKS_FILES_GLOB
--hookfiles HOOKS_FILES_GLOB      #
-a
--language STR                    #Language of the hooks files, among 'nodejs' (def), 'ruby|python|php|perl|go|rust'
-b                                #Run hooks files in sandbox environment
--sandbox                         #Only with JavaScript
                                  #Cannot use:
                                  #  - async hooks
                                  #  - parent scope, but can access global.stash OBJ
                                  #Max:
                                  #  - hook execution time 500ms
                                  #  - limit 1MB

--hooks-worker-handler-host|port  #Hooks server
                                  #Def: '127.0.0.1' and 61321
--hooks-worker-connect-           #Connection retries to hooks server
 retry|timeout NUM                #Def: 500|1500
--hooks-worker-after-connect-wait #Wait NUMms after connecting to hooks server, before starting testing
 NUM                              #Def: 100
--hooks-worker-timeout NUM        #Timeout to start hooks server
                                  #Def: 5000
--hooks-worker-term-              #Disconnection retries to hooks server
 retry|timeout NUM                #Def: 500|5000


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          HOOK FILES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SHARED STATE ==>                  #Simply re-use a variable in parent scope

ERROR ==>                         #Either throw an error (including through an assertion library) or call FUNC2(ERROR)

HOOKS.*(..., FUNC2([ERROR]))      #All hooks can be async by adding a FUNC2 parameter
HOOKS.beforeAll|afterAll
 (FUNC(TRANS_ARR))                #Fired before|after all tests
HOOKS.beforeEach(FUNC(TRANS))     #Fired for each test, before HTTP request|response
HOOKS.beforeEachValidation
 (FUNC(TRANS))                    #Fired for each test, after HTTP request|response, before assertions
HOOKS.afterEach(FUNC(TRANS))      #Fired for each test, after assertions
HOOKS.before|beforeValidation|
 after('TEST_NAME', FUNC(TRANS))  #Same with a specific test

HOOKS.log(...)                    #To use instead of console.log(...)
HOOKS.configuration               #CONF


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TRANSACTION          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TRANS                             #HTTP request|response
                                  #Changing actually modifies the HTTP request|response, the assertion and the results

TRANS.id                          #'METHOD (STATUS) /PATH'
TRANS.name                        #Unique 'TEST_NAME'
TRANS.origin.filename             #'SPEC_FILE'
TRANS.origin.apiName              #STR
TRANS.origin.resourceGroupName    #STR
TRANS.origin.resourceName         #STR
TRANS.origin.actionName           #STR
TRANS.origin.exampleName          #STR

TRANS.protocol                    #'http[s]:'
TRANS.host                        #STR
TRANS.port                        #NUM
TRANS.fullPath                    #STR. After URI templating.

TRANS.request                     #HTTP request
TRANS.request.method              #STR
TRANS.request.url                 #'/PATH'
TRANS.request.headers             #OBJ
TRANS.request.body                #STR

TRANS.expected                    #Assertions on HTTP response
TRANS.expected.statusCode         #STR
TRANS.expected.headers            #OBJ
TRANS.expected.body               #STR
TRANS.expected.bodySchema         #OBJ (JSON schema)

TRANS.real                        #HTTP response
TRANS.real.statusCode             #STR
TRANS.real.headers                #OBJ
TRANS.real.body                   #STR

TRANS.skip                        #BOOL. Set to true to skip test
TRANS.fail                        #BOOL|STR. Set to 'ERROR' to make test fail.

TRANS.test                        #TEST. Testing session.
TEST.start|end                    #DATE
TEST.startedAt                    #NUM (Unix timestamp)
TEST.duration                     #NUM (in ms)
TEST.status                       #'pass|fail|skip'
TEST.valid                        #BOOL
TEST.message                      #All output concatenated as single STR
TEST.title|request|actual|expected
 |origin                          #Same as TRANS.id|request|real|expected|origin

TRANS|TEST.results                #RESULTS
RESULTS.general.results           #GERROR_ARR
RESULTS.statusCode|headers|body   #GOUTPUT

GOUTPUT.results                   #GERROR_ARR
GOUTPUT.expectedType|realType     #'MIME'
GOUTPUT.validator                 #STR
GOUTPUT.rawData                   #GJSONSCHEMA or GTEXTDIFF

GJSONSCHEMA.length                #NUM. Number of errors
GJSONSCHEMA.property              #JSON_POINTER_ARR to the errored property
GJSONSCHEMA.propertyValue         #VAL
GJSONSCHEMA.attributeName         #JSON schema proeprty name STR
GJSONSCHEMA.attributeValue        #VAL
GJSONSCHEMA.message               #'ERROR'

GTEXTDIFF                         #STR looking like a GNU diff.

GERROR.pointer                    #JSON_POINTER
GERROR.severity                   #STR
GERROR.message                    #'ERROR'
