
                      
   JASMINE_ASSERTIONS  
                      



ALTERNATIVES ==>                                #See chai

VERSION ==>                                     #Part of Jasmine (see its doc)
                                                #Generic assertions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ASSERTIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.nothing()                                #Noop

EXPECT.toBe(VAL2)                               #=== VAL2
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null

EXPECT_BOOL.toBeTruthy|Falsy()                  #== true|false

EXPECT_NUM.toBeNaN()                            #Object.is(NaN)
EXPECT_NUM.toBePositive|NegativeInfinity()      #=== Infinity|-Infinity
EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)   #< > <= >= NUM
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])             #== Math.round(NUM, NUM2)
                                                #Def NUM2: 2

EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring

EXPECT_ARR.toContain(VAL)                       #Any ARR element.toEqual(VAL)

EXPECT_FUNC.toThrow([VAL])                      #VAL uses toEqual()
EXPECT_FUNC.toThrowError([TYPE], [STR|REGEXP])  #Def TYPE is Error
EXPECT_FUNC.toThrowMatching(FUNC(ERROR)->BOOL)  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEEP ASSERTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEEP ASSERTIONS ==>                             #Assertions that can either be used:
                                                #  - top-level, e.g. EXPECT.toEqual(JASMINE.any(TYPE))
                                                #  - nested level, e.g. EXPECT.toEqual({ ..., VAR: JASMINE.any(TYPE) })

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
                                                #Can also do the reverse (i.e. assymetricMatch(...) on the expected value) but not both.

EXPECT.toEqual(JASMINE.anything())              #!== undefined|null
EXPECT.toEqual(JASMINE.any(TYPE))               #instanceof TYPE

EXPECT_BOOL.toEqual(JASMINE.falsy|truthy())     #== false|true

EXPECT_STR.toEqual
 (JASMINE.stringMatching(REGEXP|'REGEXP'))      #REGEXP.test(STR)
EXPECT_STR.toEqual(JASMINE.[not]empty())        #=== ''

EXPECT_ARR.toEqual(JASMIN.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.
EXPECT_ARR
 .toEqual(JASMINE.arrayWithExactContents(ARR2)) #ARR2 has exact same elements as ARR (using toEqual())
                                                #Order does not matter.

EXPECT_OBJ.toEqual(JASMN.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())
EXPECT_OBJ|ARR.toEqual(JASMINE.[not]empty())    #=== {}|[]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CUSTOM ASSERTION        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


JASMINE.addCustomEqualityTester                 #Will be used in toEqual(), providing it does not return undefined.
 (FUNC(VAL, VAL2)->BOOL|undefined)              #Must be done in beforeAll()


MATCHER                                         #FUNC(UTIL, TESTERS)->OBJ:
                                                #  - compare(VAL[, ARG...])->OBJ2:
                                                #     - pass BOOL
                                                #     - message STR:
                                                #        - "Expected VAL [not] to be ..."
                                                #        - def. ...: use CUSTOM by adding space between camelcase
                                                #        - must be set even if pass true, but using "not"
                                                #  - negativeCompare(...):
                                                #     - same but used when "not" is used
                                                #     - def: just inverse pass BOOL
JASMINE.addMatchers({ CUSTOM: MATCHER ... })    #Add custom assertion EXPECT.CUSTOM([ARG...]):
                                                #Must be in beforeAll()

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual() (including using deep assertions)
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_ELEM.toHaveClass('CLASS')                #Check HTML class

