
                   
   JEST ASSERTIONS  
                   



ALTERNATIVES ==>                                #See chai

VERSION ==>                                     #Part of Jest (see its doc)
                                                #Generic assertions

JASMINE VS JEST ==>                             #Jest uses Jasmine under the hood but:
                                                #  - an older version 2.5.2 with few differences
                                                #  - more features
                                                #  - want to drop direct dependency eventually


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect(VAL)                                     #EXPECT

EXPECT.not...                                   #Invert assertion

EXPECT.toBe(VAL2)                               #Object.is()
EXPECT.toEqual(VAL2)                            #== VAL2
                                                #For OBJ, compare own enumerated by copy

EXPECT.toBeInstanceOf(TYPE)                     #instanceof TYPE


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NULL|UNDEFINED         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT.toBeDefined|Undefined()                  #=== undefined
EXPECT.toBeNull()                               #=== null


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_BOOL.toBeTruthy|Falsy()                  #== true|false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NUMBER             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_NUM.toBeNaN()                            #Object.is(NaN)

EXPECT_NUM.toBeLess|GreaterThan[OrEqual](NUM)   #< > <= >= NUM
EXPECT_NUM.toBeCloseTo(NUM[, NUM2])             #== Math.round(NUM, NUM2)
                                                #Def NUM2: 2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_STR.toMatch(REGEXP)                      #REGEXP.test(STR)
EXPECT_STR.toContain(STR2)                      #Is substring
EXPECT_STR.toHaveLength(NUM)                    #STR.length === 0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ARRAY|OBJECT          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_ARR.toContain(VAL)                       #Any ARR element.toBe(VAL)
EXPECT_ARR.toContainEqual(VAL)                  #Any ARR element.toEqual(VAL)
EXPECT_ARR.toHaveLength(NUM)                    #ARR.length === 0

EXPECT_OBJ.toHaveProperty                       #OBJ.VARR !== undefined
 ('VARR'|'VAR'_ARR[, VAL])                      #If VAL, OBJ.VARR.toEqual(VAL)
EXPECT_OBJ|ARR.toMatchObject(OBJ2|ARR2)         #OBJ2|ARR2 is a subset of OBJ|ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_FUNC.toThrow()                           #
EXPECT_FUNC.toThrowError([TYPE], [STR|REGEXP])  #Def TYPE is Error


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PROMISE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXPECT_PROMISE.resolves|rejects.*(...)          #PROMISE should be resolved|rejected
                                                #The resolved|rejected value should EXPECT(VAL).*(...)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        DEEP ASSERTION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEEP ASSERTIONS ==>                             #Assertions that can either be used:
                                                #  - top-level, e.g. EXPECT.toEqual(expect.any(TYPE))
                                                #  - nested level, e.g. EXPECT.toEqual({ ..., VAR: expect.any(TYPE) })

EXPECT.toEqual                                  #FUNC(VAL)->BOOL
 ({ asymmetricMatch: FUNC, ... })               #`this` is { ... } (must not use arrow functions)
                                                #Can also do the reverse (i.e. assymetricMatch(...) on the expected value) but not both.

EXPECT.toEqual(expect.anything())               #!== undefined|null
EXPECT.toEqual(expect.any(TYPE))                #instanceof TYPE

EXPECT_STR.toEqual
 (expect.stringMatching(REGEXP|'REGEXP'))       #REGEXP.test(STR)
EXPECT_STR.toEqual
 (expect.stringContaining(STR))                 #Is substring

EXPECT_ARR.toEqual(expect.arrayContaining(ARR2))#ARR2 is a subset of ARR (using toEqual())
                                                #Duplicates are removed. Order does not matter.

EXPCT_OBJ.toEqual(expect.objectContaining(OBJ2))#OBJ2 is a subset of OBJ (using toEqual())
EXPECT_OBJ|ARR.toEqual(expect.[not]empty())     #=== {}|[]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SNAPSHOTS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SNAPSHOTS ==>                                   #Diff testing on serialized values

EXPECT.toMatchSnapshot(['NAME'])                #== to last time EXPECT.toMatchSnapshot() was run
                                                #Def NAME: 'TEST_NAME'
EXPECT_FUNC.toThrowErrorMatchingSnapshot()      #Throw an error, and error == to last time EXPECT_FUNC.toThrowErrorMatchingSnapshot() was run

./__snapshots__/FILE.snap                       #Contains serialized value as module.exports = { 'NAME': SERIALIZED_VALUE }
                                                #Should be committed to repository
                                                #Created on first EXPECT.toMatchSnapshot()
                                                #  - unless jest --ci (should be done in CI)
                                                #If during a test run, there is a difference, either:
                                                #  - if diff is not intended, fix bug
                                                #  - if diff is intended (e.g. new feature), update with jest --updateSnapshot
jest -u|--updateSnapshot                        #
jest --ci                                       #

SERIALIZER                                      #Adapter to serialize specific type of values
                                                #Default ones: JavaScript core values, HTML ELEM, React RELEM, Immutable.js
                                                #Can add custom ones (see below)
SERIALIZER.print(VAL, FUNC, NUM)->STR           #FUNC is the default serializer. NUM is indent
SERIALIZER.test(VAL)->BOOL                      #Check if this SERIALIZER should be used
CONF.snapshotSerializers                        #'MODULE'_ARR to additional SERIALIZERs
EXPECT.addSnapshotSerializer(SERIALIZER)        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PLAN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


expect.assertions(NUM)                          #Exactly NUM EXPECT.*() (except EXCEPT.[has]assertions()) are called in current test
expect.hasAssertions()                          #Same for more than 0 EXPECT.*()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          EXTENSIONS           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCHER                                         #FUNC(UTIL, TESTERS)->OBJ:
                                                #  - compare(VAL[, ARG...])->OBJ2:
                                                #     - pass BOOL
                                                #     - message STR:
                                                #        - "Expected VAL [not] to be ..."
                                                #        - def. ...: use CUSTOM by adding space between camelcase
                                                #        - must be set even if pass true, but using "not"
                                                #  - negativeCompare(...):
                                                #     - same but used when "not" is used
                                                #     - def: just inverse pass BOOL
expect.addMatchers({ CUSTOM: MATCHER ... })     #Add custom assertion EXPECT.CUSTOM([ARG...]):
                                                #Must be in beforeAll()

UTIL.equals(VAL, VAL2, TESTERS)->BOOL           #Like toEqual() (including using deep assertions)
UTIL.contains(ARR|STR, VAL|STR2, TESTERS)->BOOL #Like toContain()
