
                  
   AVA_ASSERTIONS  
                  



ALTERNATIVES ==>                  #See chai doc

VERSION ==>                       #Part of Ava (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


EXCEPTIONS ==>                    #Assertions only report: they do not throw (i.e. control flow continues)
                                  #However following exceptions are handled silently, i.e. it's just like if assertions were throwing

CONF.failWithoutAssertions        #BOOL (def: true): fail tests with no assertions

OTHER ASSERTION LIBRARY ==>       #Can use other assertion library (e.g. core Node.js assert)
                                  #However CONF.failWithoutAssertions must be false

TEST.*(..., 'ASSERT_TITLE')       #For any assertion.
                                  #Def 'ASSERT_TITLE': none
                                  #Is printed to console by default reporter

TEST.*.skip(...)                  #For any assertion, skip it


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          ENHANCEMENTS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.compileEnhancements          #BOOL (def: true).
                                  #Automatically uses POWER-ASSERT (see its doc)
                                  #Only with built-in assertion library
                                  #TEST must be named t

STACK TRACES ==>                  #Stack trace are automatically cleaned (using both CLEAN-STACK and STACK-UTILS.clean(), see their doc)
                                  #Also source maps are handler (using NODE-SOURCE-MAP-SUPPORT.install(), see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.pass()                       #
TEST.fail()                       #

TEST.is|not(VAL, VAL2)            #Object.is()
TEST.[not]deepEqual(VAL, VAL2)    #Deep ==


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BOOLEAN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.truthy|falsy(VAL)            #== true|false
TEST.true|false(VAL)              #=== true|false


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STRING             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.[not]regex(STR, REGEXP)      #REGEXP.test()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.throws                       #FUNC()|PROMISE|OBSERVABLE throws or rejects an ERROR matching VAL:
 (FUNC|PROMISE|OBSERVABLE[, VAL]) #  - OBJ:
 ->ERROR                          #     - instanceof TYPE
                                  #     - name STR: ERROR.name
                                  #     - message STR|REGEXP: ERROR.message
                                  #     - is ERROR
                                  #  - TYPE: like OBJ.instanceof
                                  #  - STR|REGEXP: like OBJ.message
                                  #If async FUNC or PROMISE, returns PROMISE2_ERROR which must be awaited
TEST.notThrows                    #FUNC()|PROMISE|OBSERVABLE does not throw nor reject
 (FUNC|PROMISE|OBSERVABLE)        #If async FUNC or PROMISE, returns PROMISE2_ERROR which must be awaited
