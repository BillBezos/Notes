
                   
   TAPE_ASSERTIONS  
                   



VERSION ==>                       #Part of Tape (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMMON             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.*(...[, 'ASSERT_TITLE'])     #All assertions can specify ASSERT_TITLE as last argument. Def:
                                  #  - TEST.fail|pass|skip(): '(unnamed assert)'
                                  #  - TEST.error(): ERROR.message
                                  #  - others: 'should be ...'
TAP'S YAML ERROR PROPS ==>        #Are:
                                  #  - operator 'FUNC_NAME'
                                  #  - expected|actual VAL: on all but TEST.fail|pass()
                                  #  - at STR, stack STR from either:
                                  #     - thrown ERROR by TEST.throws|doesNotThrow()
                                  #     - (new Error).stack

TOPTS.objectPrintDepth            #NUM (def: 5)
                                  #When stringifying assertions' expected|actual VAL
NODE_TAPE_OBJECT_PRINT_DEPTH      #Same as ENVVAR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERIC            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.fail()                       #
TEST.pass()                       #

TEST.ok(VAL)                      #== true
                                  #Aliases: TEST.true|assert()
TEST.notOk(VAL)                   #== false
                                  #Aliases: TEST.false()
TEST.error(ERROR)                 #== false (i.e. undefined)
                                  #Uses ERROR.message
                                  #Aliases: TEST.ifErr[or]()

TEST.equal(VAL, VAL2)             #===
                                  #Aliases: TEST.equals|isEqual|is|strictEqual[s]()
TEST.notEqual(VAL, VAL2)          #!==
                                  #Aliases: TEST.notEquals|isNotEqual|doesNotEqual|isInequal|isNot|not|notStrictEqual[s]()
TEST.deepEqual(VAL, VAL2)         #Deep ===
                                  #Aliases: TEST.deepEquals|isEquivalent|same()
TEST.notDeepEqual(VAL, VAL2)      #Deep !==
                                  #Aliases: TEST.[is]notEquivalent|[is]notDeeply|notSame|isNotDeepEqual|isInequivalent()
TEST.deepLooseEqual(VAL, VAL2)    #Deep ==
                                  #Aliases: TEST.looseEqual[s]()
TEST.notDeepLooseEqual(VAL, VAL2) #Deep !=
                                  #Aliases: TEST.notLooseEqual[s]()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FUNCTION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TEST.throws(FUNC[, REGEXP|TYPE])  #FUNC() throws
                                  #ERROR.message matches REGEXP or ERROR instanceof TYPE
TEST.doesNotThrow
 (FUNC[, REGEXP|TYPE])            #FUNC() does not throw
