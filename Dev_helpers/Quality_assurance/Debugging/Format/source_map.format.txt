
              
   SOURCE_MAP  
              



VERSION ==>                       #18/11/2013 (revision 3 proposal)

GOAL ==>                          #Map positions and variable names from a compiled file to a source file
                                  #Reason: allowing to debug compiled file using source file

Finding source map:
  - from the compiled file
  - can be:
     - sibling file with '.map' append
     - [X-]SourceMap: URL [S] HTTP header
     - comment "# sourceMappingURL=URI" at end of compiled file
        - should use format's comment marker, e.g. //# ... for JavaScript, /* */ for CSS
        - URI can be a data URI.
           - used together "sourceContent", allow inline source maps
  - URLs are relative to:
     - <script src>
     - comment "# sourceURL=URL"
        - should be "foo.js" if there is no file (e.g. genereted with eval())
     - parent page's URL

JSON file

version                           #3 (required)
sources                           #Source files 'PATH'_ARR
sourceRoot                        #Source files 'DIR' (prepended to "sources")
                                  #sources + sourceRoot are relative URIs to source map's directory.
sourceContent                     #Source files STR|null_ARR: like "sources" but inline
names                             #Source files 'VAR'_ARR list of identifiers
file                              #Source map's 'FILENAME'
                                  #Usually re-use source filename and append '.map'
mappings                          #MAPPINGS
x_*                               #Extensions
x_google_linecount                #Source files number of lines

MAPPINGS:
  - map each position within compiled file to a position (and 'VAR' name) within source file
  - a "mappings" is ;-separated into groups (a line in source file)
  - a "group" is ,-separated into segments (a variable name/position)
  - a "segment" is a VLQ_INT_ARR ("fields"):
     - represents "position" of:
        0) 'VAR' in compiled file
        1) source file among "sources"
        2) line in source file
        3) column in the line
        4) the 'VAR' name among "names"
     - only 0) is required
     - each "position" is relative offset:
        - unless it is the first occurence, in which case it is absolute position
        - for segment 0) it also is absolute position for first segment of each group
     - VLQ_INT is a 32 bits signed integer, encoded using source map's VLQ (see its doc)

INDEX MAP:
  - when concatenating several "sections" (source files + compiled file + source map) into a single bundled file
  - can be used the same way as source maps

version                           #3 (required)
file                              #Source map's 'FILENAME'
sections                          #OBJ_ARR
                                  #Must be sorted by position and not overlap.
sections.*.line|column            #Position within the bundled file
sections.*.url                    #URL of the source map
                                  #Resolved the same way as "sources" and "sourceRoot"
sections.*.map                    #Same but inlined, i.e. OBJ of the source map


Multi-level mapping:
  - when there are several compilation stages, e.g. TypeScript + Minification
  - possible solutions:
     - single source map from last compiled file to source file
     - single source map from last compiled file to intermediary compiled file
     - several source maps for each stage
