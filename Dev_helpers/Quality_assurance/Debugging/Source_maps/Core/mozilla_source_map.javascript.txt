
                      
   MOZILLA_SOURCE_MAP  
                      



ALTERNATIVES ==>                  #  - mozilla source-map:
                                  #     - by far the most high-profile

VERSION ==>                       #0.7.2
                                  #Based on source map format (see its doc)
                                  #Node/browser

BROWSER ==>                       #Must first call SourceMapConsumer.initialize({ 'lib/mappings.wasm': URL }) with URL pointing
                                  #to 'mappings.wasm file'
                                  #That file is available at ./lib/mappings.wasm with that library.

SOURCE_MAP                        #Source map as object


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           GENERATOR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERATOR                         #Low-level API to generate a source map by specifying each mapping

new SourceMapGenerator            #GENERATOR_OPTS:
 ([GENERATOR_OPTS])               #  - file 'COMPILED_FILENAME' (SOURCE_MAP "file")
                                  #  - sourceRoot 'URI' (SOURCE_MAP "sourceRoot")
                                  #  - skipValidation BOOL (def: false): faster but less safe

GENERATOR.addMapping(OBJ)         #Add to "mappings"
                                  #OBJ:
                                  #  - source 'SOURCE_PATH' (SOURCE_MAP "sources")
                                  #  - generated|original:
                                  #     - line|column NUM
                                  #  - name 'VAR'|null (SOURCE_MAP "names")

GENERATOR.setSourceContent
 ('SOURCE_PATH', STR)             #Add to "sourceContent"

GENERATOR.toString()->SOURCE_MAP  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SOURCE_NODE          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SOURCE_NODE                       #Higher-level API over GENERATOR

new SourceNode
 ([LINE_NUM, COLUMN_NUM]
 [, 'SOURCE_FILENAME']
 [,'COMPILED_CODE'|SOURCENODE_ARR]
 [, 'VAR'])                       #

SOURCE_NODE.add|prepend
 ('COMPILED_CODE'|SOURCE_NODE_ARR)#Append|prepend to "mappings".

SOURCE_NODE.setSourceContent
 ('SOURCE_PATH', STR)             #Add to "sourceContent"

SOURCE_NODE.toStringWithSourceMap #Returns OBJ:
 ([GENERATOR_OPTS])->OBJ          #  - map GENERATOR
                                  #  - code 'JAVASCRIPT_CODE': same as SOURCE_NODE.toString()

SOURCE_NODE.toString()
 ->'COMPILED_CODE'                #
SOURCE_NODE.join(...)             #Like toString().join(...)???
SOURCE_NODE.replaceRight(...)     #Like replace(...) on last mapping???

SOURCE_NODE.walk                  #Iterate over "mappings":
 (FUNC('COMPILED_CODE', OBJ))     #  - source 'URI' (relative)
                                  #  - line|column NUM
                                  #  - name 'VAR'|null
SOURCE_NODE.walkSourceContents
 (FUNC('SOURCE_PATH', STR))       #Iterate over "sourceContent"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           CONSUMER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new SourceMapConsumer
 (SOURCE_MAP_OBJ|STR)
 ->PROMISE_CONSUMER               #
CONSUMER.destroy()                #Removes WASM-related data
SourceMapConsumer.with(SOURCE_MAP,
 'SOURCEMAP_PATH'|null,           #Like new SourceMapConsumer() except CONSUMER.destroy() is automatically called when ASYNC_FUNC ends
 ASYNC_FUNC(CONSUMER))->PROMIS_VAL#PROMISE_VAL is ASYNC_FUNC's return value
CONSUMER.sources                  #Source map "sources" resolved to absolute URIs
CONSUMER.originalPositionFor(OBJ) #Use "mappings" to map compiled file index OBJ:
 ->OBJ2                           #  - line|column NUM
                                  #  - bias SourceMapConsumer.GREATEST_LOWER|UPPER_BOUND (def: LOWER): if cannot find source
                                  #    element, whether to return previous of next boundary
                                  #To source file position OBJ2:
                                  #  - source 'URI'|null (absolute)
                                  #  - line|column NUM|null
                                  #  - lastColumn NUM|null
                                  #     - only generated if CONSUMER.computeColumnsSpans() was called
                                  #  - name 'VAR'|null
CONSUMR.generatedPositionFor(OBJ2)#Inverse, i.e. maps source file position to compiled file index
 ->OBJ                            #With:
                                  #  - OBJ2: source|file|column
                                  #  - OBJ: line|column|lastColumn NUM|null
CONSUMER.allGeneratedPositions    #Same except:
 (OBJ2)->OBJ                      #  - column is optional
                                  #  - returns all mappings, i.e. OBJ_ARR
CONSUMER.eachMapping              #Iterates over "mappings" OBJ:
 (FUNC(OBJ)[, THIS][, VAL])       #  - source 'SOURCE_PATH'|null
                                  #  - generated|originalLine|Column|LastColumn NUM|null
                                  #  - name 'VAR'|null
                                  #VAL is SourceMapConsumer.GENERATED|ORIGINAL_ORDER (def: GENERATED)
CONSUMER.sourceContentFor         #Returns "sourceContent"
 ('SOURCE_PATH'[, BOOL])->STR     #If not found, throws if BOOL false (def) or returns null if BOOL true.
CONSUMER.hasContentsOfAllSources()
 ->BOOL                           #True if every source has "sourceContent", i.e. is completely inline source map

SourceMapGenerator.fromSourceMap
 (CONSUMER)->GENERATOR            #
GENERATOR.applySourceMap
 (CONSUMER[, 'SOURCE_FILENAME']
 [, 'SOURCE_DIR'])                #Def 'SOURCE_PATH': CONSUMER.file
SOURCE_NOD.fromStringWithSourceMap
 ('COMPILED_CODE', CONSUMER
 [, 'DIR'])                       #'DIR' is relative path
