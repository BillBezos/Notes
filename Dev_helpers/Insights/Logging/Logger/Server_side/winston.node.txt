
           
   WINSTON  
           




VERSION ==>                       #3.1.0

TRIPLE-BEAM                       #Module with winston constants
                                  #Version 1.3.0
TRIPLE-BEAM.configs.*             #Same as WINSTON.config.*

LOGGER                            #IOSTREAM in objectMode
createLogger([OPTS])->LOGGER      #
LOGGER.configure([OPTS])          #Reinitialize LOGGER

LOGINFO                           #OBJ:
                                  #  - level LEVEL
                                  #  - message 'MESSAGE'
                                  #  - any other property
                                  #FORMAT|TRANSPORT get a normalized LOGINFO with:
                                  #  - LOGINFO[TRIPLE-BEAM.LEVEL] instead of LOGINFO.level
                                  #  - LOGINFO[TRIPLE-BEAM.SPLAT] SPLAT_ARG_ARR

LOGGER.log([LEVEL, ]LOGINFO)
LOGGER.log(LEVEL, 'MESSAGE'
 [, LOGINFO], [...SPLAT_ARGS])
LOGGER.LEVEL(LOGINFO)
LOGGER.LEVEL('MESSAGE'
 [, LOGINFO][, ...SPLAT_ARGS])    #

LOGGER|OPTS|TOPTS.silent          #BOOL (def: false)
LOGGER|OPTS.levels                #All LEVELs as { LEVEL: NUM, ... }
                                  #Can use either custom one or:
                                  #  - config.npm.levels (def): 'error|warn|info|http|verbose|debug|silly'
                                  #  - config.cli.levels: 'error|warn|help|data|info|debug|prompt|verbose|input|silly'
                                  #  - config.syslog.levels: 'emerg|alert|crit|error|warning|notice|info|debug'
LOGGER|OPTS|TOPTS.level           #STR (def: 'info')
                                  #Default TRANSPORT.level
                                  #Also used when no TRANSPORT is defined
TRANSPORT.level                   #LEVEL. Filters logs with lower LEVEL
LOGGER.isLevelEnabled(LEVEL)->BOOL
LOGGER.isLEVELEnabled()->BOOL     #Whether some TRANSPORT.level >= LEVEL

format.*                          #Reference to module 'logform' (1.10.0)

LOGGER|OPTS|TOPTS.format          #FORMAT. Def: format.json()
FORMAT                            #LOGINFO reducer performed on every log.
                                  #If reduce to false, silent log.
FORMAT.transform(LOGINFO, FOPTS)
 ->LOGINFO|false                  #
FORMAT.options                    #FOPTS
                                  #Available as this.options inside FORMAT.transform()

format(FUNC(LOGINFO)->LOGINFO)
 ->FUNC2([FOPTS])->FORMAT         #Turn any reducer FUNC to a FORMAT
format.combine(FORMAT...)->FORMAT #Turn several FORMAT into one

format.colorize([FOPTS])->FORMAT  #Colorize LOGINFO.level|message
                                  #Color is according to LOGINFO.level
                                  #FOPTS:
                                  #  - level BOOL (def: true unless FOPTS.message true): colorize LOGINFO.level
                                  #  - message BOOL (def: false): colorize LOGINFO.message
                                  #  - all BOOL (def: false): colorize both LOGINFO.level|message
config.LEVEL_TYPE.colors.LEVEL    #Default colors
[format.]addColors
 ({ LEVEL: 'COLOR ...', ... })    #Change default colors. Uses COLORS.js library
format.uncolorize([FOPTS])->FORMAT#Remove colors from LOGINFO.level|message
                                  #FOPTS: level|message BOOL (def: true)

format.align()->FORMAT            #Prepend '\t' to LOGINFO.message
format.padLevels([FOPTS])->FORMAT #Left pads LOGINFO.message according to LOGINFO.level width
                                  #FOPTS:
                                  #  - levels (def: config.npm.levels)
                                  #  - filler STR (def: ' ')
format.cli([FOPTS])->FORMAT       #Combines format.colorize() and format.padLevels()
                                  #Also prepends 'LEVEL:' to LOGINFO.message

format.json()
                                  #Uses FAST-SAFE-STRINGIFY (see its doc)
format.label()
format.logstash()
format.metadata()
format.ms()
format.prettyPrint()
format.printf()
format.simple()
format.splat()
format.timestamp()





OPTS.exceptionHandlers            #Three ways to specify TRANSPORTs performed on process.on('uncaughtException', FUNC(ERROR))
 TRANSPORT[_ARR]                  #Must perform logging within 3 secs
LOGGER.exceptions.handle          #LOGINFO:
 (TRANSPORT)                      #  - error ERROR
TOPTS.handleExceptions true       #  - level 'error'
                                  #  - message 'uncaughtException: ERROR.message\nERROR.stack'
                                  #  - stack ERROR.stack
                                  #  - exception true
                                  #  - date 'DATE'
                                  #  - process OBJ:
                                  #     - pid|execPath|version|argv PROCESS.pid|execPath|version|argv
                                  #     - uid|gid PROCESS.getuid|getgid()
                                  #     - cwd PROCESS.cwd()
                                  #     - memoryUsage PROCESS.memoryUsage()
                                  #  - os OBJ:
                                  #     - loadavg|uptime: OS.loadavg|uptime()
                                  #  - trace OBJ_ARR:
                                  #     - column|file|function|line|method|native
                                  #         - first parse ERROR.stack with NODE-STACK-TRACE (see its doc)
                                  #         - then CALL.getColumnNumber|FileName|FunctionName|LineNumber|MethodName|isNative()
LOGGER.exceptions.unhandle()      #Removes 'uncaughtException' handler
LOGGER|OPTS.exitOnError           #BOOL[(ERROR)]
                                  #If true (def), calls process.exit(1) on 'uncaughtException' ERROR

LOGGER.close()                    #Close LOGGER's and its TRANSPORT's streams

LOGGER|OPTS.transports            #TRANSPORT[_ARR]
Transport                         #OSTREAM in objectMode
                                  #Inherit from base class from 'winston-transport' (4.2.0)
TRANSPORT.name                    #'TRANSPORT'
TRANSPORT.log                     #Called after writing LOGINFO on OSTREAM.
 (LOGINFO, FUNC([ERROR]))         #Should be defined by TRANSPORT, but not called directly by users
                                  #Performed after level filtering and FORMAT applied
TRANSPORT.logv
 (LOGINFO_ARR, FUNC([ERROR]))     #Same but for several LOGINFO at once, and is optional
TRANSPORT.close()                 #Called when TRANSPORT is removed
                                  #Should be defined by TRANSPORT, but not called directly by users
TOPTS                             #TRANSPORT constructor options. Some are common to all transports
TOPTS.highWaterMark               #Passed to OSTREAM

LOGGER.add(TRANSPORT)             #Add TRANSPORT, i.e. pipe LOGGER's stream to TRANSPORT
LOGGER.remove(TRANSPORT)          #
LOGGER.clear()                    #Remove all TRANSPORTs
LOGGER.on('error|warn',
 FUNC(ERROR, TRANSPORT))          #Forwarded events from TRANSPORT

new transports.Stream([TOPTS])    #TRANSPORT that pipes to OPTS.stream OSTREAM
                                  #If OSTREAM is not in objectMode, pipes LOGINFO.message instead of LOGINFO
new transports.Console([TOPTS])   #TRANSPORT that calls console.log(LOGINFO.message)
                                  #TOPTS:
                                  #  - stderrLevels|consoleWarnLevels LEVEL_ARR: call console.error|warn() instead for those levels
                                  #  - eol (def: OS.EOL)
new transports.Http([TOPTS])      #TRANSPORT that make a POST HTTP request (using core HTTP module) with JSON payload LOGINFO
                                  #TOPTS:
                                  #  - ssl BOOL (def: false)
                                  #  - host STR (def: 'localhost')
                                  #  - port NUM (def: 80|443)
                                  #  - auth.username|password STR (can also use LOGINFO.auth)
                                  #  - path STR (def: '') (can also use LOGINFO.path)
                                  #  - headers OBJ
                                  #  - agent AGENT
                                  #Emit 'warn' event if issue or if status code not 200
                                  #Has TRANSPORT.query|stream()
                                  #  - payload is then { method: 'query|stream', params LOGINFO }
new transports.File([TOPTS])      #TRANSPORT that saves to a file

LOGGER.query                      #Retrieve logs.
 ([OPTS, ]FUNC(ERROR, OBJ))       #Only for transports that support the following methods, which are called in series.
                                  #OBJ result is { ['TRANSPORT']: ARR, ... }
TRANSPORT.formatQuery
 (OPTS.query)->OPTS.query         #Def OPTS.query: {}
TRANSPORT.query
 (OPTS, FUNC(ERROR, ARR))         #
TRANSPORT.formatResults
 (ARR, OPTS.format)->ARR          #

LOGGER.stream([OPTS])->ISTREAM    #Aggregate all TRANSPORTs into single IOSTREAM with events:
                                  #  - log(LOGINFO): with LOGINFO.transports 'TRANSPORT'_ARR
                                  #  - error(ERROR): with ERROR.transports 'TRANSPORT'_ARR
                                  #Only for TRANSPORTs that implement following method
TRANSPORT.stream([OPTS])->ISTREAM #

LOGGER.startTimer()->TIMER        #
TIMER.done([LOGINFO])             #Stops timer (using Date.now())
                                  #Then log LOGINFO with LOGINFO.durationMs NUM
                                  #LOGINFO.level defaults to 'info'
LOGGER.profile(TIMER_ID[,LOGINFO])#Same except:
                                  #  - same method for starting and stopping the timer
                                  #  - LOGINFO.message defaults to TIMER_ID

new Container([OPTS])             #Set of LOGGERs
                                  #Each ID can have several LOGGERs
CONTAINER.add(ID[, OPTS])         #
CONTAINER.get(ID)->LOGGER         #
CONTAINER.has(ID)->BOOL           #
CONTAINER.close(ID)               #Call all LOGGER.close()

loggers                           #CONTAINER singleton

WINSTON.*                         #A default LOGGER singleton (with default OPTS) is available directly on WINSTON.*

































ALTERNATIVES ==>              #  - winston (prefer)
                              #     - most high-profile
                              #     - level filtering
                              #     - custom filtering
                              #     - transport abstraction
                              #        - lots of transports
                              #     - log formatting (using logform)
                              #     - timers
                              #     - log search
                              #     - streaming
                              #     - uncaught exception handling
                              #     - graceful shutdown
                              #  - pino (almost prefered):
                              #     - browser/Node
                              #     - fast
                              #     - level filtering
                              #     - transport abstraction
                              #     - log formatting
                              #     - value filtering
                              #     - streaming (separate process) (ndjson)
                              #     - uncaught exception handling
                              #     - graceful shutdown
                              #  - signale:
                              #     - log formatting
                              #     - streaming
                              #     - CLI single line updating
                              #     - timers
                              #  - consola
                              #     - level filtering
                              #     - transport abstraction
                              #  - tracer
                              #     - level filtering
                              #     - transport abstraction
                              #     - log formatting
                              #  - log4js
                              #     - level filtering

new (WINSTON.Logger)([OBJ])   #Returns LOGGER
                              #Version 0.8.3
LOGGER.log                    #STR can use format string from UTIL.format()
(LEVEL, STR[, VAL...][, OBJ]) #OBJ are metadata (depends on transport, sometimes only log stringified)
                              #LEVEL:
                              #  - def. are "silly", "debug", "verbose", "info", "warn", "error"
                              #  - all transports can use OPT_OBJ.level LEVEL to only log anything >=
LOGGER.LEVEL(STR)             #Shortcut
LOGGER.cli()                  #Gives more CLI-friendly log output by appending spaces after LEVEL in output message

TRANSPORTS ==>                #Specified with:
                              #  - OBJ.transports ARR_TRANSPORT_OBJ
                              #  - or LOGGER.add|remove(TRANSPORT_TYPE[, OPT_OBJ])
                              #TRANSPORT_OBJ is new (TRANSPORT_TYPE)([OPT_OBJ]), how logging operates.
                              #TRANSPORT_TYPE must be setup:
                              #  - to return instance TRANSPORT_OBJ with members:
                              #     - log(LEVEL, MESSAGE, METADATA, FUNC(ERROR, BOOL))
                              #     - name TRANSPORT_NAME
                              #     - level = OPT_OBJ.level || "info"
                              #  - must UTIL.inherits(TRANSPORT_TYPE, WINSTON.Transport)
                              #Can access|change OPT_OBJ with LOGGER.transports.TRANSPORT_NAME
                              #Unhandled errors:
                              #  - OPT_OBJ.handleExceptions true: use it for unhandled exceptions.
                              #  - Also, will not exit on unhandled exceptions if LOGGER|OBJ.exitOnError false (def: true)
                             ##Transports include Loggly, Riak, MongoDB, Graylog2, Papertrail, Cassandra, CouchDB, Syslog,
                             ##SES, IRC, Redis, SQS, PostgreSQL, and also the following:

WINSTON.transports.Console    #  - silent BOOL (def: false)
                              #  - colorize BOOL (def: false)
                              #  - timestamp BOOL (def: false)
                              #  - json BOOL (def: true): log messages as JSON
                              #  - prettyPrint BOOL
                              #  - label STR: adds " [STR] " after LEVEL
WINSTON.transports.File       #  - silent|colorize|timestamp
                              #  - filename STR
                              #  - maxsize NUM: before rotating
                              #  - maxFiles NUM: before erasing files
                              #  - stream OSTREAM
                              #  - json BOOL (def: true): log messages as JSON
                              #  - prettyPrint BOOL
                              #  - label STR
                              #  - logstash BOOL (def: false): Logstash output
WINSTON.transports.Webhook    #  - host STR (def: "localhost")
                              #  - path STR (def: "/winston-log")
                              #  - port NUM (def: 8080)
                              #  - auth OBJ: username, password
                              #  - ssl OBJ: key, cert, ca
                              #  - method STR (def: "POST")
WINSTON-MONGODB.MongoDB      ##Version 0.5.3. Stores in MongoDB as { message STR, timestamp DATE, level STR, meta OBJ }
                             ##OPT_OBJ:
                             ##  - silent BOOL (def: false)
                             ##  - dbUri CONN_STR or host[s] STR[_ARR], port NUM, username|password STR, db DB_STR
                             ##  - collection COLL_STR
                             ##  - safe BOOL, nativeParser BOOL, ssl BOOL, authDB DB_STR, replSet REPL_SET_STR:
                             ##    passed to Node.js driver
                             ##  - errorTimeout NUM (in ms, def: 10s): reconnection timeout
                             ##  - timeout NUM (in ms, def: 10s): alive timeout
                             ##  - label STR: adds OBJ.label STR to every message
                             ##  - storeHost BOOL: adds OBJ.hostname = OS.hostname()
WINSTON-MAIL.Mail            ##Version 0.2.9, with OPT_OBJ:
                             ##  - to|from STR
                             ##  - host STR
                             ##  - port NUM (def: 587 or 25)
                             ##  - username|password STR
                             ##  - ssl|tls BOOL or OBJ: key, ca, cert
                             ##  - silent BOOL
WINSTON-SNS.SNS              ##Version 0.1.0 (deprecated), with OPT_OBJ:
                             ##  - aws_key|secret STR
                             ##  - subscriber STR
                             ##  - topic_arn STR
                             ##  - region STR (def: "us-east-1")
                             ##  - subject STR
                             ##  - message STR, using %l (level), %e (message), %m (metadata)
                             ##  - json BOOL (def: false)
                             ##  - handleExceptions BOOL (def: false)
WINSTON-GROWL                ##Version 0.0.8
WINSTON-S3                   ##Version 0.1.1, with OPT_OBJ:
                             ##  - key STR
                             ##  - secret STR
                             ##  - bucket STR
                             ##  - maxSize NUM: before rotating
                             ##  - id STR (def: hostname)
                             ##  - nested BOOL
                             ##  - path STR (def: "s3Logs")
                             ##  - temp BOOL (def: false)
                             ##  - debug BOOL (def: false)

EXPRESS-WINSTON.logger(OBJ)  ##Middleware firing WINSTON for requests. Version 0.2.8
                             ##OBJ:
                             ##  - transports TRANSPORT_OBJ_ARR
                             ##  - meta BOOL (def: false): if true, also logs metadata
                             ##  - msg STR:
                             ##     - Mustache template with context OBJ including members of req, res and body, after filtered
                             ##       by EXPRESS-WINSTON.request|response|bodyWhitelist STR_ARR (must push to it in order to
                             ##       keep the reference)
                             ##        - def: [ "url", "headers", "method", httpVersion", "originalUrl", "query" ],
                             ##          [], [ "statusCode" ]
                             ##        - Can imagine requestWhitelisting: "body", "trailers", "ip", "protocol"
                             ##     - Can also use EXPRESS-WINSTON.bodyBlacklist STR_ARR (instead of bodyWhitelist)
                             ##     - def. msg: all
                             ##  - expressFormat BOOL (def: false): use Morgan format
                             ##  - colorStatus BOOL (def: false): color according to the status code (like Morgan)
EXPRESS-WINSTON.errorLogger  ##Middleware firing WINSTON to put as error middleware.
(OBJ)                        ##OBJ:
                             ##  - transports TRANSPORT_OBJ_ARR
                             ##  - winstonInstance WINSTON
                             ##  - level STR
                             ##  - statusLevel BOOL: use different LEVEL according to HTTP status (def: false): info|warn|error
                             ##  - dumpExceptions BOOL
                             ##  - showStack BOOL
                             ##Logs OBJ:
                             ##  - date DATE
                             ##  - process: pid, uid, gid, cwd, execPath, version, argv, memoryUsage
                             ##  - os: loadavg, uptime
                             ##  - trace
                             ##  - req
                             ##  - level
                             ##  - message
