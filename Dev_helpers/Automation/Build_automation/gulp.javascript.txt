
        
   GULP  
        



ALTERNATIVES ==>                    #  - grunt: more declarative
                                    #  - gulp (prefered): more imperative. Use streams

VERSION ==>                         #Node module (3.8.11)
                                    #Look also at documentation for undertaker, vinyl


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


gulp [TASK...]                      #Run TASK... (def: 'default')
                                    #If a GULP.watch() is present, doesn't exit
--gulpfile FILE...                  #Def: ./gulpfile.js
--cwd DIR                           #$PWD used to search and launch gulpfile.js
--require FILE                      #Do a require(FILE) before reading gulpfile.js
--tasks[-simple]                    #Prints tasks first


node debug $(which gulp) TASK       #Debugging Gulp


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP.task                           #Defines a task with dependencies TASK2_ARR.
 ('TASK'[, 'TASK2'_ARR], FUNC())    #FUNC can be async by:
                                    #  - passing a callback FUNC2() as argument
                                    #  - returning a STREAM (wait for 'end' event)
                                    #  - returning a PROMISE (e.g. Q.defer().promise)

GULP.src('GPATH'[_ARR][, OBJ2])     #IOSTREAM is in ObjectMode:
 ->IOSTREAM                         #  - each data event emits a VINYL with the file|directory chosen by GPATH[_ARR]
                                    #GPATH[_ARR] uses glob-stream, OBJ2 being same with extra members:
                                    #  - buffer BOOL: if false (def: true), VINYL.contents is converted to STREAM when
                                    #    it is BUFFER, which allows buffering for large files. However, plugins need to
                                    #    handle STREAM then.
                                    #  - read BOOL: if true, set VINYL.contents to null (faster if content is not needed)
                                    #Usually IOSTREAM is piped into another similar IOSTREAM2 (ObjectMode on VINYL).
                                    #  - including GULP.src(...).pipe(GULP.src(...)) to add more files
                                    #Should only be used when commands are applied to a series of individual files
                                    #  - otherwise just use CLI spawning or Node command directly

GULP.dest(DIR|FUNC(VINYL)->DIR)
 ->IOSTREAM                         #IOSTREAM that writes all files|directories to DIR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           WATCHING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP.watch(GPATH[_ARR][, OBJ],      #Fires TASK_ARR|FUNC when GAZE(GPATH[_ARR]) emits events.
'TASK'_ARR|FUNC(ERROR, WATCHER))    #OBJ is GAZE OBJ.
                                    #OBJ2 has members type EVENT_STR and path STR

GULP-WATCH(GPATH[_ARR][, OBJ],     ##Version 1.0.7
FUNC(IOSTREAM))                    ##Same but:
                                   ##  - returns an IOSTREAM is same as return value of GULP.src().
                                   ##    OBJ also takes same OBJ2 members as GULP.src() and GULP.watch(), allowing it to
                                   ##    replace GULP.src()
                                   ##    This allows doing tasks on files that changed not all.
                                   ##     - To only target added|changed|deleted files, do:
                                   ##       .pipe(GULP-FILTER(function(VINYL){
                                   ##         return VINYL.event === "added|changed|deleted";
                                   ##       }))
                                   ##  - Must return IOSTREAM final stream to make FUNC() async (like GULP.task())
                                   ##  - Can do FUNC() for all GPATH, then only when changes happen with:
                                   ##      return GULP.src( GPATH )
                                   ##        .pipe( GULP-WATCH( GPATH, function( IOSTREAM ) {
                                   ##          return IOSTREAM.pipe(...);
                                   ##        } ) );
                                   ##  - Better output log.
                                   ##    Can also add OBJ.name which appears in the log as "NAME was FILE" was changed.
                                   ##  - Can also use OBJ.timeout NUM:
                                   ##     - Different from Gaze debounceDelay, which ignores events on same file after NUMms
                                   ##       first event on that file fired
                                   ##     - OBJ.timeout waits for all changes on GPATH for NUMms until firing FUNC()
                                   ##        - debounceDelay fires at first event, timeout waits
                                   ##        - debounceDelay works only on same file changes, timeout aims at not firing FUNC()
                                   ##          too many times when all files in GPATH are changed at once
                                   ##        - should be combined: low timeout (def: 200), higher debounceDelay (def: 500)
                                   ##  - Can call IOSTREAM.close(). Gets events end, ready (from Gaze), error
                                   ##  - Cannot use TASK_ARR, but can use GULP.start(TASK, FUNC())
