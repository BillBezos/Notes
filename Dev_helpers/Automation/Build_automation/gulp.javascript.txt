
        
   GULP  
        



ALTERNATIVES ==>                  #  - grunt: more declarative
                                  #  - gulp (prefered): more imperative. Use streams

VERSION ==>                       #Node module (4.0.0)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


gulp [TASK...]                    #Run TASK... (def: 'default')
                                  #If a GULP.watch() is present, doesn't exit
                                  #Uses gulp-cli package
--gulpfile FILE...                #Def: ./gulpfile.js
--cwd DIR                         #$PWD used to search and launch gulpfile.js
--require FILE                    #Do a require(FILE) before reading gulpfile.js
--tasks[-simple]                  #Prints tasks first


node debug $(which gulp) TASK     #Debugging Gulp


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TASKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP.Gulp                         #Inherits from Undertaker (see its doc)
GULP                              #Instance of GULP.Gulp

GULP.task('TASK', FUNC)
GULP.task(FUNC)
GULP.task('TASK')->FUNC2
GULP.series|parallel
 (TASK[_ARR],...)->FUNC2
GULP.tree([OPTS])->OBJ
GULP.lastRun(TASK[, NUM])
 ->DATE_NUM|undefined
GULP.on
 ('start|stop|error', FUNC(OBJ))  #Like UNDERTAKER.* (see its doc)

GULP.src('GLOB'[_ARR][, OPTS])
 ->IOSTREAM
GULP.dest('DIR'[(VINYL)][, OPTS])
 ->IOSTREAM
GULP.symlink('DIR'[(VINL)][,OPTS])
 ->IOSTREAM                       #Like VINYL-FS.* (see its doc)

GULP.watch('GLOB'[_ARR][, OPTS])
 ->IOSTREAM


GULP.watch(GPATH[_ARR][, OBJ],    #Fires TASK_ARR|FUNC when GAZE(GPATH[_ARR]) emits events.
'TASK'_ARR|FUNC(ERROR, WATCHER))  #OBJ is GAZE OBJ.
                                  #OBJ2 has members type EVENT_STR and path STR

GULP-WATCH(GPATH[_ARR][, OBJ],     ##Version 1.0.7
FUNC(IOSTREAM))                    ##Same but:
                                   ##  - returns an IOSTREAM is same as return value of GULP.src().
                                   ##    OBJ also takes same OBJ2 members as GULP.src() and GULP.watch(), allowing it to
                                   ##    replace GULP.src()
                                   ##    This allows doing tasks on files that changed not all.
                                   ##     - To only target added|changed|deleted files, do:
                                   ##       .pipe(GULP-FILTER(function(VINYL){
                                   ##         return VINYL.event === "added|changed|deleted";
                                   ##       }))
                                   ##  - Must return IOSTREAM final stream to make FUNC() async (like GULP.task())
                                   ##  - Can do FUNC() for all GPATH, then only when changes happen with:
                                   ##      return GULP.src( GPATH )
                                   ##        .pipe( GULP-WATCH( GPATH, function( IOSTREAM ) {
                                   ##          return IOSTREAM.pipe(...);
                                   ##        } ) );
                                   ##  - Better output log.
                                   ##    Can also add OBJ.name which appears in the log as "NAME was FILE" was changed.
                                   ##  - Can also use OBJ.timeout NUM:
                                   ##     - Different from Gaze debounceDelay, which ignores events on same file after NUMms
                                   ##       first event on that file fired
                                   ##     - OBJ.timeout waits for all changes on GPATH for NUMms until firing FUNC()
                                   ##        - debounceDelay fires at first event, timeout waits
                                   ##        - debounceDelay works only on same file changes, timeout aims at not firing FUNC()
                                   ##          too many times when all files in GPATH are changed at once
                                   ##        - should be combined: low timeout (def: 200), higher debounceDelay (def: 500)
                                   ##  - Can call IOSTREAM.close(). Gets events end, ready (from Gaze), error
                                   ##  - Cannot use TASK_ARR, but can use GULP.start(TASK, FUNC())
