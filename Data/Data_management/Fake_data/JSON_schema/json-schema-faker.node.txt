
                     
   JSON-SCHEMA-FAKER  
                     



VERSION ==>                       #0.5.0-rc15
                                  #Generates fake data based on JSON schema
                                  #Node/browser

JSF.resolve
 (JSON_SCHEMA[, OBJ_ARR][, 'DIR'])
 ->VAL                            #
                                  #Resolve JSON references with JSON-SCHEMA-REF-PARSER (see its doc)
                                  #  - can add JSON references targets OBJ_ARR: id 'NAME', ...
                                  #  - 'DIR' (def: process.cwd()) is root for relative references

GENERATION ==>                    #  - type:
                                  #     - if missing, guessed from sibling properties

JSF.option(OPTS)                  #
OPTS.maxItems                     #NUM. Used whether JSON schema has "maxItems" or not
OPTS.maxLength                    #Same for "maxLength"
OPTS.optionalsProbability         #NUM (def: 0). How likely non-required properties will generate a value
OPTS.alwaysFakeOptionals          #BOOL (def: false). Same as OPTS.optionalsProbablity 1
OPTS.random()->NUM                #Source of randomness (def: Math.random())
OPTS.failOnInvalidTypes           #BOOL (def: true). Throw on invalid "type"
                                  #If false, can set which value to generate with OPTS.defaultInvalidTypeProduct VAL
OPTS.failOnInvalidFormat          #BOOL (def: true). Throw on invalid "format"

JSF.format
 ('FORMAT',FUNC(JSON_SCHEMA)->VAL)#Custom JSON schema formats
JSF.format('FORMAT')->FUNC        #
JSF.format({ FORMAT: FUNC, ... })
JSF.format()->OBJ                 #Same but as OBJ

JSF.extend('PROP', FUNC()->OBJ)   #{ [x-]PROP: 'VARR' } will fire OBJ.VARR()
                                  #{ [x-]PROP: { VARR: VAL[_ARR] } } will fire OBJ.VARR(VAL,...)
                                  #Often used: faker.js, chance.js
