
                     
   JSON-SCHEMA-FAKER  
                     



VERSION ==>                       #0.5.0-rc15
                                  #Generates fake data based on JSON schema
                                  #Node/browser

JSF.resolve                       #Generate fake data
 (JSON_SCHEMA[, OBJ_ARR][, 'DIR'])#Resolves JSON references with JSON-SCHEMA-REF-PARSER.dereference('DIR') (see its doc)
 ->VAL                            #  - uses POPTS.dereference.circular 'ignore'
                                  #  - can add JSON references as 'NAME' using OBJ_ARR: id 'NAME', ...
                                  #  - 'DIR' (def: process.cwd()) is root for relative references
JSF(JSON_SCHEMA[, OBJ_ARR])->VAL  #Same but without calling JSON-SCHEMA-REF-PARSER
                                  #Can still use OBJ_ARR JSON references
                                  #Can use OPTS.ignoreMissingRefs BOOL (def: false)

JSF.option(OPTS)                  #
JSF.option('NAME')->VAL           #
JSF.option.getDefaults()->OBJ     #

GENERATION ==>                    #JSON_SCHEMA
                                  #  - recursed over
items|additionalItems|contains|properties|additionalProperties|patternProperties|propertyNames|dependencies|not|if|then|else
although many probably do not do desired effect???
                                  #  - compare with JSON schema spec???
                                  #  - reorganize this so it's not one giant list???
                                  #  - type:
                                  #     - if missing, guessed from sibling properties
                                  #     - if invalid, throws unless OPTS.failOnInvalidTypes false
                                  #        - in which case, must set which value to generate with OPTS.defaultInvalidTypeProduct VAL
                                  #     - several types (ARR): random pick
                                  #     - string: random latin words
                                  #  - default: used it OPTS.useDefaultValue true (def: false)
                                  #  - enum: random pick
                                  #  - [exclusive]minimum|maximum (def: -1e8, 1e8): random number between both
                                  #  - multipleOf
                                  #  - minLength|maxLength:
                                  #     - random number between both (def: 0, 140)
                                  #     - can set default with OPTS.minLength|maxLength
                                  #        - if both are present, take the largest|smallest one
                                  #  - pattern: use JSF.random.randexp()
                                  #  - format:
                                  #     - can add custom ones:
                                  #        - JSF.format('FORMAT',FUNC(JSON_SCHEMA)->VAL)
                                  #        - JSF.format('FORMAT')->FUNC
                                  #        - JSF.format({ FORMAT: FUNC, ... })
                                  #        - JSF.format()->OBJ
                                  #     - if not one below, throws unless OPTS.failOnInvalidFormat false
                                  #     - date-time, date, time: uses JSF.random.date()
                                  #     - ipv4: random numbers
                                  #     - regex: always '.+?'
                                  #     - email, hostname, ipv6, uri[-reference]: use RANDEXP on related regexps
                                  #  - items, additionalItems:
                                  #     - supports items ARR
                                  #  - minItems|maxItems:
                                  #     - random number between both (def: 1, 5)
                                  #        - if both OPTS.optionalsProbability and maxItems defined, use their product
                                  #     - can set default with OPTS.minItems|maxItems
                                  #        - if both are present, take the largest|smallest one
                                  #  - uniqueItems
                                  #  - properties
                                  #     - OPTS.ignoreProperties PROP_REGEXP|STR[()]_ARR (def: []): do not generate for those properties
                                  #        - if OPTS.fillProperties true (def), they do not count towards minProperties|maxProperties
                                  #  - additionalProperties:
                                  #     - key is random latin word
                                  #        - if OPTS.reuseProperties true (def: false), use existing properties names instead,
                                  #          with number as suffix
                                  #  - patternProperties:
                                  #     - generate prop name with RANDEXP
                                  #  - required
                                  #     - can use OPTS.optionalsProbability NUM (def: 0):
                                  #        - how likely non-required properties will generate a value
                                  #        - OPTS.alwaysFakeOptionals BOOL (def: false): same as OPTS.optionalsProbability 1
                                  #        - OPTS.requiredOnly BOOL (def: false): same as OPTS.optionalsProbability 0
                                  #  - minProperties|maxProperties
                                  #     - random number between both (def: number required props, number props)
                                  #  - anyOf|oneOf: random pick
                                  #  - allOf: deep merged (including array which are intersected)
                                  #  - not: inverse type|enum|[exclusive]minimum|maximum|minLength|maxLength|required
                                  #  - generate()->VAL: customize

OPTS.resolveJsonPath              #BOOL (def: false)???

JSF.extend('PROP', FUNC()->OBJ)   #{ [x-]PROP: 'VARR' } will fire OBJ.VARR()
                                  #{ [x-]PROP: { VARR: VAL[_ARR] } } will fire OBJ.VARR(VAL,...)
                                  #Often used: faker.js, chance.js

OPTS.random()->NUM                #Source of randomness (def: Math.random())

JSF.random.pick(ARR)->VAL         #Returns random element
JSF.random.shuffle(ARR)->ARR      #Returns random element
JSF.random.number([MIN][, MAX]
 [, DEF_MIN][, DEF_MAX][, BOOL])  #Returns NUM between MIN (def: DEF_MIN, def: -100) and MAX (def: DEF_MAX, def: 100)
 ->NUM                            #If BOOL true (def: false), returns integer.
JSF.random.date([STR])->DATE      #Returns random DATE between 1938 and now
                                  #If STR 'seconds|minutes|hours|days|weeks|months|years', returns number of ms of few ... ago
JSF.random.randexp(REGEXP[_STR])  #Returns random STR matching REGEXP
 ->STR                            #Uses Randexp.randexp() (see its doc):
                                  #  - REGEXP.max is OPTS.defaultRandExpMax (def: 10)
                                  #  - REGEXP.randInt() uses OPTS.random()
