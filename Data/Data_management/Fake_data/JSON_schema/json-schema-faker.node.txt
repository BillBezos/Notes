
                     
   JSON-SCHEMA-FAKER  
                     



VERSION ==>                       #0.5.0-rc15
                                  #Generates fake data based on JSON schema
                                  #Node/browser

JSF.resolve
 (JSON_SCHEMA[, OBJ_ARR][, 'DIR'])
 ->VAL                            #
                                  #Resolve JSON references with JSON-SCHEMA-REF-PARSER.dereference('DIR') (see its doc)
                                  #  - with POPTS.dereference.circular 'ignore'
                                  #  - can add JSON references as 'NAME' using OBJ_ARR: id 'NAME', ...
                                  #  - 'DIR' (def: process.cwd()) is root for relative references
JSF(JSON_SCHEMA[, OBJ_ARR])->VAL  #Same but without calling JSON-SCHEMA-REF-PARSER
                                  #Can still use OBJ_ARR JSON references
                                  #Can use OPTS.ignoreMissingRefs BOOL (def: false)

GENERATION ==>                    #JSON_SCHEMA:
                                  #  - type:
                                  #     - if missing, guessed from sibling properties
                                  #     - 'object':
                                  #        - remove id|$schema|allOf|anyOf|oneOf???
                                  #  - allOf:
                                  #     - deep merged (including array which are intersected)
                                  #  - anyOf|oneOf: pick a random one
                                  #  - generate()->VAL: customize

JSF.option(OPTS)                  #
JSF.option('NAME')->VAL           #
JSF.option.getDefaults()->OBJ     #

OPTS.maxItems                     #NUM. Used whether JSON schema has "maxItems" or not
OPTS.maxLength                    #Same for "maxLength"
OPTS.optionalsProbability         #NUM (def: 0). How likely non-required properties will generate a value
OPTS.alwaysFakeOptionals          #BOOL (def: false). Same as OPTS.optionalsProbablity 1
OPTS.failOnInvalidTypes           #BOOL (def: true). Throw on invalid "type"
                                  #If false, can set which value to generate with OPTS.defaultInvalidTypeProduct VAL
OPTS.failOnInvalidFormat          #BOOL (def: true). Throw on invalid "format"

OPTS.ignoreProperties             #'PROP'_ARR (def: [])???
OPTS.useDefaultValue              #BOOL (def: false)???
OPTS.requiredOnly                 #BOOL (def: false)???
OPTS.minItems                     #NUM (def: 0)???
OPTS.resolveJsonPath              #BOOL (def: false)???
OPTS.reuseProperties              #BOOL (def: false)???
OPTS.fillProperties               #BOOL (def: true)???

JSF.format
 ('FORMAT',FUNC(JSON_SCHEMA)->VAL)#Custom JSON schema formats
JSF.format('FORMAT')->FUNC        #
JSF.format({ FORMAT: FUNC, ... })
JSF.format()->OBJ                 #Same but as OBJ

JSF.extend('PROP', FUNC()->OBJ)   #{ [x-]PROP: 'VARR' } will fire OBJ.VARR()
                                  #{ [x-]PROP: { VARR: VAL[_ARR] } } will fire OBJ.VARR(VAL,...)
                                  #Often used: faker.js, chance.js

OPTS.random()->NUM                #Source of randomness (def: Math.random())

JSF.random.pick(ARR)->VAL         #Returns random element
JSF.random.shuffle(ARR)->ARR      #Returns random element
JSF.random.number([MIN][, MAX]
 [, DEF_MIN][, DEF_MAX][, BOOL])  #Returns NUM between MIN (def: DEF_MIN, def: -100) and MAX (def: DEF_MAX, def: 100)
 ->NUM                            #If BOOL true (def: false), returns integer.
JSF.random.date([STR])->DATE      #Returns random DATE between 1938 and now
                                  #If STR 'seconds|minutes|hours|days|weeks|months|years', returns number of ms of few ... ago
JSF.random.randexp(REGEXP[_STR])  #Returns random STR matching REGEXP
 ->STR                            #Uses Randexp.randexp() (see its doc):
                                  #  - REGEXP.max is OPTS.defaultRandExpMax (def: 10)
                                  #  - REGEXP.randInt() uses OPTS.random()
