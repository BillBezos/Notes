
         
   VINYL  
         



VERSION ==>                     #Node module (2.1.0)
                                #Abstraction of a file (virtual file) content and metadata.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


new Vinyl([OPTS])               #OPTS are setting VINYL.*
                                #Paths are normalized.

VINYL.path                      #Absolute 'PATH'
VINYL.relative                  #Relative 'PATH'
VINYL.base                      #'DIR' used for relative paths (def: VINYL.cwd)
VINYL.cwd                       #'DIR' (def: process.cwd())
VINYL.dirname|pathname|stem|    #Get|set VINYL.path
 extname                        #VINYL.stem is filename without extname
VINYL.history                   #'PATH'_ARR of all present|past VINYL.path

VINYL.contents                  #BUFFER|ISTREAM|null
VINYL.stat                      #FSSTAT|null
VINYL.symlink                   #'PATH'|null
                                #Must be manually set by the adapter (i.e. not deduced from VINYL.stat)
                                #This is set by ADAPTER-FS

Vinyl.isVinyl(VAL)->BOOL        #
Vinyl.isCustomProp('PROP')->BOOL#Whether it is a core VINYL.* property

VINYL.isBuffer|Stream|Null()
 ->BOOL                         #According to VINYL.contents
VINYL.isDirectory|isSymbolic()
 ->BOOL                         #According to VINYL.stat

VINYL.clone([OPTS])->VINYL2     #OPTS:
                                #  - deep BOOL (def: true)
                                #  - contents BOOL (def: true): if false, re-use BUFFER if contents is BUFFER
VINYL.inspect()
 ->'<File PATH CONTENT_SUMMARY>'#

EXTENDING VINYL ==>             #Should override:
                                #  - isCustomProp(): to return true for new properties, so they are not cloned by default
                                #  - clone(): to specify how to clone new properties


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           ADAPTERS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ADAPTER                         #Common interface for all adapters of VINYL
ADAPTER.src('FILES'[, OPTS])    #IOSTREAM in Object mode reading files, i.e. where each data event emits a VINYL
 ->IOSTREAM                     #Since is is an IOSTREAM, can be piped in as well, e.g. ADAPTER.src(...).pipe(ADAPTER.src(...))
ADAPTER.dest('DIR'[, OPTS])     #IOSTREAM in Object mode writing files
 ->IOSTREAM                     #Since it is an IOSTREAM, can be piped out as well, e.g. ADAPTER.src(...).pipe(ADAPTER.dest(...)).pipe(ADAPTER.dest(...))

VINYL-FS                       ##Vinyl adapter for the filesystem
                               ##Version 3.0.2
VINYL-FS.src                   ##OPTS:
 ('GLOB'[_ARR][, OPTS])        ##  - any passed to GLOB-STREAM (see its doc)
 ->IOSTREAM                    ##  - buffer BOOL: if true (def), sets full contents as BUFFER instead of STREAMing it
                               ##  - read BOOL:
                               ##     - if false (def: true), do not read files content
                               ##     - i.e. VINYL.contents will be null, and VINYL-FS.dest() will not do anything
                               ##     - faster when files content is not used, e.g. only deleting files
                               ##  - since DATE[_NUM]: filter files by mtime
                               ##  - removeBOM BOOL: if true (def), remove UTF-8 BOM
                               ##  - resolveSymlinks BOOL (def: true)
                               ##  - sourcemaps BOOL: if true (def: false), calls VINYL-SOURCEMAP.add(VINYL),
                               ##    i.e. adds VINYL.sourceMap
                               ##All OPTS can be a FUNC(VINYL)->VAL
VINYL-FS.dest                  ##OPTS:
 ('DIR'[(VINYL)][, OPTS])      ##  - cwd 'PATH' (def: process.cwd()): for relative 'DIR'
 ->IOSTREAM                    ##  - overwrite BOOL (def: true): if input path is same as output
                               ##  - append BOOL (def: false): append instead of overwriting
                               ##  - mode NUM (def: no change): sets FSSTAT.mode for non-directories
                               ##  - dirMode NUM (def: process mode): sets FSSTAT.mode for directories
                               ##  - relativeSymlinks BOOL: whether created symlinks should be absolute (false, def) or relative (true)
                               ##  - sourcemaps BOOL|'PATH':
                               ##     - if true (def: false), appends an inline source map using VINYL.sourceMap
                               ##     - if 'PATH', creates a source map file using VINYL.sourceMap
                               ##All OPTS can be a FUNC(VINYL)->VAL
                               ##If VINYL.symlink 'PATH' exists, a symlink will be created
VINYL-FS.symlink               ##Creates symlinks
 ('DIR'[(VINYL)][, OPTS])      ##OPTS:
 ->IOSTREAM                    ##  - cwd|overwrite|dirMode|relativeSymlinks: like VINYL-FS.dest()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMPATIBILITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BUFFER-TO-VINYL.file           ##Transforms BUFFER into VINYL with:
 (BUFFER[, 'PATH'])->VINYL     ##  - contents BUFFER
                               ##  - path 'PATH' (def: UUIDv4.EXT)
                               ##Version 1.1.0
BUFFER-TO-VINYL.stream         ##Same but as IOSTREAM containing a single VINYL
 (BUFFER[, 'PATH'])->IOSTREAM  ##Prefer GULP-FILE, more maintained

GULP-FILE                      ##Transforms BUFFER|STR into IOSTREAM containing a single VINYL
 ('PATH', BUFFER|STR[, OPTS])  ##If OPTS.src true (def: false), calls IOSTREAM.end() (to do if used as first stream)
 ->IOSTREAM                    ##Version 0.4.0
GULP-FILE(OBJ_ARR)             ##Same with OBJ: name, source

VINYL-BUFFER()->IOSTREAM       ##IOSTREAM that modifies VINYL.contents from STREAM|BUFFER to BUFFER
                               ##Good for plugins that do not support contents STREAM
                               ##Version 1.0.1

VINYL-SOURCE-STREAM            ##IOSTREAM that:
 (['PATH'][, 'BASEDIR'])       ##  - takes a normal ISTREAM as input
 ->IOSTREAM                    ##  - output a VINYL OSTREAM
                               ##     - containing a single VINYL with contents ISTREAM, filename 'PATH', base 'BASEDIR'
                               ##Node module (2.0.0)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MAPPING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VINYL-MAP(FUNC(BUFFER, 'PATH'))##IOSTREAM that modifies VINYL.contents
 ->IOSTREAM                    ##FUNC must return:
                               ##  - BUFFER|STR
                               ##  - undefined: "no modification"
                               ##Version 1.0.2


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FILTERING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-MATCH(VINYL, VAL[, OPTS]) ##Returns BOOL according to VAL:
 ->BOOL                        ##  - BOOL2[(VINYL)]
                               ##  - '*.EXT'
                               ##  - REGEXP: against VINYL.relative
                               ##  - 'GLOB'[_ARR]: against VINYL.relative, using MINIMATCH (with OPTS)
                               ##  - { isFile|isDirectory BOOL }
                               ##Version 1.0.3

GULP-IF(VAL, IOSTREAM2,        ##IOSTREAM that:
 IOSTREAM3[, OPTS])->IOSTREAM  ##  - takes a VINYL ISTREAM as input
                               ##  - pipe into either IOSTREAM2|IOSTREAM3 depending on each GULP-MATCH(VINYL, VAL[, OPTS])
                               ##Version 2.0.2

GULP-IGNORE[.include|exclude]  ##IOSTREAM that only keeps the VINYL [not] satisfying GULP-MATCH(VINYL, VAL[, OPTS])
 (VAL[, OPTS])->IOSTREAM       ##Version 2.0.2

GULP-FILTER                    ##IOSTREAM that only keeps the VINYL satisfying VAL, either:
 ('GLOB'[_ARR][, OPTS])        ##  - 'GLOB'[_ARR]: MULTIMATCH('PATH', 'GLOB'[_ARR], OPTS)
 ->IOSTREAM                    ##  - FUNC(VINYL)->BOOL
                               ##Version 5.1.0
IOSTREAM.restore               ##IOSTREAM2 that puts back the VINYLs that were excluded
                               ##Must set OPTS.restore true to be defined
                               ##If OPTS.passthrough false, is ISTREAM2, not IOSTREAM2

GULP-CHANGED                   ##Excludes VINYL that have been modified after DIR files (usually same DIR as GULP.dest(DIR))
 ('DIR'[(VINYL)][, OPTS])      ##OPTS:
 ->IOSTREAM                    ##  - transformPath('PATH')->'PATH': temporarily change VINYL.path, for matching purpose
                               ##  - extension '.EXT': same but only with extension
                               ##  - cwd 'DIR' (def: process.cwd())
                               ##  - hasChanged FUNC(IOSTREAM, VINYL, 'PATH')->[PROMISE_]BOOL: customize what 'has been modified' means
                               ##     - GULP-CHANGED.compareLastModifiedTime (def): compare mtime
                               ##     - GULP-CHANGED.compareContents (def): compare contents
                               ##Version 3.2.0

GULP-NEWER ==>                 ##Similar to GULP-CHANGED (prefered)

GULP-CACHED('NAME'[, OPTS])    ##Caches each VINYL in-memory. Re-use them on later calls unless they have been modified since (using mtime).
 ->IOSTREAM                    ##Prefer GULP.lastRun() which achieves same goal


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        ERROR HANDLING         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PLUGIN-ERROR([OPTS])->ERROR    ##Type of Error to throw in plugins
                               ##Only difference is that it has a nice standardized ERROR.toString()
                               ##OPTS:
                               ##  - plugin 'PLUGIN'
                               ##  - message 'ERROR' or error ERROR
                               ##  - name STR (def: 'Error')
                               ##  - showStack BOOL (def: false)
                               ##  - fileName STR
                               ##  - lineNumber NUM
                               ##  - stack STR (def: current one)
                               ##  - any other will be printed under 'Details:', except if showProperties BOOL false
                               ##Version 1.0.1
PLUGIN-ERROR('PLUGIN'
 [, 'ERROR'|ERROR][, OPTS])    ##Same with OPTS.plugin|message|error

PROBLEM WITH ERRORS IN STREAMS ##When one STREAM errors:
 ==>                           ##  - the STREAM it is piped into are not errored
                               ##     - i.e. the final STREAM will look successful
                               ##     - with Gulp, this means the task will show as successful,
                               ##       and the next tasks will continue
                               ##  - the STREAM it is piped into are not closed, i.e. they remain open
                               ##  - the error is not handled, i.e. it will throw an uncaught exception
                               ##     - with Gulp, this stops GULP.watch()
                               ##Solutions:
                               ##  - returning STREAM just seems to work
                               ##     - but does not work if function is async
                               ##  - pump()
                               ##     - with Gulp: return pump(GULP.src(...), ..., GULP.dest(...)) in a sync function (since it returns STREAM)
                               ##  - GULP-PLUMBER: does not work with Gulp4

PUMP(STREAM[_ARR]...,          ##Like STREAM.pipe(STREAM2)... except:
 FUNC(ERROR))->STREAM          ##  - if one STREAM errors
                               ##  - then other STREAM are closed (with STREAM.close|abort|destroy())

GULP-PLUMBER([OPTS])->IOSTREAM ##Creates 'error' event handler OPTS.errorHandler(ERROR) (def: prints log)
                               ##Otherwise Gulp process might stop on error, even if in watch mode
                               ##Also prints prettier error logs
                               ##Version 1.2.0
GULP-PLUMBER.stop()            ##


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALTERNATIVES ==>               ##  - fancy-log: general logging
                               ##  - gulp-debug: better for debugging individual files
                               ##  - gulp-count: better for printing total number of files

FANCY-LOG[.info|warn|error|dir]##Same as console.*(...) but prefixed with timestamp
 (...)                         ##Should be used for plugins
                               ##Version 1.3.2

GULP-DEBUG([OPTS])->IOSTREAM   ##For each VINYL (unless OPTS.showFiles false):
                               ##  - prints cwd, base, path and (if OPTS.verbose true) stat
                               ##     - path is absolute path if OPTS.minimal false
                               ##  - prepends each with OPTS.title (def: 'gulp-debug:')
                               ##At the end:
                               ##  - prints total number of files
                               ##Version 3.2.0

GULP-COUNT(['MESSAGE', ][OPTS])##For each VINYL (if OPTS.logFiles true|'TEMPLATE'):
 ->IOSTREAM                    ##  - prints VINYL.path
                               ##  - 'TEMPLATE' with OBJ: path (relative), file (absolute)
                               ##  - can use OPTS.cwd 'DIR'
                               ##At the end:
                               ##  - prints OPTS.message 'TEMPLATE'  (def: '<%= files %>')
                               ##  - replaces '##' with total number of files
                               ##  - template OBJ: files ('NUM files')
                               ##  - if no files, prints according to OPTS.logEmpty BOOL|'TEMPLATE':
                               ##     - false (def): nothing
                               ##     - true (def): '0 files'
                               ##     - 'TEMPLATE' (def): '0 files'
                               ##TEMPLATEs are Lodash templates.
                               ##OPTS:
                               ##  - title STR (def: null): prepended
                               ##  - logger FUNC(STR) (def: console.log)
                               ##Version 1.0.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             SHELL             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GENERAL ==>                    ##Just use Node.js CHILD_PROCESS.*() if the shell command does not need to be fired for each file.

ALTERNATIVES ==>               ##  - gulp-exec: prefered when need command return value
                               ##  - gulp-spawn: prefered when does not need command return value


GULP-EXEC('SHELL'[, OPTS])     ##For each VINYL:
 ->IOSTREAM                    ##  - fires SHELL command with CHILD_PROCESS.exec('SHELL', OPTS)
                               ##  - stores result in VINYL.exec.err ERROR and VINYL.exec.stdout|stderr STR (trimmed)
                               ##  - 'SHELL' is a Lodash template with data: options OPTS, file 'PATH'
                               ##./node_modules/.bin is added to PATH during execution
                               ##OPTS:
                               ##  - pipeStdout BOOL (def: false):
                               ##     - replaces VINYL.contents by command's stdout
                               ##     - VINYL.exec.contents will contain previous contents
                               ##  - continueOnError BOOL: if false (def), throw error on command error
                               ##Version 3.0.1
GULP-EXEC.reporter([OPTS])
 ->IOSTREAM                    ##Prints VINYL.exec.err|stdout|stderr on console


GULP-SHELL                     ##For each VINYL:
 ('SHELL'[_ARR][, OPTS])       ##  - fires SHELL commands with CHILD_PROCESS.spawn()
 ->IOSTREAM                    ##  - does not store result anywhere
                               ##OPTS:
                               ##  - env|shell|cwd (def: process.env|true|process.cwd()): passed to CHILD_PROCESS.spawn()
                               ##  - quiet BOOL (def: false): passed to CHILD_PROCESS.spawn() stdio 'ignore|inherit'
                               ##  - verbose BOOL (def: false): prints command before executing it
                               ##  - ignoreErrors BOOL:
                               ##     - if false (def), throw error on command error
                               ##     - can use OPTS.errorMessage 'ERROR' (def: 'Command `<%= command %>` failed with exit code <%= error.code %>')
                               ##Templates:
                               ##  - can be used by 'SHELL' and OPTS.cwd|errorMessage
                               ##  - are Lodash templates
                               ##  - with data: OPTS.templateData and file 'PATH'
                               ##./node_modules/.bin is added to PATH during execution
                               ##Version 0.6.5
GULP-SHELL.task
 ('SHELL'[_ARR][, OPTS])
 ->FUNC(FUNC2([ERROR]))        ##Same but only once (as opposed to as an IOSTREAM for each VINYL)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-DATA                      ##Sets VINYL.data = VAL.
 (FUNC(VINYL[,FUNC2(ERR, VAL)])##Is a convention for passing information between plugins
 ->[PROMISE_]VAL)->IOSTREAM    ##Version 1.3.1
