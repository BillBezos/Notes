
         
   BABEL  
         



VERSION ==>                       #7.1.6

GOAL ==>                          #JavaScript source code transformation
                                  #See JavaScript documentation for support (with/without polyfill)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RUNTIMES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNTIMES ==>                      #Polyfills + ponyfills:
                                  #  - 'core-js': features that can be polyfilled
                                  #  - 'regenerator-runtime/runtime': generators (also used by async functions)
                                  #Ponyfills only:
                                  #  - '@babel/runtime': features that cannot be polyfilled (i.e. syntax-based) + regenerator-runtime
                                  #  - '@babel/runtime-corejs2': @babel/runtime + core-js
                                  #     - does not include instance methods (e.g. STR.includes())

@babel/polyfill                   #Polyfills core-js + regenerator-runtime:
                                  #  - patches global|built-in objects run-time
                                  #  - should be required in code and loaded first
                                  #Should prefer loading each individual polyfill:
                                  #  - done by preset-env useBuiltIns 'usage' (see below)

@babel/plugin-transform-runtime   #Add ponyfills import statements.
                                  #PLUGIN_OPTS:
                                  #  - helpers BOOL (def: true):
                                  #     - injects @babel/runtime imports
                                  #     - without it Babel duplicates code
                                  #  - regenerator BOOL (def: true): same for regenerator-runtime
                                  #  - corejs VERSION_NUM (e.g. 2) (def: false): same for core-js
                                  #  - useESModules BOOL (def: false): produce ES modules in output
                                  #Must still install production dependency:
                                  #  - if corejs false: @babel/runtime
                                  #  - otherwise: @babel/runtime-corejs2
                                  #Even if PLUGIN_OPTS.corejs false, must still require core-js in code for instance methods:
                                  #  - done by preset-env useBuiltIns 'usage|entry' (see below)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CORE-JS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                       #3.0.0-beta.3

CORE-JS 2 ==>                     #Babel currenly uses core-js 2. Differences:
                                  #  - "features" -> "fn"
                                  #  - no core-js-pure, i.e. not real ponyfills

BABEL ==>                         #@babel/plugin-transform-runtime with PLUGIN_OPTS.corejs 2:
                                  #  - injects '@babel/runtime-corejs2/core-js/TYPE/FEATURE'
                                  #     - same as 'core-js/features/TYPE/FEATURE'
                                  #     - not for instance methods
                                  #  - i.e. since still polyfills, not very useful compared to @babel/preset-env 'usage'
                                  #@babel/preset-env:
                                  #  - also injects 'core-js/modules/NAME' for instance methods

require('core-js')                #All polyfills

require('core-js/modules/NAME')   #Single polyfill
require('core-js-pure/features/   #Returns ponyfill
 TYPE[virtual/]FEATURE')          #For instance methods:
                                  #  - if virtual, must bind this
                                  #  - otherwise must pass this as first arg
require('core-js/features/')
 TYPE[virtual/]FEATURE')          #Same as doing both above


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


MATCH                             #Either:
                                  #  - 'GLOB'
                                  #  - REGEXP
                                  #  - FUNC('FILENAME'|null, { callee.name STR, envName STR })->BOOL

CONF                              #Can be:
                                  #  - BABEL-CORE.transform() OBJ
                                  #  - babel CLI flags
                                  #  - BABEL_ROOT/babel.config.js OBJ[(CONF_API)]
                                  #     - or --config-file|CONF.configFile PATH
                                  #  - CURRENT_DIR/.babelrc.js OBJ[(CONF_API)]
                                  #  - CURRENT_DIR/.babelrc JSON5
                                  #  - CURRENT_DIR/package.json PACKAGE.babel OBJ
BABEL_ROOT                        #Starts with CONF.root
                                  #Then uses --root-mode|CONF.rootMode:
                                  #  - 'root' (def): keep as is
                                  #  - 'upward[-optional]': look up [and throw error if cannot find]
CURRENT_DIR                       #Searched in same directory as processed file (CONF.filename) and upwards
                                  #If several found in upward path, merge each of them as a sub-CONF.
                                  #Only used if processed file is child of CONF.babelrcRoots BOOL|MATCH[_ARR]:
                                  #  - def: CONF.root (def: CONF.cwd)
                                  #Can be disabled with --no-babelrc|CONF.babelrc false (def: true)

BABEL-CORE.loadOptions(CONF)->CONF#Normalize CONF (for caching purpose)
BABEL-CORE.loadPartialConfig(CONF)#Same but also take into config files and returns OBJ:
 ->OBJ                            #  - options CONF
                                  #  - babelignore|babelrc|config 'PATH'|undefined
                                  #  - hasFilesystemConfig()->BOOL: whether there are some config files

CONF_API.version                  #Babel version
CONF_API.assertVersion(RANGE)     #
CONF_API.cache.TYPE(...)          #How to cache CONF:
                                  #  - forever()
                                  #  - never(): called for each file
                                  #  - using(FUNC()->STR): use STR as key for this file
                                  #  - invalidate(FUNC()->STR): use STR as key for all files

CONF.extends                      #'MODULE|PATH'. Sub-CONF to merge with lower priority
CONF.overrides                    #CONF_ARR. Sub-CONFs to merge with higher priority

CONF.include|test                 #MATCH[_ARR]. Skip current sub-CONF if matches
CONF.exclude                      #Inverse
--only|ignore
CONF.only|ignore                  #Like CONF.include|exclude except applies to all sub-CONFs not only current one
.babelignore                      #Like CONF.only|ignore. Same syntax as .gitignore
-x|--extensions                   #'.EXT',... (def: '.es6|js|es|jsx|mjs').  Only input files with those.
--keep-file-extensions            #

--env-name                        #'VAR'
CONF.envName                      #Merges CONF.env.VAR.* to CONF.*, allowing environment-specific configuration
                                  #Def: ENVVAR BABEL_ENV, ENVVAR NODE_ENV or 'development'
CONF_API.env()->'ENVNAME'         #
CONF_API.env('ENVNAM'[_ARR])->BOOL#

CONF.cwd                          #Def: process.cwd()
-f|--filename
CONF.filename                     #'FILE' name being compiled
CONF.filenameRelative             #'PATH' being compiled (def: CONF.cwd + CONF.filename)

CONF.caller                       #OBJ metadata passed to lower-level utilities
                                  #Only available properties at the moment:
                                  #  - supportsStaticESM BOOL (def: false): produce ES modules in output
CONF_API.caller(FUNC(CALLER))     #

--no-highlight-code
CONF.highlightCode                #BOOL (def: true): use colors in error messages

CONF.parserOpts                   #OPTS to pass to @babel/parser
CONF.generatorOpts                #OPTS to pass to @babel/generator
CONF.wrapPluginVisitorMethod      #Wrap parser visitor method (see online doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MINIFY             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--auxiliary-comment-before|after
CONF.auxiliaryCommentBeforeAfter  #STR. Comment added before any file, e.g. 'istanbul ignore next'

--no-comments                     #BOOL (def: true). If false, remove comments
CONF.comments                     #Unless CONF.minified true, @license|@preserve comments are always kept
CONF.shouldPrintComment(COMMENT)
 ->BOOL                           #Same
--compact                         #BOOL or 'auto' (def) (i.e. true if input >500KiB)
CONF.compact                      #Minify whitespaces
--minified                        #BOOL (def: false).
CONF.minified                     #Minify whitespaces, semi-colons, parenthesis, literals.
--retain-lines
CONF.retainLines                  #BOOL (def: false). Try to retain tokens on the same lines


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          SOURCE MAPS          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--input-source-map                #SOURCE_MAP, PATH to it or true (def) (check //# sourceMappingURL)
CONF.inputSourceMap               #Source maps from input files
-s|--source-maps                  #Whether|how to produce source maps for output:
CONF.sourceMaps                   #  - true (def): as separate file
                                  #  - 'inline': inline source map
                                  #  - 'both'
--source-file-name
CONF.sourceFileName               #'SOURCE_PATH'. Source map 'sources[0]' field (def: CONF.filename)
--source-root
CONF.sourceRoot                   #'DIR'. Source map 'sourceRoot' field
--source-map-target
CONF.sourceMapTarget              #'COMPILED_FILENAME'. Source map 'file' field.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@babel/cli                        #babel CLI

babel [FILE|DIR]                  #Def: stdin
--out-file FILE2                  #Output to single bundled file (def: stdout)
--out-dir DIR2                    #
--relative                        #Make --out-dir relative to input FILE|DIR

--delete-dir-on-start             #rm -r --out-dir before starting

-D|--copy-files                   #Copy files that cannot be compiled
--include-dotfiles                #Include dotfiles with --copy-files

--watch                           #
--skip-initial-build              #With --watch, do not build before watching


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@babel/core                       #As Node module
                                  #Is a peerDependency for all other packages, i.e. must be installed as a devDependency

BABEL-CORE.transformAsync         #Parse + transform.
 ('CODE'[, CONF])->PROMISE_OBJ    #OBJ:
                                  #  - code STR2 (unless CONF.code false)
                                  #  - map STR3
                                  #  - ast (unless CONF.ast false)
BABEL-CORE.transformFileAsync
 ('PATH'[, CONF])->PROMISE_OBJ    #Same with a file
BABEL-CORE.transformFromAstAsync
 (NODE, 'CODE'[, CONF])
 ->PROMISE_OBJ                    #Same with AST NODE

BABEL-CORE.parse('CODE'[, CONF])
 ->NODE                           #Like @babel/parse except also take into account CONF, e.g. PLUGINs and source maps

BABEL-CORE.transform[File|FromAst]
 |parse(..., FUNC(ERROR, VAL))    #Same but with async callback
BABEL-CORE.transform
 [File|FromAst]Sync|parse(...)
 ->VAL                            #Same but with sync


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOOKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require("babel/register")[(CONF)] #Patch require() so it uses Babel on *.es6|es|jsx|js|mjs
                                  #Should not be used in library, as it will patch require() for other libraries too.
                                  #CONF.ignore defaults to 'node_modules/**'
                                  #For dev purpose only
ENVVAR BABEL_DISABLE_CACHE=1
CONF.cache                        #BOOL (def: true)
ENVVAR BABEL_CACHE_PATH=DIR       #Def: /tmp

@babel/node
babel-node [--BABEL-OPT]          #Same as Node REPL, but compiling ES6 first.
 [-- --NODE-OPT ...]              #For dev purpose only


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            USAGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GULP-BABEL([CONF])                #Version 8.0.0
                                  #CONF also:
                                  #  - filename[Relative]|sourceFileName not needed
                                  #  - sourcemaps: need to use SOURCEMAPS.init|write() before|after

grunt-babel                       #Grunt plugin (5.0.1)
                                  #  - TASK "babel"
                                  #  - TARGET src, dest
                                  #  - options OPT

requirejs-babel                   #Version 0.0.6
                                  #Plugin adding "es6!FILE"
                                  #Must use CONFVAR paths.es6 PATH_TO_ES6 and paths.babel PATH_TO_BABEL

babelify[.configure(OPT)]         #Browserify transform (6.1.2)

MOCHA ==>                         #Can use --compilers js:babel/register

karma-babel-preprocessor          #Version 5.2.1
                                  #PLUGIN "babel", CONFIGVAR babelPreprocessor OBJ:
                                  #  - options OPT: same as above
                                  #  - [source]filename(FILE)->STR

BABEL-CONNECT(OBJ2)               #Express MDW (6.0.1) that compile static assets. OBJ2:
                                  #  - options OPT: same as above
                                  #  - src|dest DIR
                                  #  - ignore DIR

JADE-BABEL([OPT])                 #Jade filter (5.0.0), used as :babel


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            MODULES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--source-type                     #Modules syntax in output
CONF.sourceType                   #Among:
                                  #  - 'module' (def):
                                  #     - allows CommonJS or ES modules as input, and keep them
                                  #     - transform plugins produce ES modules as output
                                  #        - can be further processed by @babel/plugin-transform-modules-*
                                  #     - imply strict mode
                                  #  - 'script':
                                  #     - allows only CommonJS as input, and keep it
                                  #     - transform plugins produce CommonJS as output
                                  #        - cannot be further processed by @babel/plugin-transform-modules-*
                                  #     - does not imply strict mode
                                  #  - 'unambiguous':
                                  #     - use 'module' if there are import|export statements, 'script' otherwise
                                  #     - i.e. does not work with files which do not require nor export anything

@babel/plugin-transform-modules-* #Modules syntax in output
modules-commonjs                  #PLUGIN_OPTS:
                                  #  - strictMode BOOL (def: true): use @babel/plugin-transform-strict-mode
                                  #  - lazy: load imports lazily among:
                                  #     - false (def)
                                  #     - true: for require('MODULE') but not for require('PATH')
                                  #     - 'PATH'_ARR
                                  #     - FUNC('PATH')->BOOL
                                  #  - strict BOOL (def: false): do not add EXPORT.__esModule true
                                  #  - noInterop BOOL (def: false): do not check IMPORT__esModule
                                  #  - loose BOOL (def: false): do not make EXPORT.__esModule non-configurable|writable
modules-amd                       #Same PLUGIN_OPTS  as module-commonjs
modules-umd                       #PLUGIN_OPTS:
                                  #  - globals.MODULE|PATH 'VAR': global variable names (def: camelCase of basename(MODULE|PATH))
                                  #  - exactGlobals BOOL (def: true): use MODULE|PATH instead of basename(MODULE|PATH)
modules-systemjs                  #

AMD/UMD/SYSTEMJS ==>              #Following are for amd|umd|systemjs
-M|--module-id
CONF.moduleId                     #MODULE. Custom module name
CONF.getModuleId('MODULE')->MODULE#Custom module name
--module-root
CONF.moduleRoot                   #STR. Prefixes module name.
CONF.modulesIds                   #BOOL (def: false): if true, add module names in definitions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRESETS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--presets PRESET,...
CONF.presets                      #PRESET_ARR
PRESET                            #Same syntax as PLUGIN, except 'plugin' is 'preset' instead
                                  #Sets of plugins or other presets
                                  #Module that exports FUNC(PRESET_OPTS)->OBJ:
                                  #  - plugins PLUGIN_ARR
                                  #  - presets PRESET_ARR (first has priority)

@babel/preset-env                 #Preset adding plugins based on browserslist
                                  #Does not include: stage-3|2|1|0, Flow, React, TypeScript
                                  #PLUGIN_OPT:
                                  #  - targets ALL_BROWSERS (see browserslist doc)
                                  #     - def: ES<=2017
                                  #  - configPath 'DIR': browserslist's CONF.path
                                  #  - ignoreBrowsersListConfig BOOL (def: false): ignore BROWSERFILE
                                  #  - useBuiltIns:
                                  #     - 'entry': replace 'import @babel/polyfill' by imports for regenerator-runtime + each individual core-js feature
                                  #     - 'usage':
                                  #        - add imports for regenerator-runtime + individual core-js features, but only ones used, and in each file
                                  #        - code should not use 'import @babel/polyfill'
                                  #     - false (def)
                                  #  - forceAllTransforms BOOL (def: false): force using all transforms, regardless of "targets"
                                  #  - include|exclude PLUGIN_STR|REGEXP_ARR
                                  #  - shippedProposals BOOL (def: false): include stage-* features already implemented in browsers
                                  #  - spec|loose BOOL (def: false): always use PLUGIN_OPT.spec|loose
                                  #  - modules 'amd|umd|systemjs|commonjs|cjs'|false (def: 'commonjs'): use @babel/plugin-transform-*
                                  #  - debug true: prints which plugins will be used

@babel/preset-flow                #'transform-flow-strip-types'

@babel/preset-react               #'syntax-jsx', 'transform-react-jsx', 'transform-react-display-name'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PLUGINS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--plugins PRESET,...
CONF.plugins                      #PLUGIN_ARR
PLUGIN_REF                        #Either:
                                  #  - 'MODULE|PATH'
                                  #  - require('MODULE|PATH') value
                                  #'MODULE' shorthands:
                                  #  - '[@SCOPE/]babel-plugin-NAME' -> 'NAME'
                                  #  - '@babel/plugin-NAME' -> '@babel/NAME'
                                  #  - '@SCOPE/babel-plugin' -> '@SCOPE'
                                  #PLUGIN_REF construction can be cached using BABEL-CORE.createConfigItem() (see online doc)
PLUGIN                            #Either:
                                  #  - PLUGIN_REF
                                  #  - [PLUGIN_REF[, PLUGIN_OPTS[, 'NAME']]]
                                  #Single transformation
                                  #If PLUGIN_OPTS is false, disables plugin
                                  #Order: CONF.plugins (in array order) before CONF.presets (in reverse array order)

PLUGIN_OPT.spec                   #BOOL (def: false)
                                  #Use slower but more spec-compliant transformations
                                  #Common to many PLUGINs.
PLUGIN_OPT.loose                  #BOOL (def: false)
                                  #Use faster but less spec-compliant transformations
                                  #Common to many PLUGINs.

@babel/plugin-TYPE-*              #Babel core plugins. TYPE:
                                  #  - 'syntax':
                                  #     - change parsing, but does not transform
                                  #     - automatically included by transform PLUGINs
                                  #  - 'transform'
                                  #  - 'proposal': stage-3|2|1|0
                                  #All the following packages names are actually prepended with '@babel/plugin-'

ES3 ==>                           #
transform-member-expression-
 literals                         #VAR['RESERVED_WORD']
transform-property-literals       #{ "RESERVED_WORD" }
transform-reserved-words          #const RESERVED_WORD

ES5 ==>                           #
transform-property-mutators       # { get|set VAR }
transform-instanceof              #instanceof
transform-jscript                 #IE-specific quirks

ES2015 ==>                        #
transform-arrow-functions         #() => {}
transform-block-scoped-functions  #Non-top-level function declaration
transform-block-scoping           #Non-top-level declaration
transform-classes                 #CLASS
transform-computed-properties     #{ [EXPR] }
transform-destructuring           #OBJ|ARR destructuring
transform-duplicate-keys          #OBJ duplicate keys
transform-for-of                  #for of
transform-function-name           #Add proper FUNC.name
transform-literals                #0b... 0o... \u...
transform-new-target              #new.target
transform-object-super            #super
transform-parameters              #Rest params + default param + destructuring params
transform-shorthand-properties    #{ PROP }
transform-spread                  #Array spread
transform-sticky-regex            #/REGEX/y
transform-template-literals       #`...`
transform-typeof-symbol           #typeof SYM
transform-unicode-regex           #/REGEX/u
transform-object-assign           #Object.assign()
transform-proto-to-assign         #OBJ.__proto__
                                  #Does not work when OBJ.PROP is assigned (as opposed to OBJ.__proto__.PROP)
transform-object-set-prototype-   #Object.setPrototypeOf()
 of-to-assign                     #Same restrictions as OBJ.__proto__
transform-strict-mode             #'use strict'

ES2016 ==>                        #
transform-exponentiation-operator #**

ES2017 ==>                        #
transform-async-to-generator      #async FUNC

ES2018 ==>                        #
transform-regenerator             #FUNC*
syntax-async-generators
proposal-async-generator-
 functions                        #async FUNC*
transform-dotall-regex            #/REGEXP/s
syntax-object-rest-spread
proposal-object-rest-spread       #{ ...OBJ }
syntax-optional-catch-binding
proposal-optional-catch-binding   #try {} catch {}
proposal-unicode-property-regex   #\p{...}
syntax-json-strings
proposal-json-strings             #U+2028|2029 allowed in STR

STAGE 3 ==>                       #
syntax-class-properties
proposal-class-properties         #class { [static] VAR = VAL }
syntax-bigint                     #NUMn
syntax-dynamic-import             #import(...)
syntax-import-meta                #import.meta

STAGE 2 ==>                       #
syntax-decorators
proposal-decorators               #@DECORATOR
syntax-function-sent
proposal-function-sent            #FUNC.sent
syntax-numeric-separator
proposal-numeric-separator        #NNN_NNN_NNN
syntax-throw-expressions
proposal-throw-expressions        #throw VAL as EXPR

STAGE 1 ==>                       #
syntax-do-expressions
proposal-do-expressions           #do { ... }
syntax-export-default-from
proposal-export-default-from      #export DEFAULT_VAL from 'MDL'
syntax-export-namespace-from
proposal-export-namespace-from    #export * as VAR2 from 'MDL'
syntax-logical-assignment-
 operators
proposal-logical-assignment
 -operators                       #||= &&=
syntax-nullish-coalescing-
 operator
proposal-nullish-coalescing
 -operator                        #??
syntax-optional-chaining
proposal-optional-chaining        #OBJ?.PROP
syntax-pipeline-operator
proposal-pipeline-operator        #VAL |> FUNC

STAGE 0 ==>                       #
syntax-function-bind
proposal-function-bind            #OBJ::FUNC

FLOW ==>                          #See flow doc

TYPESCRIPT ==>                    #See TypeScript doc

JSX ==>                           #See JSX doc


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       CORE-JS FEATURES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NAMES ==>                         #  - core-js 2 names, then core-js 3 names are written
                                  #  - only polyfills names are documented:
                                  #     - i.e. need to look up online doc to find ponyfills names

MISSING FEATURES ==>              #  - Proxy
                                  #  - INTL
                                  #  - STR.normalize()

@babel/polyfill: no stage-* proposals

ES3 ==>                           #
es.array.concat                   #
es.array.splice                   #

ES2015 ==>                        #
es6.typed.array-buffer
es.array-buffer.constructor       #
es6.typed.array-buffer
es.array-buffer.is-view           #
es6.typed.array-buffer
es.array-buffer.slice             #
es6.array.copy-within
es.array.copy-within              #
es6.array.every
es.array.every                    #
es6.array.fill
es.array.fill                     #
es6.array.filter
es.array.filter                   #
es6.array.find
es.array.find                     #
es6.array.find-index
es.array.find-index               #
es6.array.for-each
es.array.for-each                 #
es6.array.from
es.array.from                     #
es6.array.index-of
es.array.index-of                 #
es6.array.is-array
es.array.is-array                 #
es6.array.iterator
es.array.iterator                 #
es6.array.join
es.array.join                     #
es6.array.last-index-of
es.array.last-index-of            #
es6.array.map
es.array.map                      #
es6.array.of
es.array.of                       #
es6.array.reduce
es.array.reduce                   #
es6.array.reduce-right
es.array.reduce-right             #
es6.array.slice
es.array.slice                    #
es6.array.some
es.array.some                     #
es6.array.sort
es.array.sort                     #
es6.array.species
es.array.species                  #
es6.typed.data-view
es.data-view                      #
es6.date.now
es.date.now                       #
es6.date.to-iso-string
es.date.to-iso-string             #
es6.date.to-json
es.date.to-json                   #
es6.date.to-primitive
es.date.to-primitive              #
es6.date.to-string
es.date.to-string                 #
es6.function.bind
es.function.bind                  #
es6.function.has-instance
es.function.has-instance          #
es6.function.name
es.function.name                  #
es6.map
es.map                            #
es6.math.acosh
es.math.acosh                     #
es6.math.asinh
es.math.asinh                     #
es6.math.atanh
es.math.atanh                     #
es6.math.cbrt
es.math.cbrt                      #
es6.math.clz32
es.math.clz32                     #
es6.math.cosh
es.math.cosh                      #
es6.math.expm1
es.math.expm1                     #
es6.math.fround
es.math.fround                    #
es6.math.hypot
es.math.hypot                     #
es6.math.imul
es.math.imul                      #
es6.math.log10
es.math.log10                     #
es6.math.log1p
es.math.log1p                     #
es6.math.log2
es.math.log2                      #
es6.math.sign
es.math.sign                      #
es6.math.sinh
es.math.sinh                      #
es6.math.tanh
es.math.tanh                      #
es6.symbol
es.math.to-string-tag             #
es6.math.trunc
es.math.trunc                     #
es6.number.constructor
es.number.constructor             #
es6.number.epsilon
es.number.epsilon                 #
es6.number.is-finite
es.number.is-finite               #
es6.number.is-integer
es.number.is-integer              #
es6.number.is-nan
es.number.is-nan                  #
es6.number.is-safe-integer
es.number.is-safe-integer         #
es6.number.max-safe-integer
es.number.max-safe-integer        #
es6.number.min-safe-integer
es.number.min-safe-integer        #
es6.number.parse-float
es.number.parse-float             #
es6.number.parse-int
es.number.parse-int               #
es6.number.to-fixed
es.number.to-fixed                #
es6.number.to-precision
es.number.to-precision            #
es6.object.assign
es.object.assign                  #
es6.object.create
es.object.create                  #
es6.object.define-properties
es.object.define-properties       #
es6.object.define-property
es.object.define-property         #
es6.object.freeze
es.object.freeze                  #
es6.object.get-own-property-
 descriptor
es.object.get-own-property-
 descriptor                       #
es6.object.get-own-property-names
es.object.get-own-property-names  #
es6.object.get-prototype-of
es.object.get-prototype-of        #
es6.object.is
es.object.is                      #
es6.object.is-extensible
es.object.is-extensible           #
es6.object.is-frozen
es.object.is-frozen               #
es6.object.is-sealed
es.object.is-sealed               #
es6.object.keys
es.object.keys                    #
es6.object.prevent-extensions
es.object.prevent-extensions      #
es6.object.seal
es.object.seal                    #
es6.object.set-prototype-of
es.object.set-prototype-of        #
es6.object.to-string
es.object.to-string               #
es6.parse-float
es.parse-float                    #
es6.parse-int
es.parse-int                      #
es6.promise
es.promise                        #
es6.reflect.apply
es.reflect.apply                  #
es6.reflect.construct
es.reflect.construct              #
es6.reflect.define-property
es.reflect.define-property        #
es6.reflect.delete-property
es.reflect.delete-property        #
es6.reflect.get
es.reflect.get                    #
es6.reflect.get-own-property-
 descriptor
es.reflect.get-own-property-
 descriptor                       #
es6.reflect.get-prototype-of
es.reflect.get-prototype-of       #
es6.reflect.has
es.reflect.has                    #
es6.reflect.is-extensible
es.reflect.is-extensible          #
es6.reflect.own-keys
es.reflect.own-keys               #
es6.reflect.prevent-extensions
es.reflect.prevent-extensions     #
es6.reflect.set
es.reflect.set                    #
es6.reflect.set-prototype-of
es.reflect.set-prototype-of       #
es6.regexp.constructor
es.regexp.constructor             #
es6.regexp.flags
es.regexp.flags                   #
es6.regexp.to-string
es.regexp.to-string               #
es6.set
es.set                            #
es6.string.anchor
es.string.anchor                  #
es6.string.big
es.string.big                     #
es6.string.blink
es.string.blink                   #
es6.string.bold
es.string.bold                    #
es6.string.code-point-at
es.string.code-point-at           #
es6.string.ends-with
es.string.ends-with               #
es6.string.fixed
es.string.fixed                   #
es6.string.fontcolor
es.string.fontcolor               #
es6.string.fontsize
es.string.fontsize                #
es6.string.from-code-point
es.string.from-code-point         #
es6.string.includes
es.string.includes                #
es6.string.italics
es.string.italics                 #
es6.string.iterator
es.string.iterator                #
es6.string.link
es.string.link                    #
es6.regexp.match
es.string.match                   #
es6.string.raw
es.string.raw                     #
es6.string.repeat
es.string.repeat                  #
es6.regexp.replace
es.string.replace                 #
es6.regexp.search
es.string.search                  #
es6.string.small
es.string.small                   #
es6.regexp.split
es.string.split                   #
es6.string.starts-with
es.string.starts-with             #
es6.string.strike
es.string.strike                  #
es6.string.sub
es.string.sub                     #
es6.string.sup
es.string.sup                     #
es6.string.trim
es.string.trim                    #
es6.symbol
es.symbol                         #
es6.symbol
es.symbol.has-instance            #
es6.symbol
es.symbol.is-concat-spreadable    #
es6.symbol
es.symbol.iterator                #
es6.symbol
es.symbol.match                   #
es6.symbol
es.symbol.replace                 #
es6.symbol
es.symbol.search                  #
es6.symbol
es.symbol.species                 #
es6.symbol
es.symbol.split                   #
es6.symbol
es.symbol.to-primitive            #
es6.symbol
es.symbol.to-string-tag           #
es6.symbol
es.symbol.unscopables             #
es6.typed.*-array
es.typed-array.copy-within        #
es6.typed.*-array
es.typed-array.every              #
es6.typed.*-array
es.typed-array.fill               #
es6.typed.*-array
es.typed-array.filter             #
es6.typed.*-array
es.typed-array.find               #
es6.typed.*-array
es.typed-array.find-index         #
es6.typed.float32-array
es.typed-array.float32-array      #
es6.typed.float64-array
es.typed-array.float64-array      #
es6.typed.*-array
es.typed-array.for-each           #
es6.typed.*-array
es.typed-array.from               #
es6.typed.*-array
es.typed-array.includes           #
es6.typed.*-array
es.typed-array.index-of           #
es6.typed.int16-array
es.typed-array.int16-array        #
es6.typed.int32-array
es.typed-array.int32-array        #
es6.typed.int8-array
es.typed-array.int8-array         #
es6.typed.*-array
es.typed-array.iterator           #
es6.typed.*-array
es.typed-array.join               #
es6.typed.*-array
es.typed-array.last-index-of      #
es6.typed.*-array
es.typed-array.map                #
es6.typed.*-array
es.typed-array.of                 #
es6.typed.*-array
es.typed-array.reduce             #
es6.typed.*-array
es.typed-array.reduce-right       #
es6.typed.*-array
es.typed-array.reverse            #
es6.typed.*-array
es.typed-array.set                #
es6.typed.*-array
es.typed-array.slice              #
es6.typed.*-array
es.typed-array.some               #
es6.typed.*-array
es.typed-array.sort               #
es6.typed.*-array
es.typed-array.subarray           #
es6.typed.*-array
es.typed-array.to-locale-string   #
es6.typed.*-array
es.typed-array.to-string          #
es6.typed.uint16-array
es.typed-array.uint16-array       #
es6.typed.uint32-array
es.typed-array.uint32-array       #
es6.typed.uint8-array
es.typed-array.uint8-array        #
es6.typed.uint8-clamped-array
es.typed-array.uint8-clamped-array#
es6.weak-map
es.weak-map                       #
es6.weak-set
es.weak-set                       #
es6.symbol
es.json.to-string-tag.js          #

ES2016 ==>                        #
es7.array.includes
es.array.includes                 #

ES2017 ==>                        #
es7.object.entries
es.object.entries                 #
es7.object.get-own-property-
 descriptors
es.object.get-own-property-
 descriptors                      #
es7.object.values
es.object.values                  #
es7.string.pad-end
es.string.pad-end                 #
es7.string.pad-start
es.string.pad-start               #
es7.symbol.async-iterator
es.symbol.async-iterator          #
es7.object.define-getter
es.object.define-getter           #
es7.object.define-setter
es.object.define-setter           #
es7.object.lookup-getter
es.object.lookup-getter           #
es7.object.lookup-setter
es.object.lookup-setter           #

ES2018 ==>                        #
es7.promise.finally
es.promise.finally                #

STAGE 3 ==>                       #
es7.array.flatten
esnext.array.flat                 #
es7.array.flat-map
esnext.array.flat-map             #
es7.global
esnext.global                     #
es7.string.match-all
esnext.string.match-all           #
es7.string.trim-left
esnext.string.trim-left           #
es7.string.trim-right
esnext.string.trim-right          #
esnext.object.from-entries        #
esnext.symbol.description         #

STAGE 2 ==>                       #
esnext.set.difference             #
esnext.set.intersection           #
esnext.set.symmetric-difference   #
esnext.set.union                  #

STAGE 1 ==>                       #
es7.map.from
esnext.map.from                   #
es7.map.of
esnext.map.of                     #
es7.math.clamp
esnext.math.clamp                 #
es7.math.deg-per-rad
esnext.math.deg-per-rad           #
es7.math.degrees
esnext.math.degrees               #
es7.math.fscale
esnext.math.fscale                #
es7.math.iaddh
esnext.math.iaddh                 #
es7.math.imulh
esnext.math.imulh                 #
es7.math.isubh
esnext.math.isubh                 #
es7.math.radians
esnext.math.radians               #
es7.math.rad-per-deg
esnext.math.rad-per-deg           #
es7.math.scale
esnext.math.scale                 #
es7.math.signbit
esnext.math.signbit               #
es7.math.umulh
esnext.math.umulh                 #
es7.observable
esnext.observable                 #
es7.promise.try
esnext.promise.try                #
es7.set.from
esnext.set.from                   #
es7.set.of
esnext.set.of                     #
es7.symbol.observable
esnext.symbol.observable          #
es7.weak-map.from
esnext.weak-map.from              #
es7.weak-map.of
esnext.weak-map.of                #
es7.weak-set.from
esnext.weak-set.from              #
es7.weak-set.of
esnext.weak-set.of                #
esnext.array.last-index           #
esnext.array.last-item            #
esnext.composite-key              #
esnext.composite-symbol           #
esnext.map.filter                 #
esnext.map.group-by               #
esnext.map.key-by                 #
esnext.map.map-keys               #
esnext.map.map-values             #
esnext.map.merge                  #
esnext.set.add-all                #
esnext.set.delete-all             #
esnext.set.every                  #
esnext.set.filter                 #
esnext.set.find                   #
esnext.set.join                   #
esnext.set.map                    #
esnext.set.reduce                 #
esnext.set.some                   #
esnext.number.from-string         #
esnext.promise.all-settled        #
esnext.string.code-points         #
esnext.string.replace-all         #
esnext.symbol.pattern-match       #

STAGE 0 ==>                       #
es7.asap
esnext.asap                       #
es7.reflect.define-metadata
esnext.reflect.define-metadata    #
es7.reflect.delete-metadata
esnext.reflect.delete-metadata    #
es7.reflect.get-metadata
esnext.reflect.get-metadata       #
es7.reflect.get-metadata-keys
esnext.reflect.get-metadata-keys  #
es7.reflect.get-own-metadata
esnext.reflect.get-own-metadata   #
es7.reflect.get-own-metadata-keys
esnext.reflect.get-own-metadata-
 keys                             #
es7.reflect.has-metadata
esnext.reflect.has-metadata       #
es7.reflect.has-own-metadata
esnext.reflect.has-own-metadata   #
es7.reflect.metadata
esnext.reflect.metadata           #
es7.string.at
esnext.string.at                  #

DOM ==>                           #
web.dom.iterable
web.dom-collections.for-each      #
web.dom.iterable
web.dom-collections.iterator      #
web.immediate
web.immediate                     #
web.timers
web.timers                        #
