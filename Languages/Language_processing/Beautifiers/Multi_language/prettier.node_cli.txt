
            
   PRETTIER  
            



ALTERNATIVES ==>                  #For:
                                  #  - JavaScript:
                                  #     - eslint --fix (prefered):
                                  #        - very maintained, big ecosystem
                                  #        - not only focused on formatting but also on code errors
                                  #        - very flexible, lots of features
                                  #     - prettier:
                                  #        - very maintained, big ecosystem
                                  #        - very opinionated
                                  #     - js-beautify: more flexible
                                  #     - uglify: less features
                                  #     - esformatter (and jsfmt): not maintained
                                  #     - es-beautifier: not maintained

VERSION ==>                       #1.11.1

OPINIONATED ==>                   #By design prettier does not allow configuration.
                                  #There are only few configuration options available for JavaScript

CORRECTNESS ==>                   #Is very conservative in transformations, e.g. does not add keywords, braces, etc.

GLOB                              #Uses minimatch (see its doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CONF              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Uses Cosmiconfig, i.e.
                                  #  - prettier --config JSON|YAML|JS_FILE
                                  #  - ./[../.../]package.json "prettier" CONF
                                  #  - ./[../.../].prettierrc JSON|YAML_FILE
                                  #  - ./[../.../].prettierrc.json|y[a]ml|js JSON|YAML|JS_FILE
                                  #  - ./[../.../]prettier.config.js JS_FILE
                                  #CONF_FILE properties:
                                  #  - camelCase
                                  #  - PROPs ARR if property can be added several times
                                  #  - BOOL 'PROP' if --no-PROP
--config-precedence STR           #Priority order among:
                                  #  - 'cli-override' (def): --CONF, CONF_FILE
                                  #  - 'file-override': CONF_FILE, --CONF
                                  #  - 'prefer-file': CONF_FILE only, or --CONF only
--no-config                       #

CONF.overrides                    #Sub-CONF for specific files, with OBJ_ARR:
                                  #  - files 'GLOB'[_ARR]
                                  #  - excludedFiles 'GLOB'[_ARR]
                                  #  - options CONF
--find-config-path FILE           #Find which CONF_FILE will be picked for this FILE

--no-editorconfig                 #Otherwise .editorconfig will be used for --print-width, --tab-wdith, --use-tabs and --single-quote


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            IGNORE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


.prettierignore                   #Like .gitignore but for prettier
--ignore-path FILE                #Instead of '.prettierignore'
--with-node-modules               #Do not ignore node_modules/**

// prettier-ignore[-start-end]
/* prettier-ignore[-start|end] */
<!--
 prettier-ignore[-start|end] -->  #In comments, for next line or for a range

--require-pragma                  #Only beautify files that start with comment with JSDoc @prettier or @format
--insert-pragma                   #Add /** @format */ in beginning of files

--range-start|end NUM             #Only beautify part of the files, from specific character offsets
                                  #For IDE plugins
--cursor-offset NUM               #Prints offset where character at offset NUM would be after beautification


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              RUN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


prettier [FILE|'GLOB'...]         #Prints to stdout
                                  #Def: stdin
--stdin                           #
--stdin-filepath FILE             #
--write                           #Edit in-place

-l                                #Dry-run printing files that can be beautified
--list-different                  #Exit code 1 if there are some files.
--debug-check                     #Dry-run printing whether beautification might change code correctness

--no-color                        #
--loglevel STR                    #Can be 'silent', 'error', 'warn', 'log' (def), 'debug'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRETTIER.format('SOURCE'[, CONF])
 ->'SOURCE'                       #Beautifies
PRETTIER.formatWithCursor         #Same but must use CONF.cursorOffset NUM and will return
 ('SOURCE', CONF)->OBJ            #OBJ: formatted 'SOURCE', cursorOffset NUM
PRETTIER.check('SOURCE'[, CONF])
 ->BOOL                           #Whether can be beautified, similar to --list-different

PRETTIER.resolveConfig[.sync]     #Similar to --find-config-file but returning CONF object
 ('FILE'[, CONF])                 #PROMISE is rejected on parsing errors.
 ->PROMISE_CONF|null              #Can also use CONF: useCache BOOL (def: true)
PRETTIER.clearConfigCache()       #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LANGUAGES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--parser STR|MODULE               #Can be:
                                  #  - 'babylon' (def)
                                  #  - 'typescript'
                                  #  - 'flow'
                                  #  - 'css'
                                  #  - 'less'
                                  #  - 'scss'
                                  #  - 'json'
                                  #  - 'graphql'
                                  #  - 'markdown'
                                  #  - 'vue'

--plugin NAME|FILE                #A plugin is responsible for beautifying some specific syntax, by parsing then
                                  #reprinting it.
                                  #It reprints to an intermediary format (called "doc") not to a string.
                                  #Can be added several times.
                                  #Looked in node_modules/ under @prettier/plugin-NAME or prettier-plugin-NAME
                                  #See online doc for how to develop own plugin


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        COMMON OPTIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--print-width NUM                 #Def: 80
--tab-width NUM                   #Def: 2
--use-tabs                        #Def: false

--single-quote                    #Def: double quote except if STR contains double quotes
--no-bracket-spacing              #{ ... } instead of {...}


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          JAVASCRIPT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PARSER ==>                        #Uses Babylon

--no-semi                         #Instead of always. Except when needed
--trailing-comma STR              #Can be 'none' (def), 'es5' (only if ES5), 'all'
--arrow-parens STR                #Can be:
                                  #  - 'avoid' (def): VAL => {...}
                                  #  - 'always' (def): (VAL) => {...}

--jsx-bracket-same-line           #In JSX, closing > not a newline

ESLINT-CONFIG-PRETTIER ==>       ##ESLint config that:
                                 ##  - turns off all ESLint rules of things handled by Prettier.
                                 ##  - should be last in CONF.extends to make sure it is not overridden
                                 ##  - also contains files specific for ESLint rules with eslint-plugin-flowtype,
                                 ##    eslint-plugin-react, eslint-plugin-standard
                                 ##Also contains a CLI which checks if current ESLint config might conflict with Prettier.
                                 ##Version 2.9.0

ESLINT-PLUGIN-PRETTIER ==>       ##Can also use { extends: 'prettier/prettier' } as a shortcut for
                                 ##{ extends: ['prettier'], plugins: 'prettier', rules: { prettier/prettier: 2 } }
                                 ##Version 2.6.0
prettier/prettier [CONF] [OBJ]   ##ESLint rule that lints against prettier rules.
                                 ##CONF is prettier CONF
                                 ##OBJ: pragma STR, usePrettierrc BOOL (def: true)

PRETTIER-ESLINT ==>              ##Node module that performs prettier then eslint --fix (or inverse order)
                                 ##Version 8.8.1
PRETTIER-ESLINT-CLI ==>          ##CLI wrapping prettier-eslint
                                 ##Version 4.7.1
PRETTIER-STANDARD ==>            ##CLI/Node module that performs prettier-eslint --fix using eslint-config-standard
                                 ##(only the rules that are fixable)
                                 ##Version 8.0.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HTML              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PARSER ==>                        #Uses parse5


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           MARKDOWN            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


--prose-wrap STR                  #Newlines for max width
                                  #Can be:
                                  #  - 'preserve' (def)
                                  #  - 'always'
                                  #  - 'never'
