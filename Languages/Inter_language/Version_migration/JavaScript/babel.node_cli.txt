
         
   BABEL  
         



TODO:
  - go through all Babel monorepo packages
  - "Upgrade to Babel 7" docs
  - plugins list https://babeljs.io/docs/en/plugins
  - core-js features
     - which ones can be ponyfilled
     - which ones are not included by default (proposal)
        - and whether included by preset-env
  - presets list https://babeljs.io/docs/en/presets#official-presets

GOAL ==>                          #JavaScript source code transformation
                                  #Version 7.1.6
                                  #See JavaScript documentation for support (with/without polyfill)

@babel/core                       #devDependency with Node.js API
                                  #Is a peerDependency for all other packages


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           RUNTIMES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RUNTIMES ==>                      #Polyfills + ponyfills:
                                  #  - 'core-js/modules/FEATURE': features that change JavaScript syntax
                                  #  - 'regenerator-runtime/runtime': generators (also used by async functions)
                                  #Ponyfills only:
                                  #  - '@babel/runtime': all other features + regenerator-runtime
                                  #  - '@babel/runtime-corejs2': @babel/runtime + core-js
                                  #     - does not include methods on builtin objects (e.g. STR.includes())

@babel/polyfill                   #Polyfills core-js + regenerator-runtime:
                                  #  - patches global|built-in objects run-time
                                  #  - should be required in code and loaded first
                                  #Should prefer loading each individual polyfill:
                                  #  - done by preset-env useBuiltIns 'usage' (see below)

@babel/plugin-transform-runtime   #Add ponyfills import statements.
                                  #PLUGIN_OPTS:
                                  #  - helpers BOOL (def: true):
                                  #     - injects @babel/runtime imports
                                  #     - without it Babel duplicates code
                                  #  - regenerator BOOL (def: true): same for regenerator-runtime
                                  #  - corejs VERSION_NUM (e.g. 2) (def: false): same for core-js
                                  #  - useESModules BOOL (def: false): produce ES modules in output
                                  #Must still install production dependency:
                                  #  - if corejs false: @babel/runtime
                                  #  - otherwise: @babel/runtime-corejs2
                                  #Must still require @babel/polyfill in code if either:
                                  #  - using methods on builtin objects
                                  #  - PLUGIN_OPTS.corejs false

@babel/register                   #

babel-node                        #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                              #Can be:
                                  #  - BABEL-CORE.transform() OPTS
                                  #  - babel CLI flags
                                  #  - BABEL_ROOT/babel.config.js OBJ[()] JavaScript/JSON5
                                  #     - or CONF.configFile PATH
                                  #  - PROJECT_ROOT/.babelrc.js OBJ[()]
                                  #  - PROJECT_ROOT/.babelrc JSON
                                  #     - or CONF.babelrc PATH
                                  #  - PACKAGE.babel OBJ
                                  #Roots:
                                  #  - PROJECT_ROOT: where package.json is
                                  #  - BABEL_ROOT:
                                  #     - starts with CONF.root (def: CONF.cwd)
                                  #     - then uses CONF.rootMode:
                                  #        - 'root' (def): keep as is
                                  #        - 'upward[-optional]': look up [and throw error if cannot find]

CONF.envName                      #'VAR'
                                  #Merges CONF.env.VAR.* to CONF.*, allowing environment-specific configuration
                                  #Def: ENVVAR BABEL_ENV, ENVVAR NODE_ENV or 'development'

CONF.cwd                          #Def: process.cwd()
CONF.filename                     #'FILE' name being compiled
CONF.filenameRelative             #'PATH' being compiled (def: CONF.cwd + CONF.filename)

CONF.code                         #BOOL (def: true). Add OBJ.code|map to BABEL-CORE.transform() return value
CONF.ast                          #BOOL (def: false). Add OBJ.ast to BABEL-CORE.transform() return value

CONF.caller                       #OBJ metadata passed to lower-level utilities
                                  #Only available properties at the moment:
                                  #  - supportsStaticESM BOOL (def: false): produce ES modules in output

babel [FILE|DIR]                  #Def: stdin
[--out-file|dir FILE2|DIR2]       #Def: output ES5 to stdout
--watch                           #
--skip-initial-build              #With --watch, do not build before watching

--source-maps [inline|both]       #
--input-source-map PATH           #
--source-map-target PATH          #
--source-file-name PATH           #
--source-root DIR                 #
--filename-relative DIR           #

--only|ignore GLOB                #Files to whitelist|blacklist
                                  #Can also use .babelignore (same syntax as .gitignore)

--filename STR                    #File used in debug
--highlight-code                  #(def: true): use colors in debug

--auxiliary-comment-before|after
  STR                             #Comment added before any helper line of code, e.g. 'istanbul ignore next'

--comments BOOL
--should-print-comment
  (COMMENT)->BOOL                 #If false, remove comments
--compact BOOL                    #Minify whitespaces. Def: 'auto', e.g. true if input >100KB


PLUGIN                            #Either 'MODULE|PATH' or ['MODULE|PATH', PLUGIN_OPTS]
                                  #  - if MODULE starts with '[babel-]plugin-', can skip it
                                  #Single transformation
                                  #Order: CONF.plugins (in array order) before CONF.presets (in reverse array order)
CONF.plugins                      #PLUGIN_ARR

@babel/plugin-TYPE-*              #Babel core plugins. TYPE:
                                  #  - 'syntax':
                                  #     - change parsing, but does not transform
                                  #     - automatically included by transform PLUGINs
                                  #  - 'transform'
                                  #  - 'proposal': stage-3|2|1|0
                                  #All the following packages names are actually prepended with '@babel/plugin-'

PRESET-ENV ==>                    #
syntax-async-generators           #Async generators
syntax-object-rest-spread         #
syntax-optional-catch-binding     #
transform-arrow-functions         #
transform-async-to-generator      #
transform-block-scoped-functions  #
transform-block-scoping           #
transform-classes                 #
transform-computed-properties     #
transform-destructuring           #
transform-dotall-regex            #
transform-duplicate-keys          #
transform-exponentiation-operator #
transform-for-of                  #
transform-function-name           #
transform-literals                #
transform-modules-amd             #
transform-modules-commonjs        #
transform-modules-systemjs        #
transform-modules-umd             #
transform-new-target              #
transform-object-super            #
transform-parameters              #
transform-regenerator             #
transform-shorthand-properties    #
transform-spread                  #
transform-sticky-regex            #
transform-template-literals       #
transform-typeof-symbol           #
transform-unicode-regex           #
proposal-async-generator-
 functions                        #
proposal-json-strings             #
proposal-object-rest-spread       #
proposal-optional-catch-binding   #
proposal-unicode-property-regex   #

syntax-bigint                     #
syntax-class-properties           #
syntax-decorators                 #
syntax-do-expressions             #
syntax-dynamic-import             #
syntax-export-default-from        #
syntax-export-namespace-from      #
syntax-flow                       #
syntax-function-bind              #
syntax-function-sent              #
syntax-import-meta                #
syntax-json-strings               #
syntax-logical-assignment-
 operators                        #
syntax-nullish-coalescing-
 operator                         #
syntax-numeric-separator          #
syntax-optional-chaining          #
syntax-pipeline-operator          #
syntax-throw-expressions          #
transform-instanceof              #
transform-jscript                 #
transform-member-expression-
 literals                         #
transform-object-assign           #
transform-object-set-prototype-
 of-to-assign                     #
transform-property-literals       #
transform-property-mutators       #
transform-proto-to-assign         #
transform-reserved-words          #
transform-runtime                 #
transform-strict-mode             #
proposal-class-properties         #
proposal-decorators               #
proposal-do-expressions           #
proposal-export-default-from      #
proposal-export-namespace-from    #
proposal-function-bind            #
proposal-function-sent            #
proposal-logical-assignment
 -operators                       #
proposal-nullish-coalescing
 -operator                        #
proposal-numeric-separator        #
proposal-optional-chaining        #
proposal-pipeline-operator        #
proposal-throw-expressions        #

transform-flow-comments           #
transform-flow-strip-types        #

syntax-typescript                 #
transform-typescript              #

syntax-jsx                        #
transform-react-constant-elements #
transform-react-display-name      #
transform-react-inline-elements   #
transform-react-jsx-compat        #
transform-react-jsx-self          #
transform-react-jsx-source        #
transform-react-jsx               #


PRESET                            #Either 'MODULE|PATH' or ['MODULE|PATH', PRESET_OPTS]
                                  #  - if MODULE starts with '[babel-]preset-', can skip it
                                  #Sets of plugins or other presets
                                  #Module that exports FUNC(PRESET_OPTS)->OBJ:
                                  #  - plugins PLUGIN_ARR
                                  #  - presets PRESET_ARR (first has priority)
CONF.presets                      #PRESET_ARR

@babel/preset-env                 #Preset adding plugins based on browserslist
                                  #Does not include: stage-3|2|1|0, Flow, React, TypeScript
                                  #PLUGIN_OPT:
                                  #  - targets ALL_BROWSERS (see browserslist doc)
                                  #     - def: ES<=2017
                                  #  - configPath 'DIR': browserslist's CONF.path
                                  #  - ignoreBrowsersListConfig BOOL (def: false): ignore BROWSERFILE
                                  #  - useBuiltIns:
                                  #     - 'entry': replace 'import @babel/polyfill' by imports for regenerator-runtime + each individual core-js feature
                                  #     - 'usage':
                                  #        - add imports for regenerator-runtime + individual core-js features, but only ones used, and in each file
                                  #        - code should not use 'import @babel/polyfill'
                                  #     - false (def)
                                  #  - forceAllTransforms BOOL (def: false): force using all transforms, regardless of "targets"
                                  #  - include|exclude PLUGIN_STR|REGEXP_ARR
                                  #  - shippedProposals BOOL (def: false): include stage-* features already implemented in browsers
                                  #  - spec BOOL (def: false): use slower but more spec-compliant transformations
                                  #  - loose BOOL (def: false): use faster but less spec-compliant transformations
                                  #  - modules 'amd|umd|systemjs|commonjs|cjs'|false (def: 'commonjs')
                                  #  - debug true: prints which plugins will be used
@babel/preset-flow                #'transform-flow-strip-types'
@babel/preset-react               #'syntax-jsx', 'transform-react-jsx', 'transform-react-display-name'

babel-doctor                      #CLI that shows if there is anything wrong with current setup


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            USAGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


@babel/core                       #As Node module
BABEL-CORE.transform(STR[, OPT])  #Returns OBJ2:
                                  #  - code STR2 (unless OPT.code false)
                                  #  - map STR3
                                  #  - ast (unless OPT.ast false)
BABEL-CORE.transformFile
(FILE[, OPT], FUNC(ERROR, OBJ2))  #
BABEL-CORE.transformFileSync
(FILE[, OPT])->OBJ2               #

@babel/cli                        #babel CLI

babel-node                        #Same as Node REPL, but compiling ES6 first.
                                  #Can use same options as babel + Node REPL

require("babel/register")[(OBJ)]  #Patch Node require() so it uses Babel on *.es6|es|jsx|js, except "node_modules/**"
                                  #(unless OBJ.ignore false).
                                  #OBJ: same options as above.
                                  #Caches. Can use ENVVAR BABEL_DISABLE_CACHE=1 and BABEL_CACHE_PATH=DIR
                                  #Should not be used in library, as it will patch require() for other libraries too.

BROWSER ==>                       #Load browser.js from NPM module babel-core
                                  #  - should put ES6 in <script type="text/babel|ecmascript-6">
                                  #  - can also use babel.transform(STR[, OPT]).code or babel.run(STR[, OPT])

GULP-BABEL([OPT])                 #Version 5.1.0
                                  #Same options, except:
                                  #  - filename not needed
                                  #  - sourcemaps: need to use SOURCEMAPS.init|write() before|after

grunt-babel                       #Grunt plugin (5.0.1)
                                  #  - TASK "babel"
                                  #  - TARGET src, dest
                                  #  - options OPT

requirejs-babel                   #Version 0.0.6
                                  #Plugin adding "es6!FILE"
                                  #Must use CONFVAR paths.es6 PATH_TO_ES6 and paths.babel PATH_TO_BABEL

babelify[.configure(OPT)]         #Browserify transform (6.1.2)

MOCHA ==>                         #Can use --compilers js:babel/register

karma-babel-preprocessor          #Version 5.2.1
                                  #PLUGIN "babel", CONFIGVAR babelPreprocessor OBJ:
                                  #  - options OPT: same as above
                                  #  - [source]filename(FILE)->STR

BABEL-CONNECT(OBJ2)               #Express MDW (6.0.1) that compile static assets. OBJ2:
                                  #  - options OPT: same as above
                                  #  - src|dest DIR
                                  #  - ignore DIR

JADE-BABEL([OPT])                 #Jade filter (5.0.0), used as :babel


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            NON-ES6            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NON-ES6 ==>                       #The following changes are also done by default, even though it is not ES6 transformation.


"use strict";                     #Added on top

VAR = function(){...}             #VAR = function VAR(){...}

FLOW ==>                          #Remove annotations (when using correct plugins)

JSX ==>                           #To JavaScript (when using correct plugins)

SYSTEMJS ==>                      #Can be used:
                                  #  - develop-time: must load es6-module-loader-dev.js (after Babel) and sets System.transpiler = "babel"
                                  #  - production: compile to SystemJS with --modules system, then use SystemJS builder

EXPORT/IMPORT ==>                 #Use ES6 syntax but is compiled according to PLUGINS loaded:
                                  #  - common (def): CommonJS
                                  #  - amd
                                  #  - umd
                                  #  - system: SystemJS (System.register())
                                  #  - ignore: nothing
                                  #  - MODULE: custom
                                  #So must then use the appropriate loader (Browserify, RequireJS, SystemJS, etc.)
                                  #Also uses OPT:
                                  #  - moduleRoot STR: prefixing module name in 'amd'
                                  #  - modulesIds BOOL: if true, add module names in definitions
                                  #  - moduleId MODULE or getModuleId('MODULE')->MODULE: custom module name
                                  #  - resolveModuleSource(FILE, FILENAME)->FILE: calls when using import 'FILE'
                                  #  - keepModuleIdExtensions BOOL: keep file extensions in MODULE

process.env.NODE_ENV              #Transformed to current value.
                                  #Plugin 'transform-inline-environment-variables'
