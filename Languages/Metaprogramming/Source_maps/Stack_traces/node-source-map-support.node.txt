
                           
   NODE-SOURCE-MAP-SUPPORT  
                           



node-source-map-support:
  - Node or Browser (Chrome only)
  - uses Error.prepareStackTrace()
sourcemapped-stacktrace:
  - Browser only
stack-source-map:
  - Browser only
  - not well maintained
All based on mozilla source-map


install([OPTS])
                                  #Sets Error.prepareStackTrace()
                                  #On uncaught exceptions (in Node):
                                  #  - also prepends the faulty line of code (with getErrorSource())
                                  #  - do it by monkey-patching process.emit()
                                  #  - not done if either:
                                  #     - OPTS.handleUncaughtExceptions false (def: true)
                                  #     - process.on('uncaughtException') is already defined
                                  #  - should disable it because it does monkey patches and provides no important value
                                  #OPTS:
                                  #  - environment 'node', 'browser' or 'auto' (def)

getErrorSource(ERROR)->STR|null   #Retrieve line of source code from the stack's last call.
                                  #Do it by parsing stack trace then fetching the file with FS.readFileSync()

retrieveSourceMap('URI|PATH')     #Retrieve source map from URI|PATH
 ->OBJ|null                       #Can be:
                                  #  - in browser: [X-]SourceMap [S]
                                  #  - in node: sourceMappingURL: base64 data URI or normal URI|PATH
                                  #Returns OBJ:
                                  #  - map SOURCE_MAP
                                  #  - url STR: 'URI|PATH' (if inline) or absolute sourceMappingURL
                                  #I.e. performs two fetches: 'URI|PATH' then sourceMappingURL
                                  #Fetches are:
                                  #  - in browser: XHR
                                  #  - in node: FS.readFileSync()
                                  #     - if OPTS.hookRequire true (def: false), pre-emptively done on require()
                                  #       (which is monkey-patched)
                                  #  - cached by URI|PATH
                                  #     - reset after each OBJ.stack if OPTS.emptyCacheBetweenOperations true (def: false)
                                  #Can customize:
                                  #  - how fetch is performed with OPTS.retrieveFile FUNC[_ARR]('URI|PATH')->VAL:
                                  #     - unless OPTS.overrideRetrieveFile true, only fired if default one did not work
                                  #     - can use FUNC_ARR, in which case the first non-falsy VAL will be used
                                  #  - retrieveSourceMap() as a whole with OPTS.retrieveSourceMap|overrideRetrieveSourceMap
                                  #    which follow same logic
