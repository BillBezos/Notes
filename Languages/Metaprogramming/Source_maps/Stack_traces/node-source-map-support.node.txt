
                           
   NODE-SOURCE-MAP-SUPPORT  
                           



ALTERNATIVES ==>                  #
node-source-map-support:
  - Node or Browser (Chrome only)
  - uses Error.prepareStackTrace()
sourcemapped-stacktrace:
  - Browser only
stack-source-map:
  - Browser only
  - not well maintained
All based on mozilla source-map

VERSION ==>                       #0.5.5
                                  #Node or browser (will only have an effect on Chrome)

GOAL ==>                          #Source map support in stack traces


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CORE              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


install([OPTS])                   #Make ERROR.stack use source maps:
                                  #  - location (filename|line|column) from source file instead of compiled one
                                  #  - using the compiled file's source map
                                  #OPTS:
                                  #  - environment 'node', 'browser' or 'auto' (def)

BABEL-PLUGIN-SOURCE-MAP-SUPPORT  ##Babel plugin which automatically adds NODE-SOURCE-MAP-SUPPORT.install() on top of each file
 ==>                             ##Version 2.0.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LOW-LEVEL           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


wrapCallSite(CALL)->CALL          #Underlying logic to install()
                                  #Added through Error.prepareStackTrace()
                                  #Patches CALL so it uses source file filename|line|column instead of compiled one

mapSourcePosition(OBJ)->OBJ       #Underlying logic to wrapCallSite()
                                  #Transform OBJ: source URI|PATH, line|column NUM from compiled to source file's position.
                                  #Do it by:
                                  #  - retrieving the source map (with retrieveSourceMap())
                                  #  - parsing it with mozilla source-map (CONSUMER.originalPositionFor())

retrieveSourceMap('URI|PATH')     #Retrieve source map from URI|PATH
 ->OBJ|null                       #Can be:
                                  #  - in browser: [X-]SourceMap [S]
                                  #  - in Node: sourceMappingURL: base64 data URI or normal URI|PATH
                                  #Returns OBJ:
                                  #  - map SOURCE_MAP
                                  #  - url STR: 'URI|PATH' (if inline) or absolute sourceMappingURL
                                  #I.e. performs potentially two fetches: 'URI|PATH' then sourceMappingURL
                                  #Fetches are:
                                  #  - in browser: XHR
                                  #  - in Node: FS.readFileSync()
                                  #     - if OPTS.hookRequire true (def: false), pre-emptively done on require()
                                  #       (which is monkey-patched)
                                  #  - cached by URI|PATH
                                  #     - reset after each OBJ.stack if OPTS.emptyCacheBetweenOperations true (def: false)
                                  #Can customize:
                                  #  - how fetch is performed with OPTS.retrieveFile FUNC[_ARR]('URI|PATH')->VAL:
                                  #     - unless OPTS.overrideRetrieveFile true, only fired if default one did not work
                                  #     - can use FUNC_ARR, in which case the first non-falsy VAL will be used
                                  #  - retrieveSourceMap() as a whole with OPTS.retrieveSourceMap|overrideRetrieveSourceMap
                                  #    which follow same logic


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      UNCAUGHT EXCEPTIONS      :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


UNCAUGHT EXCEPTIONS ==>           #After install(), on uncaught exceptions (Node-only):
                                  #  - fixes location in the faulty line of code prepended to uncaught exceptions
                                  #     - using getErrorSource()
                                  #  - do it by monkey-patching process.emit()
                                  #  - not done if either:
                                  #     - OPTS.handleUncaughtExceptions false (def: true)
                                  #     - process.on('uncaughtException') is already defined

getErrorSource(ERROR)->STR|null   #Retrieve line of source code from the stack's last call.
                                  #Do it by parsing stack trace then fetching the file with FS.readFileSync()
