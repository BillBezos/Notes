
         
   EXECA  
         



ALTERNATIVES ==>                  #  - execa (preferred)
                                  #  - node-cross-spawn (preferred): cross-browser CHILD_PROCESS.spawn() (used by execa)
                                  #  - npm-run-path (preferred): cross-browser PATH that includes local binary (used by execa)
                                  #  - path-key (preferred): cross-browser PATH name (used by npm-run-path)
                                  #  - npm-path:
                                  #     - like npm-run-path + path-key
                                  #     - also adds node-gyp-bin/ which makes it async
                                  #  - npm-run: CHILD_PROCESS.exec|spawn() (not cross-browser) + npm-path

VERSION ==>                       #1.0.0

CHILD_PROCESS[.sync](...)         #Like CHILD_PROCESS.spawn[Sync](...) but:
                                  #  - cross-browser (uses NODE-CROSS-SPAWN, see its doc)
                                  #     - also add /q flag on Windows
                                  #  - includes local binary (uses NPM-RUN-PATH, see its doc)
                                  #     - unless OPTS.preferLocal false
                                  #     - can specify current directory (def: process.cwd()) with either OPTS.cwd or OPTS.localDir
                                  #  - returned EVENTLISTENER can also be used as PROMISE:
                                  #     - resolved on CHILD_PROCESS 'exit' event with OBJ:
                                  #        - code 0
                                  #        - stdout|stderr STR
                                  #        - failed false, killed false
                                  #        - signal null
                                  #        - cmd STR
                                  #        - timedOut false
                                  #     - rejected on CHILD_PROCESS or stream 'error' event with ERROR
                                  #        - ERROR properties:
                                  #           - code NUM
                                  #           - stdout|stderr STR
                                  #           - cmd STR
                                  #           - failed true
                                  #           - killed BOOL
                                  #           - timedOut BOOL (when using OPTS.timeout)
                                  #           - signal 'SIGNAL'|null
                                  #        - normalize ERROR if 'error' event did not use an ERROR instance
                                  #        - if OPTS.reject false, return ERROR instead of rejecting promise
                                  #  - emit 'SIGTERM' on process exit (using SIGNAL-EXIT, see its doc)
                                  #     - unless OPTS.cleanup false or OPTS.detached true
                                  #  - OPTS.maxBuffer defaults to 10MiB (instead of 200KB)
                                  #  - OPTS.windowsHide always true
                                  #  - uses STRIP-FINAL-NEWLINE (see its doc)
                                  #     - unless OPTS.stripFinalNewline false
                                  #OPTS:
                                  #  - timeout NUM (def: none): emit OPTS.killSignal (def: 'SIGTERM') in NUMms
                                  #  - input STREAM|STR: pipe to command's stdin
                                  #  - stdin|stdout|stderr STR: same as OPTS.stdio [...]
                                  #  - buffer BOOL (def: true): when retrieving stdout|stderr content
                                  #  - extendEnv BOOL: if false (def: true), do not use OPTS.env

CHILD_PROCESS.shell[Sync](...)    #More cross-browser than using OPTS.shell true???

CHILD_PROCESS.stdout|stderr(...)  #Same as CHILD_PROCESS(...).then(p => p.stdout|stderr)
