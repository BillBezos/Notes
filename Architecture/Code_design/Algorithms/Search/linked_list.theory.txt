
               
   LINKED_LIST  
               



[SINGLY] LINKED LIST ==>          #Graph where nodes always point to 1 other node ("link")
                                  #First node is "head" or "address|pointer|handle"
                                  #Last node is "tail"
                                  #Used to implement lists, i.e. same operations.
                                  #Time complexity:
                                  #  - length(), access(), search(): O(n)
                                  #  - insert(), delete(), slice(): O(1) after a O(n) search
                                  #Pros:
                                  #  - O(1) insert|delete after a O(n) search
                                  #  - persistent data structure
                                  #  - fast memory allocation, because memory is not contiguous
                                  #Cons:
                                  #  - O(n) access|search
                                  #  - not ordered (but can manually sort)
                                  #Tail node can either:
                                  #  - have no link ("open|linear")
                                  #  - link to head ("circular linked list")

MULTIPLY LINKED LIST ==>          #Linked list where:
                                  #  - each node has N links
                                  #  - each specific set of links performs a full iteration, but most likely in different orders
                                  #     - e.g. sorted according to different attributes
                                  #Allows more types of iteration, but takes more space.

DOUBLY LINKED LIST ==>            #Multiply linked list where each node includes a "previous link" to previous node.
                                  #"Next|previous" links are also called "car" and "cdr"

HASH LINKING ==>                  #Interleaving (see aggregate theory) links in a separate random access array.
                                  #Mixes pros|cons of random access array for links with pros|cons of linked list for values:
                                  #  - more time efficient and better locality of reference, since links are usually iterated together
                                  #  - slower time allocation and insert|delete than linked list,
                                  #    but faster than if values were in random access array too
                                  #  - not persistent
