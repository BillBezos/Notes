
       
   NPM  
       


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                   #6.4.1

SUMMARY ==>                   #Installs/updates:
                              #  - npm init for package.json. Also managing .gitignore, main, directories and *dependencies.
                              #  - can use package.json scripts as lifecycle triggers, or to give commands to user
                              #  - npm [un]install [PKG] -S|D|O|B [-g]
                              #  - npm link or npm install --link for dependencies developped locally
                              #  - npm update [PKGNAME...] for dependencies updates
                              #  - npm version for developped package update
                              #Infos:
                              #  - npm search for all packages
                              #  - npm list for installed packages
                              #  - npm view for package info
                              #Publishing:
                              #  - npm adduser once, then can add others with npm owner add|rm
                              #  - npm publish|deprecate on new|old versions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           NOTATION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PKG                           #PKGDIR|PKGREPO|PKGNAME
PKGDIR                        #DIR with package.json
                              #  - PATH to it
                              #  - PATH|URL to gzipped of it
PKGREPO                       #URL to code repository among:
                              #  - git[+ssh|http|https]://*.git[#COMMIT]
                              #  - "npm/PKGNAME"
                              #  - "[github:]USER/REPO"
                              #  - "gist:[USER/]GIST_ID"
                              #  - "gitlab|bitbucket:USER/REPO"
                              #Can end with #TAG|BRANCH
PKGNAME                       #Package name, as published on npm
                              #Can be namespaced with "@SCOPE/"
                              #  - SCOPE is user or organization name
                              #  - installed as node_modules/@SCOPE/...


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VERSIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION
RANGE                         #See node-semver doc

PKGNAME@VERSION               #PKGNAME can always end with @VERSION
PKGNAME@TAG                   #PKGNAME can always end with @TAG (def: @latest)

TAGS ==>                      #  - If @VERSION is not specified, use CONF.tag (def: "latest").
                              #    Used for example by npm install, update or publish.
                              #  - Can change CONF.tag or use PKG@TAG to change preferred TAG
                              #  - attached to a VERSION with either:
                              #     - Git tags
                              #     - npm publish --tag TAG
                              #     - npm dist-tag add PKGNAME@VERSION [TAG]
                              #        - also npm dist-tag rm PKGNAME TAG, and npm dist-tag ls [PKGNAME]
                              #     - npm version (if CONF.git-tag-version is true (def: false))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BADGES ==>                    #https://img.shields.io:
                              #  - /bundlephobia/min[zip]/PKGNAME.vsg: bundle size [with gzip]
                              #  - /npm/dw|dm|dy|dt/PKGNAME.svg: downloads per week|month|year|total
                              #  - /npm/l/PKGNAME.svg: license
                              #  - /npm/v/[@SCOPE/]PKGNAME[/TAG|BRANCH].svg: version
                              #  - /npm/types/PKGNAME.svg: Flow|TypeScript
                              #  - /node/v/[@SCOPE/]PKGNAME[/TAG|BRANCH]: Node.js version

RETRIES ==>                   #When accessing the registry, the following exist about how to retry if problems:
                              #  - CONF.fetch-retries (def: 2)
                              #  - CONF.fetch-retry-factor (def: 10): multiply the timeout each time, within min|maxtimeout
                              #  - CONF.fetch-min|maxtimeout (in ms, def: 10s and 1 minute)

LOGS ==>                      #Failures are written to ./npm-debug.log, whose verbosity depends on CONF.loglevel among
                              #"silent", "win", "error", "warn", "http" (def), "info", "verbose", "silly"
                              #Can use in JavaScript with require("npmlog") (must install package), where NPMLOG has members:
                              #  - level: same as CONF.loglevel
                              #  - record OBJ_ARR: all logs as { id UINT, level STR, prefix STR2, message STR3,
                              #    messageRaw STR4_ARR }
                              #  - maxRecordSize UINT (def: 10000)
                              #  - stream IOSTREAM (def: process.stderr). Can also use CONF.logstream.
                              #  - enable|disableColor(). Can also use CONF.color (def: true)
                              #  - pause|resume()
                              #  - log.warn|http|etc.(PREFIX_STR, STR...)
                              #  - on("log[.LEVEL]", FUNC(OBJ))
                              #  - on(PREFIX_STR, FUNC(OBJ))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PACKAGE.JSON          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                       #LPREFIX/package.json
                              #Package information

npm init                      #Create a new package.json with a set of questions
-y|--yes                      #
--scope @SCOPE                #
-f|--force                    #

npm init @SCOPE               #Same as npx @SCOPE/create
npm init [@SCOPE/]PKGNAME     #Same as npx [@SCOPE/]create-PKGNAME

npm edit PKGNAME              #Open PREFIX/node_modules/PKGNAME/package.json
CONF.editor                   #Used by npm edit and npm config edit
                              #Def: ENVVAR EDITOR, or "vi"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMPATIBILITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.engines.node|npm      #Required version RANGE for Node|npm
PACKAGE.engine-strict         #BOOL (def: false): whether to abort npm install or to only print warning
PACKAGE.node-version          #Node version used to check against PACKAGE.engines.node
                              #Def: process.version

PACKAGE.os                    #Required value of process.platform among STR_ARR
                              #Can blacklist with '!'
PACKAGE.arch                  #Same for process.arch


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PUBLISH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm publish [PKGDIR]          #Publish package to npm
                              #Def PKGDIR: $PWD
                              #Can publish several VERSION of same package.

npm deprecate PKGNAME STR     #Makes npm install print a STR warning
                              #If STR is "", undeprecate it.

PACKAGE.name                  #STR
                              #Max 214 chars, lowercase, URL-safe, cannot start with . or _
                              #Don't put "node" or "js".

PACKAGE.version               #VERSION

PACKAGE.main                  #LPATH of the file which will be loaded by require(PKGNAME)
PACKAGE.browser               #Same but when loaded from browser instead of from Node.
                              #E.g. used by Webpack

PACKAGE.files                 #STR_ARR of files/dirs to publish.
                              #Same format as .gitignore except:
                              #  - whitelists instead
                              #  - "!" means blacklists
                              #  - priority to last STR in array (blacklist or not)
                              #  - LPATH (not just filename)
                              #By default, include everything.
                              #Always included:
                              #  - package.json, PACKAGE.main
                              #  - (case-insensitive, any extension) README, CHANGELOG|CHANGES|HISTORY, LICENSE, NOTICE
                              #Always excluded:
                              #  - .*.swp, ._*, *.orig
                              #  - node_modules, .npmrc, npm-debug.log, config.gypi, package-lock.json
                              #  - .git, .svn, CVS, .hg
                              #  - .lock-wscript, .wafpickle-*
                              #  - .DS_Store
.npmignore                    #Same but:
                              #  - blacklists instead
                              #     - PACKAGE.files has priority, unless .npmignore is inside subdirectory
                              #  - can be at LPREFIX or inside subdirectories
                              #  - same format as .gitignore, including:
                              #     - targetting filename is no slash
                              #     - directories must end with a slash
                              #  - default to .gitignore if not specified
npm publish --dry-run         #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUTH              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCOUNT CREATION ==>          #Account (username, password, email) must be registered online

CONF.username                 #npm username
CONF.email                    #npm user's email
npm adduser                   #Sets CONF.username|email
npm whoami                    #Prints CONF.username

CONF.strict-ssl               #BOOL true (def) for SSL authentication
CONF.ca                       #STR (def: undefined) with the root CA (if null: known CA)
CONF.cert                     #STR (def: null)
CONF.key                      #STR (def: null)

npm owner add|rm PKGNAME      #Add|remove owners, i.e. users authorized to run:
                              #  - npm publish|deprecate|tag|[un]star|stars and owner add|rm
                              #Creator is first owner.
npm owner ls PKGNAME          #Prints owners
CONF.always-auth              #BOOL (def: false). Only allow owners for any npm command requesting the registry.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRIVATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.private               #BOOL (def: false)
                              #Make npm publish fail

npm publish
--access public|restricted    #Make package private on npm
npm access public|restricted
 [PKGNAME]                    #Same

npm access add read-only|write
 USER [PKGNAME]               #
npm access rm USER [PKGNAME]  #
npm access ls [PKGNAME]       #
npm access edit [PKGNAME]     #Manage users able to access private repository


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REGISTRY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.[@SCOPE:]registry        #URL of the package registry
                              #Def: https://registry.npmjs.org
                              #If SCOPE, only for packages with this SCOPE
npm adduser|logout|docs|bugs|
 search
--registry URL                #Same
npm adduser|logout
--scope SCOPE                 #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SCRIPTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.scripts.              #"SHELL_COMMAND"
 [pre|post]CLI_COMMAND        #Fired before|after npm CLI_COMMAND [PKGNAME]
                              #  - non-0 exit code will make npm CLI_COMMAND fail, unless --force|f
                              #CLI_COMMAND can be
                              #  - start|stop|restart|test
                              #  - install|uninstall:
                              #     - when either:
                              #        - doing npm [un]install [PKGNAME]
                              #        - another project [un]installs current package
                              #     - prefer prepublish instead
                              #  - publish:
                              #     - prepublish: deprecated
                              #     - prepublishOnly: before npm publish
                              #     - prepare: before npm publish or npm install (without PACKAGE)
                              #  - pack|shrinkwrap
                              #  - version
                              #  - custom one
                              #Default values:
                              #  - "start": "node server.js" if LPREFIX/server.js exists
                              #  - "preinstall": "node-gyp rebuild" if LPREFIX/binding.gyp exists

npm start|stop|test [-- ARGS] #Fire related CLI_COMMAND
npm restart [-- ARGS]         #Fire stop, restart then start CLI_COMMANDs
npm run-script CLI_COMMAND
 [-- ARGS]                    #Fire CLI_COMMAND (usually custom one)
--silent                      #
--if-present                  #Does not fail if script does not exist

LISTALLDIR/.hooks/            #Like PACKAGE.scripts.[pre|post]CLI_COMMAND but:
 [pre|post]CLI_COMMAND        #  - as a binary file
                              #  - applies to both current package and each of its dependencies

ENVVARS ==>                   #The following ENVVARs are set during npm scripts
ENVVAR npm_config_VARR        #CONF.VARR
ENVVAR npm_package_config_VARR#CONF.PKGNAME:VARR
ENVVAR npm_lifecycle_event    #[pre]CLI_COMMAND
ENVVAR npm_lifecycle_script   #SHELL_COMMAND
ENVVAR INIT_CWD               #$PWD when running script
ENVVAR PWD                    #Package's LPREFIX
                              #For [pre|post]install triggered by another project installing current package,
                              #will be current package's LPREFIX.
ENVVAR NODE                   #Node binary path

CONF.script-shell             #Shell used in SHELL_COMMAND
                              #Def: null, i.e. sh on Unix, cmd.exe on Windows

CONF.unsafe-perm              #If false (def if root) and running as root, switch UID|GID to CONF.user|group
CONF.user                     #UID|STR (def: "nobody")
CONF.group                    #GID|STR (def: current one)

CONF.scripts-prepend-node-path#Whether to add node binary directory to $PATH:
                              #  - BOOL
                              #  - "auto" (def): only if different from one currently used by npm
                              #  - "warn-only": like false, but warns if different from one currently used by npm

CONF.ignore-scripts           #Is true (def: false), does not run scripts


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                      #In order of priority:
                              #  - npm --VARR VAL
                              #  - ENVVAR npm_config_VARR (underscored)
                              #  - LPREFIX/.npmrc
                              #     - INI format:
                              #        - VAR = VAL
                              #        - ARR[] = VAL
                              #        - ;COMMENT or #COMMENT
                              #     - can use ${ENVVAR}
                              #  - ~/.npmrc (CONF.userconfig): same format
                              #  - GPREFIX/etc/npmrc (CONF.globalconfig): same format
                              #  - PACKAGE.config.VARR: only for PKGNAME:VARR
                              #  - PACKAGE.publishConfig.VARR: only if npm publish
                              #Dependencies' CONF is never used.
                              #Def VAL is "true"

CONF.PKGNAME:VARR             #Can have package-specific configuration VAR by prefixing with "PKGNAME:"

npm config set VARR [VAL]     #Modifies userconfig
-g|--global                   #Modifies globalconfig
npm config get VARR           #
npm config delete VARR        #
npm config list               #
-l|--long                     #Show defaults instead
-j|--json                     #
npm config edit               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BINARIES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BINDIR                        #GBINDIR|LBINDIR
GBINDIR                       #GPREFIX/bin/
LBINDIR                       #LPREFIX/node_modules/.bin/
npm bin                       #Prints BINDIR

PACKAGE.bin[.SYMLINK]         #LPATH to a binary file
                              #During npm install, create symlink from LPATH to BINDIR/SYMLINK (def SYMLINK: same filename)
                              #BINDIR are added to $PATH during npm scripts
PACKAGE.directories.bin       #Same but instead LPATH to directory instead of to each binary file
                              #Cannot be specified if PACKAGE.bin is specified
CONF.bin-links                #If false (def: true), prevent binaries symlinks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSTALL/UPDATES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install|update|outdated|
 prefix|root|bin -g|--global  #Use GPREFIX instead of LPREFIX

PREFIX                        #GPREFIX|LPREFIX
GPREFIX                       #Used for global installs (CLI)
                              #Same directory as Node install (def: ~/.nvm/versions/node/VERSION with nvm)
                              #Can be overriden by CONF.prefix
LPREFIX                       #Used for local installs (require())
                              #First directory up that holds either package.json or node_modules/, or PWD if none
LPATH                         #PATH relative to LPREFIX
npm prefix                    #Prints PREFIX

INSTALLDIR                    #GINSTALLDIR|LINSTALLDIR
GINSTALLDIR                   #GPREFIX/lib/node_modules
LINSTALLDIR                   #LPREFIX/node_modules
npm root                      #Prints INSTALLDIR/node_modules

DEPENDENCIES HIERARCHY ==>    #Dependencies install their own dependencies:
                              #  - i.e. node_modules/PKGNAME/node_modules/...
                              #  - if a dependency with a matching version can be found up the tree (parent or uncle),
                              #    this is used instead
                              #     - even if the matching version is not the latest version
                              #     - this allows for circular dependencies

dependencies                  #{ "PKGNAME": RANGE|PKGDIR|PKGREPO... } where:
devDependencies               #  - bundledDependencies is PKGNAME_ARR
optionalDependencies          #Difference is whether npm install [PKG] target them:
bundledDependencies           #  - dependencies: always
peerDependencies              #  - optionalDependencies: only if CONF.optional true (def)
                              #    Also: doesn't make npm fail if can't be installed.
                              #  - devDependencies: only if CONF.dev true and CONF.production false.
                              #    This is the default with npm install, but not with npm install PKG
                              #    Should be dependencies not to be installed on end-users: testing/doc frameworks, etc.
                              #  - bundledDependencies: never.
                              #    For dependencies that are committed and published (see above)
                              #    Are npm rebuild at install if CONF.rebuild-bundle true (def)
                              #  - peerDependencies: always. For parent project of a plugin, since the plugin does not
                              #    necessarily require the parent, but the other way around.
                              #Should not commit node_modules

npm install [PKG]             #Install PKG and its dependencies found in package.json to INSTALLDIR.
                              #See above about when devDependencies and optionalDependencies are installed.
                              #PKG by def. is LPREFIX package.
                              #If local install, and PKG by def., already installed, so only install dependencies.
                              #Doesn't update already installed, but install latest if not installed (def TAG is "latest")
                              #If error, rollback is CONF.rollback true (def)
-S|D|O|B                      #Add PKG to dependencies|devDependencies|optional|bundledDependencies in package.json
                              #VERSION used in package.json are the same exact if -E, or any compatible (major release number)
                              #otherwise, or any compatible minor release number if CONF.save-prefix '~'
-f                            #Force fetching on the internet even when there is a cached version.
--nodedir=DIR                 #Node source code DIR, in order to compile Node native modules.
--link                        #Install globally, then use npm link PKGNAME
npm uninstall [PKGNAME]       #Can use -g
-S|D|O|B                      #Removes from package.json

npm update [PKGNAME...]       #Update package, according to current TAG (def: "latest").
                              #Without PKGNAME, update current package dependencies.
npm outdated [PKGNAME...]     #Print package that can be updated.
                              #Shows even when latest version != allowed new version (using e.g. ^VERSION), so can show
                              #new major version, while npm install|update won't install it.
-l                            #Print more info
-p                            #Print as colon-separated list
--json                        #
--depth DOUBLE                #Don't go more than DOUBLE subdepedency depth (def: Infinity)
npm version VERSION           #Modifies package.json version.
                              #VERSION can be major|minor|patch to increment version.
                              #If there is a .git, will commit with a tag with the version:
                              #  - Can then use -m STR to specify a commit message, which can include %s for the version.
                              #  - If CONF.sign-git-tag true (def: false), sign the commit with git -s (must have a GPG key)
                              #  - --no-git-tag-version can be used not to add a tag
npm shrinkwrap                #For current package, creates/updates LPREFIX/npm-shrinkwrap.json:
                              #  - specifies current dependencies exact versions.
                              #  - npm install will look at dependencies versions using this file instead of package.json
                              #    (unless CONF.shrinkwrap is false (def: true)), which means it will look for exact version.
                              #  - Goal is to lock down dependencies version, for tightly controlled end-user project.
                              #  - Don't use devDependencies unless CONF.dev is true

npm link [PKGNAME]            #2 steps:
                              # 1) Without PKGNAME, creates symlink in GINSTALLDIR (including for binaries) that look like it's
                              #    been installed globally, but pointing to LINSTALLDIR
                              # 2) With PKGNAME, creates symlinks in LINSTALLDIR (including for binaries) that look like it's
                              #    been installed locally, but pointing to global symlinks.
                              #Goal is to have a dependency to a package developed/stored locally without having to
                              #reinstall the dependency each time it changes.
                              #Those symlinked dependencies:
                              #  - are "snapshotted" if package is published

npm submodule PKGNAME         #Installs PKGNAME, but as a git submodule, which means its updates/installing dependencies/etc.
                              #needs to be handled with git not with npm.
                              #PKGNAME must have a .git/ folder.
npm [re]build [PKGNAME...]    #Fires node-gyp [recursively], for packages with C/C++ addons. Automatically done by npm install
npm pack [PKGNAME...]         #Create a *.tgz tarball of package.

npm prune [PKGNAME...]        #Uninstall "extraneous" dependencies, i.e. that are installed but not specified in package.json
                              #*dependencies.
--production                  #Doesn't read devDependencies, which mean they are uninstalled.
npm dedupe [PKGNAME...]       #Reduces installed package size by eliminating duplicate dependencies' dependencies, by putting
                              #them upper in the tree.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SEARCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.description           #STR. Used in npm search
PACKAGE.keywords              #STR_ARR. Used in npm search

npm search [STR|REGEXP...]    #Search packages and show: name, description, author, date, version, keywords
                              #Can be prefixed with - to exclude
                              #Can use:
                              #  - keywords:KEYWORD
                              #  - author:USER: PACKAGE.author
                              #  - maintainer:USER
                              #  - scope:SCOPE
                              #  - not|is:deprecated
                              #  - not|is:unstable: <1.0.0
                              #  - not|is:insecure: vulnerabilities according to nsp
                              #  - boost-exact:true: boost exact matches
--searchopts STR|REGEXP       #Same as positional argument, but does not highlight
--searchexclude STR|REGEXP    #Exclude words
-l|--long                     #Don't truncate description to one line
--no-description              #Do not show description
-p|--parseable                #Print as colon-separated list.
--json                        #Print as JSON
--searchstaleness NUM         #Cache staleness NUM (in secs, def: 900)
CONF.searchsort               #Sorting of npm search among "name" (def), "date", "description" or "keywords".

NPM SEARCH ALGORITHM ==>      #Total score = product of relevance and score
                              #Relevance:
                              #  - tokenized search (ElasticSearch edge_ngram) on PACKAGE.name|keywords|description
                              #    each having a weight of 4|2|1
                              #  - search is more English-friendly
                              #Score:
                              #  - weighted average of:
                              #     - popularity (41%)
                              #        - popularity.communityInterest (28%):
                              #           - GitHub stars + GitHub forks + GitHub subscribers + GitHub contributors
                              #        - popularity.downloadsCount (28%):
                              #           - average monthly npm downloads over last 3 months
                              #        - popularity.downloadsAcceleration (14%, 0-1):
                              #           - acceleration of npm downloads over last year
                              #        - popularity.dependentsCount (28%)
                              #           - number of package listing it as dependency
                              #     - quality (28%):
                              #        - quality.carefulness (35%, 0-1):
                              #           - 33% if has a license
                              #           - 38% for README length (max if 400 bytes)
                              #           - 13% if detect a linter
                              #              - do it by checking package.json and configuration files
                              #              - among coffeelint, csslint, editorconfig, eslint, htmlhint, jscs, htmllint,
                              #                prettier, standard, stylelint, tslint, xo
                              #           - 8% if has .npmignore or PACKAGE.files
                              #           - 8% if has CHANGELOG.md
                              #           - whole thing is 0 if marked as deprecated
                              #           - whole thing is halved if version < 1.0.0
                              #        - quality.tests (35%, 0-1)
                              #           - 60%: cumulated size of all test files (directory or file with 'test[s]|spec[s]')
                              #              - tests are /[__]test[s]|spec[s][__]/** or **/[*.]test[s]|spec[s]*
                              #              - max is 400 bytes
                              #              - half if no npm test
                              #           - 15% if using codecov|coveralls|codeclimate|scrutinizer
                              #              - detected from README badges or fetching them directly
                              #           - 25% of percentage of PR statuses (e.g. using CI on PR) that have been successful
                              #              - should be careful to wait for pending statuses before publishing to npm
                              #        - quality.health (20%)
                              #           - 50%: ratio of outdated dependencies (using David) (0% is max, 25% is min)
                              #           - 50%: ratio of dependencies with vulnerabilities (using nsp) (0% is max, 25% is min)
                              #           - divided by (n + 1) where n is number of dependencies using * or >= in version
                              #              - not done if npm-shrinkwrap.json exists
                              #        - quality.branding (10%, 0-1)
                              #           - 40%: if PACKAGE.repository.url and PACKAGE.homepage have different hostname.
                              #           - 60%: for number of README badges (max 4 badges)
                              #     - maintenance (31%):
                              #        - maintenance.releasesFrequency (33%, 0-1)
                              #           - frequent releases
                              #           - max is 2 releases per 3 months
                              #        - maintenance.commitsFrequency (17%, 0-1)
                              #           - frequent commits
                              #           - 0.9 if 5 commits per month, max if 10 commits per month
                              #        - maintenance.openIssues (17%, 0-1)
                              #           - ratio of closed issues per total issues over last period
                              #           - max if <20%
                              #           - 0.7 if no issues
                              #        - maintenance.issuesDistribution (33%)
                              #           - issues are closed fast
                              #           - 0.7 if closed within 1 month, max if closed within 5 days
                              #           - 0.7 if no issues
                              #        - if package is considered "finished", replace any of the above by 0.9 (unless they are above 0.9). Must:
                              #           - have version > 1.0.0
                              #           - not be deprecated
                              #           - has less than 15 open issues
                              #           - has npm test
                              #  - within each of the above groups:
                              #     - each sub-value is normalized by based on its position within [min, max] range of values of all packages
                              #     - this is shown as score.detail.*
                              #  - uses project "npms-analyzer"
                              #     - can see data at https://api.npms.io/v2/package/PKGNAME
                              #     - score.final uses weights 30|35|35% for popularity|quality|maintenance, but popularity is
                              #       bumped up by npm search leading to above numbers
                              #  - many of the things above rely on using GitHub
                              #  - those are shown on the right side of search results

UI ==>                        #  - npmjs.com: main one
                              #  - npms.io: very similar, same results, maintained by npm as well, not as good
                              #  - npm-stat.com: show download over time


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.homepage              #URL of the HTML project page.
                              #Def: "www.npmjs.org/package/PKGNAME"
PACKAGE.repository            #{ "type": "git|svn", "url" URL } or PKGREPO
                              #Source code repository
PACKAGE.bugs                  #Where to report bugs. { "url" STR, "email" STR2 }
                              #Def: { url: "www.npmjs.org/package/PKGNAME" }
npm docs|repo|bugs [PKGNAM...]#Open PACKAGE.homepage|repository.url|bugs with browser
CONF.browser                  #Used by npm docs|repo|bugs
                              #Def: "open"

PACKAGE.license               #STR. SPDX name or "UNLICENSED" if closed-source.

PACKAGE.author                #{ "name" STR[, "email" STR2][, "url" STR3] } or "Name <email> (url)"
PACKAGE.contributors          #OBJ_ARR (same OBJ as author)
LPREFIX/AUTHORS               #Alternative way to set PACKAGE.contributors:
                              #  - one "Name <email> (url)" per line instead.
                              #  - #COMMENT

PACKAGE.man                   #LPATH[_ARR] to man files.
                              #Install them to GPREFIX/share/man with npm install -g.
                              #Filenames should be NAME.MAN_SECTION[.gz].
                              #If NAME doesn't start with PKGNAME, it is prefixed with it.
PACKAGE.directories.man       #Same but LPATH to directory instead of each file.

PACKAGE.directories.          #LPATH.
 doc|example|lib|test         #General information about where the library main documentation|example|source|test folder is.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             INFOS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm list                      #
--json                        #Show everything installed, including dependencies
-p                            #Print as colon-separated list.
--depth DOUBLE                #Don't go more than DOUBLE subdepedency depth (def: Infinity)
--production|dev              #

npm view [PKGNAME]            #Prints package.json, with some extra members like versions STR_ARR, time OBJ
[VAR[.VAR2]...]               #(versions timestamps), dist-tags OBJ (TAG), dist { shasum, tarball }, users STR_ARR
--json                        #Fetch on the internet (not local install).
npm explore PKGNAME           #Spawns a new Bash (CONF.shell) session with PKGNAME DIR in node_modules/ as $PWD.
[-- SHELL_COMMAND]            #If SHELL_COMMAND, new session is temporary to SHELL_COMMAND execution.
                              #Often used to perform git commands in a dependency (like git pull). If using git pull, npm
                              #rebuild should be used afterwards.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             UTILS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm cache add PKG             #Manipulate cached packages in CONF.cache (def: ~/.npm)
npm cache clean               #npm install automatically use the cache, and also npm search|view if cache is recent enough.
[PKGNAME[/VERSION]]           #If a cache file is being written, it is locked. The lockfile last for CONF.cache-lock-stale
npm cache list                #(in ms, def: 1 min.), other will try CONF.cache-lock-retries (def: 10) times with spaces of
[PKGNAME[/VERSION]]           #CONF.cache-lock-wait ms (def: 10s)
                              #Cached item will only checked between CONF.cache-min (in sec, def: 10) and CONF.cache-max
                              #(def: Infinity) after its creation.

npm completion                #Outputs a Bash script that adds npm commands completion.
                              #Use . <(npm completion) in a .bashrc

npm [un]star [PKGNAME...]     #Show appreciation of a package, by putting it as favorite.
npm stars [SHELL_USER]        #Show starred packages.
