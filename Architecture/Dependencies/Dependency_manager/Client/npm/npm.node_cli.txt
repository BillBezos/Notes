
       
   NPM  
       


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                   #6.4.1

SUMMARY ==>                   #Installs/updates:
                              #  - npm init for package.json. Also managing .gitignore, main, directories and *dependencies.
                              #  - can use package.json scripts as lifecycle triggers, or to give commands to user
                              #  - npm [un]install [PKG] -S|D|O|B [-g]
                              #  - npm link or npm install --link for dependencies developped locally
                              #  - npm update [PKGNAME...] for dependencies updates
                              #  - npm version for developped package update
                              #Infos:
                              #  - npm search for all packages
                              #  - npm list for installed packages
                              #  - npm view for package info
                              #Publishing:
                              #  - npm adduser once, then can add others with npm owner add|rm
                              #  - npm publish|deprecate on new|old versions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           NOTATION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                       #LPREFIX/package.json
                              #Package information

PKG                           #PKGDIR|PKGREPO|PKGNAME
PKGDIR                        #DIR with package.json
                              #  - PATH to it
                              #  - PATH|URL to .tar[.gz]|.tgz of it (must have a top-level folder "package/")
PKGREPO                       #URL to code repository among:
                              #  - git[+ssh|http|https]://*.git
                              #  - [github:]USER/REPO
                              #  - gist:[USER/]GIST_ID
                              #  - gitlab|bitbucket:USER/REPO
                              #Can end with #COMMIT, #TAG|BRANCH or #semver:RANGE
PKGNAME                       #Package name, as published on npm


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           VERSIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION
RANGE                         #See node-semver doc
PKGTARGET                     #RANGE|TAG|PKGDIR|PKGREPO

PKGNAME@RANGE                 #PKGNAME can always end with @RANGE

PACKAGE.version               #VERSION

npm version                   #Modifies PACKAGE.version in package.json, package-lock.json and npm-shrinkwrap.json
 VERSION|STR|from-git         #and (if inside a Git repo) commit it.
                              #  - STR is argument to SEMVER.inc() (see its doc)
                              #  - "from-git" uses the latest Git tag.
                              #Does not create any npm TAG
-m|--message                  #STR. Git commit message
                              #Can contain "%s", replaced with VERSION
--no-git-tag-version
CONF.git-tag-version          #If true (def), add a Git tag
CONF.tag-version-prefix       #STR prefixing Git tags (def: "v")
CONF.sign-git-tag             #If true (def: false), use git tag -s
CONF.allow-same-version       #If false (def), do not allow setting same VERSION
CONF.commit-hooks             #If false (def: true), do not run Git commit hooks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TAGS              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PKGNAME@TAG                   #PKGNAME can always end with @TAG
                              #Cannot be used if @RANGE, i.e. TAG cannot be a valid RANGE
                              #TAGs are npm tags, not Git tags.
npm install --tag=TAG         #Same as specifying PKGNAME@TAG
CONF.tag                      #Default TAG (def: "latest")

npm dist-tag ls [PKGNAME]     #
npm dist-tag
 add|rm PKGNAME TAG           #Manage npm TAGs

npm publish --tag=TAG         #npm publish always add a npm TAG. Def is "latest"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BADGES ==>                    #https://img.shields.io:
                              #  - /bundlephobia/min[zip]/PKGNAME.vsg: bundle size [with gzip]
                              #  - /npm/dw|dm|dy|dt/PKGNAME.svg: downloads per week|month|year|total
                              #  - /npm/l/PKGNAME.svg: license
                              #  - /npm/v/[@SCOPE/]PKGNAME[/TAG|BRANCH].svg: version
                              #  - /npm/types/PKGNAME.svg: Flow|TypeScript
                              #  - /node/v/[@SCOPE/]PKGNAME[/TAG|BRANCH]: Node.js version

RETRIES ==>                   #When accessing the registry, the following exist about how to retry if problems:
                              #  - CONF.fetch-retries (def: 2)
                              #  - CONF.fetch-retry-factor (def: 10): multiply the timeout each time, within min|maxtimeout
                              #  - CONF.fetch-min|maxtimeout (in ms, def: 10s and 1 minute)

LOGS ==>                      #Failures are written to ./npm-debug.log, whose verbosity depends on CONF.loglevel among
                              #"silent", "win", "error", "warn", "http" (def), "info", "verbose", "silly"
                              #Can use in JavaScript with require("npmlog") (must install package), where NPMLOG has members:
                              #  - level: same as CONF.loglevel
                              #  - record OBJ_ARR: all logs as { id UINT, level STR, prefix STR2, message STR3,
                              #    messageRaw STR4_ARR }
                              #  - maxRecordSize UINT (def: 10000)
                              #  - stream IOSTREAM (def: process.stderr). Can also use CONF.logstream.
                              #  - enable|disableColor(). Can also use CONF.color (def: true)
                              #  - pause|resume()
                              #  - log.warn|http|etc.(PREFIX_STR, STR...)
                              #  - on("log[.LEVEL]", FUNC(OBJ))
                              #  - on(PREFIX_STR, FUNC(OBJ))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BOOTSTRAP           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm init                      #Create a new package.json with a set of questions
-y|--yes                      #
--scope @SCOPE                #
-f|--force                    #
CONF.init-license|version|
 author-name|email|url        #Prefill answers to questions
CONF.init-module              #If available, require this file and uses its value OBJ as package.json, instead of asking set of questions
                              #Def: ~/.npm-init.js

npm init @SCOPE               #Same as npx @SCOPE/create
npm init [@SCOPE/]PKGNAME     #Same as npx [@SCOPE/]create-PKGNAME


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         COMPATIBILITY         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.engines.node|npm|yarn #Required version RANGE for Node|npm|yarn
                              #Can be STR to always error with warning (e.g. forbid yarn)
PACKAGE.engine-strict         #BOOL (def: false): whether to abort npm install or to only print warning
PACKAGE.node-version          #Node version used to check against PACKAGE.engines.node
                              #Def: process.version

PACKAGE.os                    #Required value of process.platform among STR_ARR
                              #Can blacklist with '!'
PACKAGE.arch                  #Same for process.arch


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PUBLISH            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm publish [PKGDIR]          #Publish package to npm
                              #Def PKGDIR: $PWD
                              #Can publish several VERSION of same package.

npm pack [PKGNAME...]         #Create a *.tgz tarball of package.

npm deprecate PKGNAME STR     #Makes npm install print a STR warning
                              #If STR is "", undeprecate it.

PACKAGE.name                  #STR
                              #Max 214 chars, lowercase, URL-safe, cannot start with . or _
                              #Don't put "node" or "js".

PACKAGE.main                  #LPATH of the file which will be loaded by require(PKGNAME)
PACKAGE.browser               #Same but when loaded from browser instead of from Node.
                              #E.g. used by Webpack

PACKAGE.files                 #STR_ARR of files/dirs to publish.
                              #Same format as .gitignore except:
                              #  - whitelists instead
                              #  - "!" means blacklists
                              #  - priority to last STR in array (blacklist or not)
                              #  - LPATH (not just filename)
                              #By default, include everything.
                              #Always included:
                              #  - package.json, PACKAGE.main
                              #  - (case-insensitive, any extension) README, CHANGELOG|CHANGES|HISTORY, LICENSE, NOTICE
                              #Always excluded:
                              #  - symlinks
                              #  - .*.swp, ._*, *.orig
                              #  - node_modules, .npmrc, npm-debug.log, config.gypi, package-lock.json
                              #  - .git, .svn, CVS, .hg
                              #  - .lock-wscript, .wafpickle-*
                              #  - .DS_Store
.npmignore                    #Same but:
                              #  - blacklists instead
                              #     - PACKAGE.files has priority, unless .npmignore is inside subdirectory
                              #  - can be at LPREFIX or inside subdirectories
                              #  - same format as .gitignore, including:
                              #     - targetting filename is no slash
                              #     - directories must end with a slash
                              #  - default to .gitignore if not specified
npm publish --dry-run
CONF.dry-run                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        AUTHENTICATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ACCOUNT CRUD ==>              #Done online on npm

CONF.REGISTRY_URL:_authToken  #Access token
                              #Set by npm adduser. Can also be created online.
                              #npm REGISTRY_URL is //registry.npmjs.org/
CONF.always-auth              #BOOL (def: false). Require always being authenticated, even for GET requests

npm adduser                   #Authenticate.
                              #If user does not exist, creates it
                              #Sets CONF.REGISTRY_URL:_authToken
CONF.auth-type                #How to authenticate with npm adduser:
                              #  - 'legacy' (default): prompts for username|password|email
                              #  - 'sso'
                              #  - 'saml'
                              #  - 'oauth'
CONF.sso-type                 #With CONF.auth-type 'sso', whether to use 'saml', 'oauth' or null
                              #Is same as using CONF.auth-type 'saml|oauth'
CONF.sso-poll-frequency       #With CONF.auth-type 'sso', how often to poll during authentication (in ms, def: 500)

CONF.strict-ssl               #BOOL true (def) for SSL authentication
CONF.ca                       #STR[_ARR] (def: null, i.e. known CA) with the root CA
CONF.cafile                   #STR (def: null): like CONF.ca but as a file
CONF.cert                     #STR (def: null)
CONF.key                      #STR (def: null)

npm logout                    #Remove authentication, i.e. unsets CONF.REGISTRY_URL:_authToken and invalidate token

npm whoami                    #Prints current username


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         AUTHORIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE OWNER ==>             #Can publish package, change metadata and add|rm other owners
                              #Different from organization owners

npm owner add|rm USER [PKGNAM]#
npm owner ls [PGNAME]         #Manage package owners


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         ORGANIZATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ORGANIZATION CRUD ==>         #Done online on npm

ORGANIZATION ROLES ==>        #  - collaborator/member
                              #  - admin/team admin: also team management
                              #  - owner/super admin:
                              #     - also billing, members access control, user management
                              #     - creator is first owner

SCOPE                         #USER|ORG
                              #PKGNAME can always be namespaced with "@SCOPE/"
                              #  - installed as node_modules/@SCOPE/...

TEAM                          #ORG:TEAM_NAME
                              #Group of users within ORG
                              #ORG:developers:
                              #  - automatically created
                              #  - new members automatically added to it with read-write access

npm team ls ORG               #Print TEAMs within ORG

npm team create|destroy TEAM  #
npm team add|rm TEAM USER     #
npm team ls TEAM              #
npm team edit TEAM            #Manage USERs within TEAM

npm access grant
 read-only|read-write TEAM
 [PKGNAME]                    #
npm access revoke TEAM        #Change read|write permission of TEAM for package
 [PKGNAME]                    #If package is public, 'read' is always implied.
npm access edit [PKGNAME]     #

npm access ls-packages
 [USER|SCOPE|TEAM]            #Print all matching USERs with their read-only|read-write access
npm access ls-collaborators   #Prints all USERs with their read-only|read-write access
 [PKGNAME [USER]]             #If USER, only within USER's teams


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PRIVATE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.private               #BOOL (def: false)
                              #Make npm publish fail

npm publish                   #Make package private on npm
--access public|restricted    #Default to private if PKGNAME uses @SCOPE
npm access public|restricted
 [PKGNAME]                    #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REGISTRY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.[@SCOPE:]registry        #URL of the package registry
                              #Def: https://registry.npmjs.org
                              #If SCOPE, only for packages with this SCOPE
npm adduser|logout|docs|bugs|
 search
--registry URL                #Same
npm adduser|logout
--scope SCOPE                 #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SCRIPTS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.scripts.              #"SHELL_COMMAND"
 [pre|post]CLI_COMMAND        #Fired before|after npm CLI_COMMAND [PKGNAME]
                              #  - non-0 exit code will make npm CLI_COMMAND fail, unless --force|f
                              #CLI_COMMAND can be
                              #  - start|stop|restart|test
                              #  - install|uninstall:
                              #     - when either:
                              #        - doing npm [un]install [PKGNAME]
                              #        - another project [un]installs current package
                              #     - prefer prepublish instead
                              #  - publish:
                              #     - prepublish: deprecated
                              #     - prepublishOnly: before npm publish
                              #     - prepare: before npm publish, npm install (without PACKAGE) or npm install PKGREPO
                              #  - pack
                              #  - shrinkwrap: when package-lock.json or npm-shrinkwrap.json is modified
                              #  - version
                              #  - custom one
                              #Default values:
                              #  - "start": "node server.js" if LPREFIX/server.js exists
                              #  - "preinstall": "node-gyp rebuild" if LPREFIX/binding.gyp exists

npm start|stop|test [-- ARGS] #Fire related CLI_COMMAND
npm restart [-- ARGS]         #Fire stop, restart then start CLI_COMMANDs
npm run-script CLI_COMMAND
 [-- ARGS]                    #Fire CLI_COMMAND (usually custom one)
--silent                      #
--if-present                  #Does not fail if script does not exist

LISTALLDIR/.hooks/            #Like PACKAGE.scripts.[pre|post]CLI_COMMAND but:
 [pre|post]CLI_COMMAND        #  - as a binary file
                              #  - applies to both current package and each of its dependencies

ENVVARS ==>                   #The following ENVVARs are set during npm scripts
ENVVAR npm_config_VARR        #CONF.VARR
ENVVAR npm_package_config_VARR#CONF.PKGNAME:VARR
ENVVAR npm_lifecycle_event    #[pre]CLI_COMMAND
ENVVAR npm_lifecycle_script   #SHELL_COMMAND
ENVVAR INIT_CWD               #$PWD when running script
ENVVAR PWD                    #Package's LPREFIX
                              #For [pre|post]install triggered by another project installing current package,
                              #will be current package's LPREFIX.
ENVVAR NODE                   #Node binary path

CONF.script-shell             #Shell used in SHELL_COMMAND
                              #Def: null, i.e. sh on Unix, cmd.exe on Windows

CONF.unsafe-perm              #If false (def if root) and running as root, switch UID|GID to CONF.user|group
CONF.user                     #UID|STR (def: "nobody")
CONF.group                    #GID|STR (def: current one)

CONF.scripts-prepend-node-path#Whether to add node binary directory to $PATH:
                              #  - BOOL
                              #  - "auto" (def): only if different from one currently used by npm
                              #  - "warn-only": like false, but warns if different from one currently used by npm

npm install --ignore-scripts
CONF.ignore-scripts           #Is true (def: false), does not run scripts

npm install-[ci-]test         #Same as npm install|ci + npm test


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF ==>                      #In order of priority:
                              #  - npm --VARR VAL
                              #  - ENVVAR npm_config_VARR (underscored)
                              #  - LPREFIX/.npmrc
                              #     - INI format:
                              #        - VAR = VAL
                              #        - ARR[] = VAL
                              #        - ;COMMENT or #COMMENT
                              #     - can use ${ENVVAR}
                              #  - ~/.npmrc (CONF.userconfig): same format
                              #  - GPREFIX/etc/npmrc (CONF.globalconfig): same format
                              #  - PACKAGE.config.VARR: only for PKGNAME:VARR
                              #  - PACKAGE.publishConfig.VARR: only if npm publish
                              #Dependencies' CONF is never used.
                              #Def VAL is "true"

CONF.PKGNAME:VARR             #Can have package-specific configuration VAR by prefixing with "PKGNAME:"

npm config set VARR [VAL]     #Modifies userconfig
-g|--global                   #Modifies globalconfig
npm config get VARR           #
npm config delete VARR        #
npm config list               #
-l|--long                     #Show defaults instead
npm config edit               #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DIRECTORIES          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install|ls|update|outdated
 |prefix|root|bin -g|--global #Use GPREFIX instead of LPREFIX

PREFIX                        #GPREFIX|LPREFIX
GPREFIX                       #Used for global installs (CLI)
                              #Same directory as Node install (def: ~/.nvm/versions/node/VERSION with nvm)
                              #Can be overriden by CONF.prefix
LPREFIX                       #Used for local installs (require())
                              #First directory up that holds either package.json or node_modules/, or PWD if none
LPATH                         #PATH relative to LPREFIX
npm prefix                    #Prints PREFIX

INSTALLDIR                    #GINSTALLDIR|LINSTALLDIR
GINSTALLDIR                   #GPREFIX/lib/node_modules
LINSTALLDIR                   #LPREFIX/node_modules
npm root                      #Prints INSTALLDIR/node_modules


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           BINARIES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BINDIR                        #GBINDIR|LBINDIR
GBINDIR                       #GPREFIX/bin/
LBINDIR                       #LPREFIX/node_modules/.bin/
npm bin                       #Prints BINDIR

PACKAGE.bin[.SYMLINK]         #LPATH to a binary file
                              #During npm install, create symlink from LPATH to BINDIR/SYMLINK (def SYMLINK: same filename)
                              #BINDIR are added to $PATH during npm scripts
PACKAGE.directories.bin       #Same but instead LPATH to directory instead of to each binary file
                              #Cannot be specified if PACKAGE.bin is specified
npm install --no-bin-links
CONF.bin-links                #If false (def: true), prevent binaries symlinks


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install                   #Install PACKAGE.[dev|optional|bundled]dependencies to INSTALLDIR, recursively.
npm install PKG               #Same but for a single dependency
                              #Persist to PACKAGE.*dependencies according to CONF.save*
                              #Do not install dependency's devDependencies

npm ci                        #Same as npm install (without PKG) except:
                              #  - faster
                              #  - checks: package-lock.json exists and matches package.json

npm update [PKGNAME...]       #npm install ignores dependencies that:
                              #  - are already installed in node_modules (i.e. not on fresh installs)
                              #  - match the PACKAGE.*dependencies PKGTARGET
                              #  - even if a newer version exists
                              #npm update works like npm install but does not ignore those
                              #  - and only works for already installed dependencies
                              #New version is persisted to PACKAGE.*dependencies according to CONF.save*
--depth NUM                   #Recursive depth (def: 0, i.e. only top-level)

npm outdated [PKGNAME...]     #Print package that can be updated.
                              #Shows even when latest version != allowed new version (using e.g. ^VERSION), so can show
                              #new major version, while npm install|update won't install it.
-l                            #Print more info
--depth DOUBLE                #Don't go more than DOUBLE subdepedency depth (def: Infinity)

npm uninstall [PKGNAME...]    #Inverse of npm install. Can use same options (ones that make sense)

PACKAGE.dependencies.PKGNAME  #PKGTARGET
PACKAGE.devDependencies.PKGNAM#PKGTARGET
                              #Dev dependencies are not meant for production.
                              #They are only installed when top-level.
PACKAGE.optionalDependencies. #PKGTARGET
 PKGNAME                      #Optional dependencies do not make npm install (without PKG) fail if cannot be installed
                              #For code that might not work on some machines.
PACKAGE.bundledDependencies   #PKGNAME_ARR
                              #Bundled dependencies are packed by npm publish
PACKAGE.peerDependencies.     #PKGTARGET
 PKGNAME                      #Never installed by npm install
                              #But requires any package installing this package to meet those dependencies.
                              #Should be as loose as possible to minimize constraint on parent package.

--only=prod
CONF.only "production"        #Do not install PACKAGE.devDependencies with npm install (without PKG)
CONF.production               #Same but also:
                              #  - def true if NODE_ENV === 'production'
                              #  - set NODE_ENV to 'production' in scripts
--only=dev
CONF.only "development"       #Install only PACKAGE.devDependencies with npm install (without PKG)
--no-optional
CONF.optional                 #If false (def: true), do not install PACKAGE.optionalDependencies with npm install (without PKG)

-P|--save-prod
-D|--save-dev
-O|--save-optional
-B|--save-bundle
CONF.save-                    #With npm install PKG, decide whether to persist to PACKAGE.[dev|optional|bundled]dependencies
 prod|dev|optional|bundle     #Default to -P (unless dependency already persisted)
-S|--[no-]save
CONF.save                     #If false (def: true), do not set PACKAGE.* with npm install PKG

-E|--save-exact               #When persisting to PACKAGE.*dependencies, whether to:
CONF.save-exact               #  - keep specified RANGE as is
CONF.save-prefix '~|^'        #  - normalize resolved version to ~RANGE or ^PREFIX (def)

CONF.rollback                 #If true (def), rollback npm install on error
--dry-run
CONF.dry-run                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:    DEPENDENCIES STRUCTURE     :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm dedupe [PKGNAME...]       #Deduce dependencies' dependencies, i.e.:
                              #  - installed as high in the tree as possible
                              #  - if same dependency installed twice at same depth:
                              #     - use a version that matches both ranges
                              #     - if none, install one of them at a lower depth instead to resolve conflict
                              #  - goal: avoid installing same dependency several times, to decrease node_modules size
                              #Automatically done by npm install
npm install --global-style
CONF.global-style             #BOOL (def: true if -g). Do not dedupe top-level dependencies (but dedupe second depth level)

npm prune [PKGNAME...]        #Remove dependencies present in node_modules but not specified in package.json
                              #Automatically done by npm install, providing package-lock.json exists
--[no-]production             #Also remove devDependencies.
CONF.production               #Def true if NODE_ENV === 'production'

npm prune|dedupe
--dry-run
CONF.dry-run                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm audit|config ls|ls|
 outdated|prune|search|view
-j|--json
CONF.json                     #BOOL (def: false). Print output as JSON
-p|--parseable
CONF.parseable                #BOOL (def: false). Print output as CSV


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        NATIVE MODULES         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm build [DIR]               #Lower level command called by npm install
npm rebuild [PKGNAME...]      #It compiles Node C++ native modules with node-gyp

npm install
--nodedir=DIR                 #Node source code DIR, in order to compile Node native modules.

CONF.rebuild-bundle           #If true (def), run npm rebuild when installing bundledDependencies


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOCKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LPREFIX/package-lock.json     #Description of all the dependencies currently installed with their exact version.
                              #Automatically created and updated any time new dependencies or versions are explicitely added|removed:
                              #  - including by npm [un]install PKG and npm update
                              #If present, npm install (without PKG) uses it to resolve|lock versions of PACKAGE.*dependencies
                              #Goal: locking down dependencies' exact versions between:
                              #  - several environment (production, CI, dev)
                              #  - several developers
                              #  - across time (when going back to a previous commit)
                              #Should be committed to code repository
                              #Reasons why dependencies versions might differ otherwise:
                              #  - using ~RANGE, ^RANGE, etc. in PACKAGE.*dependencies (or a dependency doing so)
                              #  - using different version of npm, or different package manager
                              #  - already published version of a package changed (including because of malicious attack)
                              #     - cannot happen on npm registry
                              #Always excluded from npm publish, i.e. only locks down for other developers, not for consumers
npm install
--no-package-lock|shrinkwrap
CONF.package-lock|shrinkwrap  #If false (def: true), do not use nor update package-lock.json and npm-shrinkwrap.json
npm install|audit
--package-lock-only
CONF.package-lock-only        #If true (def: false), only updates package-lock.json

PACKAGELOCK.name|version      #Same as PACKAGE.name|version
PACKAGELOCK.lockfileVersion   #1
PACKAGELOCK.dependencies      #PACKAGELOCKDEP
PACKAGELOCKDEP.dependencies
 .PKGNAME                     #PACKAGELOCKDEP. Follows node_modules directory structure, including dedupe.
PACKAGELOCKDEP.version        #Exact VERSION or PKG
PACKAGELOCKDEP.
 dev|optional|bundled         #BOOL. Whether part of PACKAGE.[dev|optional|bundled]dependencies
PACKAGELOCKDEP.resolved       #URL of the tarball
PACKAGELOCKDEP.integrity      #SHA1|SHA256 of content. If PKGREPO, use COMMIT instead.
PACKAGELOCKDEP.requires       #Same as merge of PACKAGE.[optional|bundled]dependencies

npm-shrinkwrap.json           #Same as package-lock.json except not excluded by npm publish, i.e.:
                              #  - dependencies's npm-shrinkwrap.json are used
                              #  - when want to lock down versions for consumers as well (should be avoided unless needed)
                              #Has priority over package-lock.json
npm shrinkwrap                #Creates npm-shrinkwrap.json
                              #Simply rename package-lock.json if exists.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LINKING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm link                      #npm install (without PKG) + symlink global dependency -> current directory (for current PKGNAME)
                              #I.e. current directory becomes also available as a global dependency
npm link PKGNAME              #Symlink local dependency -> global dependency
                              #Combined with npm link (without PKGNAME), allows symlinking local packages between each other
                              #Symlink is removed on next npm install|ci|update|uninstall
npm link DIR                  #npm link in DIR + npm link PKGNAME in current DIR
npm install --link PKGNAME    #npm install -g PKGNAME + npm link PKGNAME

npm submodule PKGNAME         #Installs PKGNAME, but as a git submodule, which means its updates/installing dependencies/etc.
                              #needs to be handled with git not with npm.
                              #PKGNAME must have a .git/ folder.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             AUDIT             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm audit                     #Prints vulnerabilities found in dependencies (package-lock.json)
                              #Checks PACKAGE.[dev|optional|bundled]dependencies but not PACKAGE.peerDependencies
                              #Print each vulnerability path (i.e. same vulnerability might be reported twice)
                              #Use vulnerabilities from nsp / Node security advisories.
--only=prod
CONF.only "production"
CONF.production
--only=dev
CONF.only "development"
--no-optional
CONF.optional                 #Like npm install
CONF.audit
npm install --no-audit        #BOOL (def: true). Run npm audit with npm install

npm audit fix                 #Update dependencies versions to fix vulnerabilities
--force
CONF.force                    #If true (def: false), also updates major versions
--dry-run
CONF.dry-run                  #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SEARCH             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.description           #STR. Used in npm search
PACKAGE.keywords              #STR_ARR. Used in npm search

npm search [STR|REGEXP...]    #Search packages and show: name, description, author, date, version, keywords
                              #Can be prefixed with - to exclude
                              #Can use:
                              #  - keywords:KEYWORD
                              #  - author:USER: PACKAGE.author
                              #  - maintainer:USER
                              #  - scope:SCOPE
                              #  - not|is:deprecated
                              #  - not|is:unstable: <1.0.0
                              #  - not|is:insecure: vulnerabilities according to nsp
                              #  - boost-exact:true: boost exact matches
--searchopts STR|REGEXP       #Same as positional argument, but does not highlight
--searchexclude STR|REGEXP    #Exclude words
-l|--long                     #Don't truncate description to one line
--no-description              #Do not show description
--searchstaleness NUM         #Cache staleness NUM (in secs, def: 900)
CONF.searchsort               #Sorting of npm search among "name" (def), "date", "description" or "keywords".

NPM SEARCH ALGORITHM ==>      #Total score = product of relevance and score
                              #Relevance:
                              #  - tokenized search (ElasticSearch edge_ngram) on PACKAGE.name|keywords|description
                              #    each having a weight of 4|2|1
                              #  - search is more English-friendly
                              #Score:
                              #  - weighted average of:
                              #     - popularity (41%)
                              #        - popularity.communityInterest (28%):
                              #           - GitHub stars + GitHub forks + GitHub subscribers + GitHub contributors
                              #        - popularity.downloadsCount (28%):
                              #           - average monthly npm downloads over last 3 months
                              #        - popularity.downloadsAcceleration (14%, 0-1):
                              #           - acceleration of npm downloads over last year
                              #        - popularity.dependentsCount (28%)
                              #           - number of package listing it as dependency
                              #     - quality (28%):
                              #        - quality.carefulness (35%, 0-1):
                              #           - 33% if has a license
                              #           - 38% for README length (max if 400 bytes)
                              #           - 13% if detect a linter
                              #              - do it by checking package.json and configuration files
                              #              - among coffeelint, csslint, editorconfig, eslint, htmlhint, jscs, htmllint,
                              #                prettier, standard, stylelint, tslint, xo
                              #           - 8% if has .npmignore or PACKAGE.files
                              #           - 8% if has CHANGELOG.md
                              #           - whole thing is 0 if marked as deprecated
                              #           - whole thing is halved if version < 1.0.0
                              #        - quality.tests (35%, 0-1)
                              #           - 60%: cumulated size of all test files (directory or file with 'test[s]|spec[s]')
                              #              - tests are /[__]test[s]|spec[s][__]/** or **/[*.]test[s]|spec[s]*
                              #              - max is 400 bytes
                              #              - half if no npm test
                              #           - 15% if using codecov|coveralls|codeclimate|scrutinizer
                              #              - detected from README badges or fetching them directly
                              #           - 25% of percentage of PR statuses (e.g. using CI on PR) that have been successful
                              #              - should be careful to wait for pending statuses before publishing to npm
                              #        - quality.health (20%)
                              #           - 50%: ratio of outdated dependencies (using David) (0% is max, 25% is min)
                              #           - 50%: ratio of dependencies with vulnerabilities (using nsp) (0% is max, 25% is min)
                              #           - divided by (n + 1) where n is number of dependencies using * or >= in version
                              #              - not done if npm-shrinkwrap.json exists
                              #        - quality.branding (10%, 0-1)
                              #           - 40%: if PACKAGE.repository.url and PACKAGE.homepage have different hostname.
                              #           - 60%: for number of README badges (max 4 badges)
                              #     - maintenance (31%):
                              #        - maintenance.releasesFrequency (33%, 0-1)
                              #           - frequent releases
                              #           - max is 2 releases per 3 months
                              #        - maintenance.commitsFrequency (17%, 0-1)
                              #           - frequent commits
                              #           - 0.9 if 5 commits per month, max if 10 commits per month
                              #        - maintenance.openIssues (17%, 0-1)
                              #           - ratio of closed issues per total issues over last period
                              #           - max if <20%
                              #           - 0.7 if no issues
                              #        - maintenance.issuesDistribution (33%)
                              #           - issues are closed fast
                              #           - 0.7 if closed within 1 month, max if closed within 5 days
                              #           - 0.7 if no issues
                              #        - if package is considered "finished", replace any of the above by 0.9 (unless they are above 0.9). Must:
                              #           - have version > 1.0.0
                              #           - not be deprecated
                              #           - has less than 15 open issues
                              #           - has npm test
                              #  - within each of the above groups:
                              #     - each sub-value is normalized by based on its position within [min, max] range of values of all packages
                              #     - this is shown as score.detail.*
                              #  - uses project "npms-analyzer"
                              #     - can see data at https://api.npms.io/v2/package/PKGNAME
                              #     - score.final uses weights 30|35|35% for popularity|quality|maintenance, but popularity is
                              #       bumped up by npm search leading to above numbers
                              #  - many of the things above rely on using GitHub
                              #  - those are shown on the right side of search results

UI ==>                        #  - npmjs.com: main one
                              #  - npms.io: very similar, same results, maintained by npm as well, not as good
                              #  - npm-stat.com: show download over time


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           METADATA            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE.homepage              #URL of the HTML project page.
                              #Def: "www.npmjs.org/package/PKGNAME"
PACKAGE.repository            #{ "type": "git|svn", "url" URL } or PKGREPO
                              #Source code repository
PACKAGE.bugs                  #Where to report bugs. { "url" STR, "email" STR2 }
                              #Def: { url: "www.npmjs.org/package/PKGNAME" }
npm docs|repo|bugs [PKGNAM...]#Open PACKAGE.homepage|repository.url|bugs with browser
CONF.browser                  #Used by npm docs|repo|bugs
                              #Def: "open"

PACKAGE.license               #STR. SPDX name or "UNLICENSED" if closed-source.

PACKAGE.author                #{ "name" STR[, "email" STR2][, "url" STR3] } or "Name <email> (url)"
PACKAGE.contributors          #OBJ_ARR (same OBJ as author)
LPREFIX/AUTHORS               #Alternative way to set PACKAGE.contributors:
                              #  - one "Name <email> (url)" per line instead.
                              #  - #COMMENT

PACKAGE.man                   #LPATH[_ARR] to man files.
                              #Install them to GPREFIX/share/man with npm install -g.
                              #Filenames should be NAME.MAN_SECTION[.gz].
                              #If NAME doesn't start with PKGNAME, it is prefixed with it.
PACKAGE.directories.man       #Same but LPATH to directory instead of each file.

PACKAGE.directories.          #LPATH.
 doc|example|lib|test         #General information about where the library main documentation|example|source|test folder is.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             INFOS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm ls [PKGNAME...]           #Print deduped dependencies tree
                              #With PKGNAME, only show branches including it, and stop at it
                              #Also prints prunable, missing and invalid dependencies.
-l|--long                     #Also print dependency's PACKAGE.description|repository|homepage
--depth NUM                   #Don't go more than NUM depth level (def: Infinity)
--prod|dev                    #Only show PACKAGE.dependencies|devDependencies
--link                        #Only show linked dependencies

npm edit PKGNAME              #Open PKGNAME's package.json
CONF.editor                   #Used by npm edit and npm config edit
                              #Def: ENVVAR EDITOR, or "vi"

npm view [PKGNAME] [VARR...]  #Prints package.json (fetched from npm) with some extra members:
                              #  - dist-tags.TAG VERSION: npm tags
                              #  - versions STR_ARR: all published versions
                              #  - time.VERSION|created|modified: published versions timestamps
                              #  - maintainers STR_ARR: owners
                              #  - readmeFilename STR
                              #  - gitHead COMMIT
                              #  - dist (published files):
                              #     - fileCount NUM
                              #     - unpackedSize NUM
                              #     - tarball URL
                              #     - integrity|shasum STR: hashes

npm explore PKGNAME
 -- SHELL_COMMAND             #Temporarily change PDW to PKGNAME's DIR then fires SHELL_COMMAND
CONF.shell                    #Def: SHELL ENVVAR or "bash"


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.cache                    #PATH (def: ~/.npm). Cache in inside PATH/_cacache/
                              #Used by npm install to cache packages
                              #Only use cached package if it has been cached more than 10 seconds ago.
CONF.cache-lock-stale         #How long to lock cached files when being written to (in ms, def: 1 min.)
CONF.cache-lock-retries       #NUM (def: 10)
CONF.cache-lock-wait          #NUM (in ms, def: 10s)

npm cache add PKG
npm cache clean [PATH]        #Manipulate cache
npm cache verify              #Cleanup and verify cache

npm install                   #
--offline
CONF.offline                  #BOOL (def: false). Only use cache.
--prefer-offline
CONF.prefer-offline           #BOOL (def: false). Use cached packages even if cached less than 10 seconds ago.
--prefer-online
CONF.prefer-online            #BOOL (def: false). Revalidate cache with npm even if already cached.
-f|--force
CONF.force                    #BOOL (def: false). Do not use cache

CONF.searchstaleness          #NUM (in ms, def: 900). How long to cache npm search


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        TROUBLESHOOTING        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm doctor                    #Check npm installation:
                              #  - can connect to npm registry
                              #  - latest npm|node version
                              #  - can use git
                              #  - files permissions
                              #  - cache corruptions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             HOOKS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/



npm hook add                  #Add a webhook.
 PKGNAME|~USER|@SCOPE         #Triggered on new package activity
 URI SECRET                   #Do a POST URI with JSON:
                              #  - version '1.0.0': on the payload format
                              #  - type 'package'
                              #  - name 'PKGNAME'
                              #  - event STR among:
                              #     - 'package:[un]publish': npm [un]publish
                              #     - 'package:dist-tag[-rm]': npm dist-tag add|rm
                              #     - 'package:[un]deprecated': npm deprecate
                              #     - 'package:owner[-rm]': npm owner add|rm
                              #     - 'package:[un]star': npm [un]star
                              #     - 'package:change': any other
                              #  - change OBJ:
                              #     ('package:[un]publish')
                              #     - version VERSION
                              #     ('package:dist-tag[-rm]')
                              #     - dist-tag TAG
                              #     ('package:[un]deprecated')
                              #     - deprecated VERSION
                              #     ('package:owner[-rm]')
                              #     - maintainer USER
                              #     ('package:[un]star')
                              #     - user USER
                              #  - payload OBJ: similar payload as npm view --json
                              #  - time TIMESTAMP_NUM
                              #  - hookOwner 'USER': who did npm hook add
                              #Also use X-Npm-Signature: sha256=HMAC_SHA256(BODY, SECRET) [C] for shared secret authentication
                              #Max 100 webhooks
npm hook ls [PKGNAME]         #Print hooks, including HOOK_ID
npm hook update
 HOOK_ID URI [SECRET]         #
npm hook rm HOOK_ID           #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            OTHERS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm [un]star [PKGNAME...]     #Show appreciation of a package, by putting it as favorite.
npm stars [SHELL_USER]        #Show starred packages.

