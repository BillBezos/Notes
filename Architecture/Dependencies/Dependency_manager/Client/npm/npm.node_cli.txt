
       
   NPM  
       


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             MAIN              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSION ==>                   #2.11.1

SUMMARY ==>                   #Installs/updates:
                              #  - npm init for package.json. Also managing .gitignore, main, directories and *dependencies.
                              #  - can use package.json scripts as lifecycle triggers, or to give commands to user
                              #  - npm [un]install [PACKAGE] -S|D|O|B [-g]
                              #  - npm link or npm install --link for dependencies developped locally
                              #  - npm update [PKGNAME...] for dependencies updates
                              #  - npm version for developped package update
                              #Infos:
                              #  - npm search for all packages
                              #  - npm list for installed packages
                              #  - npm view for package info
                              #Publishing:
                              #  - npm adduser once, then can add others with npm owner add|rm
                              #  - npm publish|deprecate on new|old versions


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PROGRAMMATIC          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


require("npm")                #Use in JavaScript instead of command line.
                              #Returns NPM
NPM.load(OBJ, FUNC(ERROR))    #Starts npm, with OBJ being the NPM_ENVVAR
                              #If NPM_ENVVAR onload-script exist as a path to a Node module, require() it
NPM.commands.COMMAND(ARGS,
FUNC(ERROR, VAL))             #Like npm COMMAND ARGS. See online doc for ARGS type.
NPM.config.set(NPM_ENVVAR,VAL)#
NPM.config.get(NPM_ENVVAR)    #
NPM.config.delete(NPM_ENVVAR) #
NPM.config.list()             #Like npm config
NPM.prefix                    #LOCALDIR
NPM.globalPrefix              #GLOBALDIR
NPM.bin                       #LOCALDIR/.bin/
NPM.globalBin                 #GLOBALDIR/bin/
NPM.dir                       #LOCALDIR/node_modules/
NPM.globalDir                 #GLOBALDIR/node_modules/
NPM.cache                     #Cache DIR
NPM.tmp                       #Temp DIR. It is NPM_ENVVAR tmp (def: "/tmp or ENVVAR TMPDIR")
NPM.on("log", FUNC(STR))      #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            PACKAGE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PACKAGE                       #Can be:
                              #  - DIR with package.json
                              #     - PATH to it
                              #     - PATH|URL to gzipped of it
                              #     - Git URL to it
                              #        - can be:
                              #           - git+ssh|http|https://*.git
                              #           - [github:]USER/REPO
                              #           - gist:[USER]/GIST_ID
                              #        - can end with #TAG|BRANCH
                              #  - PKGNAME, registered to npm
                              #     - can end with @VERSION|TAG (def: @latest)
                              #     - can start with "@SCOPE/", i.e. a group of registries (can be public or private)

PUBLISHING ==>                #Accounts:
                              #  - username, password, email. Registered to npm.
                              #  - Creation:
                              #     - npm adduser
                              #     - also puts NPM_ENVVAR username and email in .npmrc
                              #  - Updates:
                              #     - email: npm adduser
                              #     - password: ask online
                              #     - username: can't update nor remove
                              #  - npm whoami
                              #  - Owners:
                              #     - users authorized to run:
                              #        - npm publish|deprecate|tag|[un]star|stars and owner add|rm,
                              #        - and (if NPM_ENVVAR always-auth true) for anything else requesting the registry
                              #     - can also use NPM_ENVVAR strict-ssl true (def) with:
                              #        - NPM_ENVVAR ca (def: undefined) with the root CA (if null: known CA)
                              #        - NPM_ENVVAR cert (def: null)
                              #        - NPM_ENVVAR key (def: null)
                              #     - Creator is first owner.
                              #     - npm owner ls PKGNAME, to see owners
                              #     - npm owner add|rm PKGNAME, to manage ownership (there is only one level)
                              #Actions:
                              #  - npm publish PACKAGE (no Git URL nor PKGNAME)
                              #     - with TAG, can use PKGNAME@TAG with other commands
                              #     - can publish several VERSION of same package.
                              #  - npm-deprecate PKGNAME STR:
                              #     - makes npm install print a warning with STR
                              #     - if STR is "", undeprecate it.

BADGES ==>                    #https://img.shields.io:
                              #  - /bundlephobia/min[zip]/PKGNAME.vsg: bundle size [with gzip]
                              #  - /npm/dw|dm|dy|dt/PKGNAME.svg: downloads per week|month|year|total
                              #  - /npm/l/PKGNAME.svg: license
                              #  - /npm/v/[@SCOPE/]PKGNAME[/TAG|BRANCH].svg: version
                              #  - /npm/types/PKGNAME.svg: Flow|TypeScript
                              #  - /node/v/[@SCOPE/]PKGNAME[/TAG|BRANCH]: Node.js version

PRIVATE REPO ==>              #  - npm access:
                              #     - public|restricted [PKGNAME] (or npm publish --access public|restricted)
                              #     - add read-only|write USER [PKGNAME]
                              #     - rm USER [PKGNAME]
                              #     - ls|edit [PKGNAME]
                              #  - package.json private true: refuse to npm publish it.
                              #  - NPM_ENVVAR registry for private registry URL (instead of http://registry.npmjs.org)
                              #     - if using NPM_ENVVAR scope SCOPE with npm adduser|logout, any package starting with "@SCOPE"
                              #       will use that registry URL

GLOBALDIR                     #Same as process.installPrefix (def: /usr/), used for global installs (NPM_ENVVAR prefix)
LOCALDIR                      #Directory that holds either package.json or node_modules/, used for local installs.
                              #Is looked up in current directory, then up. If not found, use PWD.
                              #LOCALDIR/node_modules/ can be printed by npm root [-g]
LOCALPATH                     #PATH relative to LOCALDIR
BINARIES ==>                  #  - Symlinks are created from GLOBALDIR/bin/ (global install) or LOCALDIR/node_modules/.bin/
                              #    (local install) for all dependencies
                              #  - Are added to $PATH for npm scripts
                              #  - Must specify binaries in package.json directories
                              #  - Can show the directory with npm bin [-g]

LOGS ==>                      #Failures are written to ./npm-debug.log, whose verbosity depends on NPM_ENVVAR loglevel among
                              #"silent", "win", "error", "warn", "http" (def), "info", "verbose", "silly"
                              #Can use in JavaScript with require("npmlog") (must install package), where NPMLOG has members:
                              #  - level: same as NPM_ENVVAR loglevel
                              #  - record OBJ_ARR: all logs as { id UINT, level STR, prefix STR2, message STR3,
                              #    messageRaw STR4_ARR }
                              #  - maxRecordSize UINT (def: 10000)
                              #  - stream IOSTREAM (def: process.stderr). Can also use NPM_ENVVAR logstream.
                              #  - enable|disableColor(). Can also use NPM_ENVVAR color (def: true)
                              #  - pause|resume()
                              #  - log.warn|http|etc.(PREFIX_STR, STR...)
                              #  - on("log[.LEVEL]", FUNC(OBJ))
                              #  - on(PREFIX_STR, FUNC(OBJ))

VERSION                       #Use semantic versioning and can be:
                              #  - ">|<|>=|<=VERSION ..."
                              #  - "VERSION - VERSION2"
                              #  - "~VERSION": >= VERSION until next minor release change
                              #  - "^VERSION": >= VERSION until next major release change

TAGS ==>                      #  - If @VERSION is not specified, use NPM_ENVVAR tag (def: "latest").
                              #    Used for example by npm install, update or publish.
                              #  - Can change NPM_ENVVAR tag or use PACKAGE@TAG to change preferred TAG
                              #  - attached to a VERSION with either:
                              #     - Git tags
                              #     - npm publish PACKAGE --tag TAG
                              #     - npm dist-tag add PKGNAME@VERSION [TAG]
                              #        - also npm dist-tag rm PKGNAME TAG, and npm dist-tag ls [PKGNAME]
                              #     - npm version (if NPM_ENVVAR git-tag-version is true (def: false))


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         PACKAGE.JSON          :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


package.json                  #Holds information about current package and dependencies. It is a OBJ with members below.
                              #Can be created with npm init in an interactive way.
                              #Can be edited with npm edit PKGNAME

name                          #STR. Don't put "node" or "js". Must be URL-safe.
version                       #VERSION
description                   #STR. Used in npm search
keywords                      #STR_ARR. Used in npm search

homepage                      #URL of the HTML project page.
                              #Can be shown by npm docs [PKGNAME...], using NPM_ENVVAR browser
                              #Def STR is "www.npmjs.org/package/PKGNAME"
repository                    #{ "type": "git|svn", "url" URL }, where URL is repository URL, for contributors.
                              #Can be shown by npm repo [PKGNAME...], using NPM_ENVVAR browser
bugs                          #{ "url" STR, "email" STR2 }. STR is used by npm bugs [PKGNAME], which opens in a NPM_ENVVAR browser
                              #Def STR is "www.npmjs.org/package/PKGNAME"
author                        #{ "name" STR, "email" STR2, "url" STR3 } or "Name <email> (url)"
contributors                  #OBJ_ARR (same OBJ as author)
                              #Can also use AUTHORS file with one "Name <email> (url)" per line instead.
license                       #{ "license" STR }, where STR is SPDX name, or { "type" STR, "url" STR2 }

files                         #LOCALPATH_ARR of files (not dirs) to publish. Can use * and ** (like .gitignore)
                              #By default, include everything.
                              #Can also *instead* create a LOCALDIR/.gitignore|npmignore to exclude some files/dirs.
                              #.npmignore has priority over .gitignore
                              #The following are excluded by def: .*.swp, ._*, .DS_Store, .git, .hg, .lock-wscript, .svn,
                              #.wafpickle-*, CSV, npm-debug.log, node_modules
                              #package.json is always included.
main                          #LOCALPATH of the file which will be loaded by require(PKGNAME)
directories                   #OBJ with LOCALPATH of following DIR:
                              #  - bin: create binaries symlinks for all files in DIR
                              #    Can also use { bin: { SYMLINK: LOCALPATH ... } } instead of { bin: LOCALPATH } in order to
                              #    choose symlink name
                              #    User can prevent symlinks with NPM_ENVVAR bin-links false (def: true)
                              #  - man: man files should be NAME.NUMBER[.gz].
                              #    If NAME doesn't start with package name, it is prefixed with it.
                              #    Can also use { man ... } directly
                              #  - lib
                              #  - doc
                              #  - example

dependencies                  #{ "PKGNAME": VERSION|PACKAGE... } where:
devDependencies               #  - VERSION can be "*" for any version
optionalDependencies          #  - PACKAGE can't be PKGNAME
bundledDependencies           #  - bundledDependencies is PKGNAME_ARR
peerDependencies              #Difference is whether npm install [PACKAGE] target them:
                              #  - dependencies: always
                              #  - optionalDependencies: only if NPM_ENVVAR optional true (def)
                              #    Also: doesn't make npm fail if can't be installed.
                              #  - devDependencies: only if NPM_ENVVAR dev true and NPM_ENVVAR production false.
                              #    This is the default with npm install, but not with npm install PACKAGE
                              #    Should be dependencies not to be installed on end-users: testing/doc frameworks, etc.
                              #  - bundledDependencies: never.
                              #    For dependencies that are committed and published (see above)
                              #    Are npm rebuild at install if NPM_ENVVAR rebuild-bundle true (def)
                              #  - peerDependencies: always. For parent project of a plugin, since the plugin does not
                              #    necessarily require the parent, but the other way around.
                              #Should not commit node_modules

engines                       #Same as dependencies, but PKGNAME is "node|npm"
                              #Only works if NPM_ENVVAR engine-strict true (def: false) (otherwise, just warning)
                              #Client can manipulate the node version with NPM_ENVVAR node-version.

os                            #STR_ARR, where STR are OS supported and !STR not supported.
                              #OS are like process.platform: "darwin", "freebsd", "linux", "sunos" or "win32"
arch                          #Same for CPU (like process.arch): "arm", "ia32" or "x64"

publishConfig                 #{ tag: STR, registry: STR } overriding NPM_ENVVAR tag and registry with npm publish.
preferGlobal                  #If true, warn users when installing locally (packages meant to be installed globally).

scripts                       #{ [pre|post]NODE_COMMAND: SHELL_COMMAND ... }
                              #Fires SHELL_COMMAND before|after npm NODE_COMMAND [PKGNAME], among publish, install, update,
                              #test, version, stop, start or restart.
                              #Can use custom NODE_COMMAND with npm run[-script] NODE_COMMAND [-- ARGS]
                              #  - build tasks (like Gulp/Grunt) should be put in prepublish instead of postinstall
                              #  - start NODE_COMMAND has a default SHELL_COMMAND "node server.js" if LOCALDIR/server.js exists
                              #  - preinstall NODE_COMMAND has a default SHELL_COMMAND "node-gyp rebuild" if
                              #    LOCALDIR/binding.gyp exists
                              #Scripts:
                              #  - When fired as root, unless NPM_ENVVAR unsafe-perm true (def), run under ENVVAR user
                              #    (def: "nobody") and NPM_ENVVAR group (def: current one)
                              #  - $PATH includes LOCALDIR/.bin/
                              #  - NPM_ENVVARs become normal environment variables
                              #  - Can use package.json members as ENVVAR npm_package_*, e.g. npm_package_keywords_1 or
                              #    npm_package_bugs_url
                              #  - Can use ENVVAR npm_lifecycle_event set to [pre]NODE_COMMAND
                              #  - Non-0 exit code will make npm fail, unless npm [pre]NODE_COMMAND -f is used
                              #  - If NPM_ENVVAR npat true (def: false), npm test is run on installation, and NPM_ENVVAR dev is true
                              #    on installation
                              #  - Can be ignored if NPM_ENVVAR ignore-scripts is true (def: false)
                              #  - Output can be silent with npm run-script ... --silent
                              #Can set scripts for all dependencies too by creating LOCALDIR/node_modules/.hooks/[pre]NODCOMAND
                              #script file.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


NPM_ENVVAR ==>                #Different from ENVVAR.
                              #In order of priority:
                              #  - command line --NPM_ENVVAR VAL
                              #  - ENVVAR npm_config_NPM_ENVVAR
                              #  - config { VAR: VAL ... } in package.json:
                              #      - can be overridden by NPM_ENVVAR PKGNAME:VAR
                              #      - makes it possible to have package-specific variables
                              #  - ./.npmrc, ~/.npmrc (NPM_ENVVAR userconfig) and /usr/etc/npmrc (NPM_ENVVAR globalconfig)
                              #     - NPM_ENVVAR = VAL ...
                              #     - can use ${ENVVAR}
npm [config] set NPM_ENVVAR
 [VAL]                        #Modifies ~/.npmrc
npm [config] get NPM_ENVVAR   #
npm config delete NPM_ENVVAR  #
npm config list               #With -l: show defaults instead
npm config edit               #

RETRIES ==>                   #When accessing the registry, the following NPM_ENVVAR exist about how to retry if problems:
                              #  - fetch-retries (def: 2)
                              #  - fetch-retry-factor (def: 10): multiply the timeout each time, within min|maxtimeout
                              #  - fetch-min|maxtimeout (in ms, def: 10s and 1 minute)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        INSTALL/UPDATES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm install [PACKAGE]         #Install PACKAGE and its dependencies found in package.json.
                              #See above about when devDependencies and optionalDependencies are installed.
                              #PACKAGE by def. is LOCALDIR package.
                              #If local install, and PACKAGE by def., already installed, so only install dependencies.
                              #Can either:
                              #  - Local install (def): in LOCALDIR/.node_modules/
                              #    Prefer if included with require()
                              #  - Global install (with -g): in GLOBALDIR/[lib/]node_modules/
                              #    lib/ is Unix only.
                              #    Prefer if run as standalone on command-line.
                              #Also creates binaries symlinks (see above).
                              #Doesn't update already installed, but install latest if not installed (def TAG is "latest")
                              #If error, rollback is NPM_ENVVAR rollback true (def)
-S|D|O|B                      #Add PACKAGE to dependencies|devDependencies|optional|bundledDependencies in package.json
                              #VERSION used in package.json are the same exact if -E, or any compatible (major release number)
                              #otherwise, or any compatible minor release number if NPM_ENVVAR save-prefix '~'
-f                            #Force fetching on the internet even when there is a cached version.
--nodedir=DIR                 #Node source code DIR, in order to compile Node native modules.
--link                        #Install globally, then use npm link PKGNAME
npm uninstall [PKGNAME]       #Can use -g
-S|D|O|B                      #Removes from package.json

npm update [PKGNAME...]       #Update package for either local installs (def) or global (-g), according to current TAG
                              #(def: "latest").
                              #Without PKGNAME, update current package dependencies.
                              #Can use -g for global installed packages.
npm outdated [PKGNAME...]     #Print package that can be updated.
                              #Shows even when latest version != allowed new version (using e.g. ^VERSION), so can show
                              #new major version, while npm install|update won't install it.
                              #Can use -g for global installed packages.
-l                            #Print more info
-p                            #Print as colon-separated list
--json                        #
--depth DOUBLE                #Don't go more than DOUBLE subdepedency depth (def: Infinity)
npm version VERSION           #Modifies package.json version.
                              #VERSION can be major|minor|patch to increment version.
                              #If there is a .git, will commit with a tag with the version:
                              #  - Can then use -m STR to specify a commit message, which can include %s for the version.
                              #  - If NPM_ENVVAR sign-git-tag true (def: false), sign the commit with git -s (must have a GPG key)
                              #  - --no-git-tag-version can be used not to add a tag
npm shrinkwrap                #For current package, creates/updates LOCALDIR/npm-shrinkwrap.json:
                              #  - specifies current dependencies exact versions.
                              #  - npm install will look at dependencies versions using this file instead of package.json
                              #    (unless NPM_ENVVAR shrinkwrap is false (def: true)), which means it will look for exact version.
                              #  - Goal is to lock down dependencies version, for tightly controlled end-user project.
                              #  - Don't use devDependencies unless NPM_ENVVAR dev is true

npm link [PKGNAME]            #2 steps:
                              # 1) Without PKGNAME, creates symlink in GLOBALDIR (including for binaries) that look like it's
                              #    been installed globally, but pointing to LOCALDIR
                              # 2) With PKGNAME, creates symlinks in LOCALDIR (including for binaries) that look like it's
                              #    been installed locally, but pointing to global symlinks.
                              #Goal is to have a dependency to a package developed/stored locally without having to
                              #reinstall the dependency each time it changes.
                              #Those symlinked dependencies:
                              #  - are "snapshotted" if package is published

npm submodule PKGNAME         #Installs PKGNAME, but as a git submodule, which means its updates/installing dependencies/etc.
                              #needs to be handled with git not with npm.
                              #PKGNAME must have a .git/ folder.
npm [re]build [PKGNAME...]    #Fires node-gyp [recursively], for packages with C/C++ addons. Automatically done by npm install
npm pack [PKGNAME...]         #Create a *.tgz tarball of package.

npm prune [PKGNAME...]        #Uninstall "extraneous" dependencies, i.e. that are installed but not specified in package.json
                              #*dependencies.
--production                  #Doesn't read devDependencies, which mean they are uninstalled.
npm dedupe [PKGNAME...]       #Reduces installed package size by eliminating duplicate dependencies' dependencies, by putting
                              #them upper in the tree.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             INFOS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm search [STR|REGEXP...]    #Show all packages: name, description, author, date.
                              #Output is sorted according to NPM_ENVVAR searchsort among "name" (def), "date", "description" or
                              #"keywords".
                              #Can also use:
                              #  - npm.com: can sort by rating
                              #  - npmsearch.com: can sort by relevance, downloads and freshness
                              #  - npm-stat.com: show download over time
-l                            #Don't truncate description to one line
-p                            #Print as colon-separated list.

npm list                      #
--json                        #Show everything installed, including dependencies
-p                            #Print as colon-separated list.
--depth DOUBLE                #Don't go more than DOUBLE subdepedency depth (def: Infinity)
--production|dev              #

npm view [PKGNAME]            #Prints package.json, with some extra members like versions STR_ARR, time OBJ
[VAR[.VAR2]...]               #(versions timestamps), dist-tags OBJ (TAG), dist { shasum, tarball }, users STR_ARR
--json                        #Fetch on the internet (not local install).
npm explore PKGNAME           #Spawns a new Bash (NPM_ENVVAR shell) session with PKGNAME DIR in node_modules/ as $PWD.
[-- SHELL_COMMAND]            #If SHELL_COMMAND, new session is temporary to SHELL_COMMAND execution.
                              #Often used to perform git commands in a dependency (like git pull). If using git pull, npm
                              #rebuild should be used afterwards.


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             UTILS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


npm cache add PACKAGE         #Manipulate cached packages in NPM_ENVVAR cache (def: ~/.npm)
npm cache clean               #npm install automatically use the cache, and also npm search|view if cache is recent enough.
[PKGNAME[/VERSION]]           #If a cache file is being written, it is locked. The lockfile last for NPM_ENVVAR cache-lock-stale
npm cache list                #(in ms, def: 1 min.), other will try NPM_ENVVAR cache-lock-retries (def: 10) times with spaces of
[PKGNAME[/VERSION]]           #NPM_ENVVAR cache-lock-wait ms (def: 10s)
                              #Cached item will only checked between NPM_ENVVAR cache-min (in sec, def: 10) and NPM_ENVVAR cache-max
                              #(def: Infinity) after its creation.

npm completion                #Outputs a Bash script that adds npm commands completion.
                              #Use . <(npm completion) in a .bashrc

npm [un]star [PKGNAME...]     #Show appreciation of a package, by putting it as favorite.
npm stars [SHELL_USER]        #Show starred packages.
