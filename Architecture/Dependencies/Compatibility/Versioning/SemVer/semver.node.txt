
          
   SEMVER  
          



VERSION ==>                       #5.5.1


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            VERSION            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SVERSION                          #'VERSION' following SemVer
VERSION                           #Like SVERSION but can also:
                                  #  - have trailing whitespaces
                                  #  - start with 'v' or '='
LVERSION                          #Like VERSION but can also start|ends with any non-confirming character

LOOSE MODE ==>                    #All SEMVER.*() can use last argument true to use looser parsing


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             RANGE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


RANGE || RANGE2                   #or
                                  #When checking ranges, remember that they can be discontinuous.

RANGE RANGE2                      #and

VERSION                           #Like =VERSION

>|>=|<=|<|=VERSION                #Accross major versions
                                  #VERSION with a prerelease tags:
                                  #  - skipped by RANGE, even if satisfies it
                                  #  - unless RANGE has exactly same V.X.Y

VERSION - VERSION2                #Same as >=VERSION <=VERSION2
                                  #If VERSION misses X|Y, replaced with 0
                                  #If VERSION2 misses X|Y, replaced with next version with 0 and <

WILDCARDS ==>                     #  - "" or "x|X|*" -->  >=0.0.0
                                  #  - V[.x|X|*]     -->  >=V.0.0
                                  #  - V.X[.x|X|*]   -->  >=V.X.0

TILDE ==>                         #  - ~V       -->  V.*
                                  #  - ~V.X     -->  V.X.*
                                  #  - ~V.X.Y   -->  V.X.* >= V.X.Y
                                  #  - ~V.X.Y-Z -->  V.X.* >= V.X.Y-Z

CARET ==>                         #  - ^V.X.Y[-Z] -->  V.* >= V.X.Y[-Z]
                                  #  - ^0.X.Y[-Z] -->  V.X.* >= 0.X.Y[-Z]
                                  #  - ^0.0.Y[-Z] -->  0.0.Y[-Z]
                                  #  - ^V.*.* (or related) -->  V.*.*
                                  #  - ^V.X.* -->  V.X.*


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             PARSE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.valid(SVERSION)
 ->SVERSION|null                  #null if not valid
SEMVER.clean(VVERSIN)
 ->SVERSION|null                  #
SEMVER.coerce(LVERSION)
 ->SVERSION|null                  #

SEMVER.major|minor|patch(VERSION)
 ->NUM                            #
SEMVER.prerelease(VERSION)
 ->STR_ARR|null                   #Prerelease tags, split on '.'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             DIFF              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.diff(VERSION, VERSION2)    #Among '[pre]major|minor|patch' and 'prerelease'
 ->STR                            #  - 'pre*': when different major|minor|patch, and one VERSION has a prerelease tag
SEMVER.inc(VERSION, STR[, STR2])  #Increment where STR can be:
 ->VERSION|null                   #  - 'major|minor|patch'
                                  #  - 'premajor|minor|patch': same but with prerelease tag '[STR2]-0'
                                  #  - 'prerelease': increment prerelease tag if any, same as pre-patch otherwise


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TEST              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.validRange(RANGE)
 ->RANGE|null                     #null if not valid
SEMVER.intersects(RANGE, RANGE2)
 ->BOOL                           #
SEMVER.satisfies(VERSION, RANGE)
 ->BOOL                           #
SEMVER.min|maxSatisfying
 (VERSION_ARR, RANGE)->VERSION    #
SEMVER.gtr|ltr(VERSION, RANGE)
 ->BOOL                           #VERSION >|< any version within RANGE
SEMVER.outside
 (VERSION, '>|<', RANGE)->BOOL    #Same


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            COMPARE            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SEMVER.gt|lt|gte|lte|eq|neq
 (VERSION, VERSION2)->BOOL        #Check precedence
SEMVER.comp(VERSION,
 '>|>=|<|<=|==|!=', VERSION2)
 ->BOOL                           #Same
SEMVER.[r]compare
 (VERSION, VERSION2)->-1|0|1      #If 'r', inverse


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


semver VERSION...                 #Filter invalid ones, sort by precedence then print.
                                  #Exit code 1 if no valid ones.
--range|r RANGE                   #Filter by SEMVER.satisfies()
--loose|l                         #
--coerce|c                        #SEMVER.coerce()

semver --increment|i [STR] VERSION#Do SEMVER.inc() (def STR: 'patch')
--preid STR2                      #
