
              
   VERSIONING  
              



                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           PROBLEMS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DEPENDENCY HELL ==>               #Generic word for poor installability

MANUAL RESOLUTION ==>             #When user must install each level of the dependency chain manually
                                  #Solution: package manager

CONFLICTING DEPENDENCIES ==>      #When two dependencies depend on two different versions of same dependency
                                  #Also called "diamond dependency"
                                  #Solutions:
                                  #  - looser versions requirement (e.g. using ^ or ~ with npm)
                                  #  - allowing dependencies to have different copies of same dependency (e.g. what npm does)

CIRCULAR DEPENDENCIES ==>         #Two circular dependencies must be upgrade at same time, because each require a newer version
                                  #of the other.
                                  #Solution: separating download step and run step

BREAKING DEPENDENCIES ==>         #Upgrading a dependencies introduces breaking changes
                                  #Solution: versioning scheme

LOTS OF DEPENDENCIES ==>          #Make installation slow
                                  #Also:
                                  #  - require lots of memory
                                  #  - less portable
                                  #  - more prone to security vulnerability
                                  #  - more complex


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            SCHEME             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


VERSIONING SCHEME ==>             #Should be advertised

SEMVER ==>                        #Semantic versioning (2.0.0)
                                  #[0.]V.X.Y:
                                  #  - V: major number, i.e. backward-incompatible changes
                                  #  - X: minor number, i.e. backward-compatible new features
                                  #  - Y: patch number, i.e. backward-compatible bugfixes
                                  #  - 0: means beta
                                  #Also:
                                  #  - no leading zero
                                  #  - [:alnum:]- in Z
                                  #  - numbers are incremented from 0

GENERIC ==>                       #V.X[.Y]]-Z[[+B][word]:
                                  #  - V|X|Y: like semver
                                  #  - Y: also called revision|bugfix number
                                  #  - Z: pre-release stage
                                  #  - B: build information, NUMBER.METADATA.OPTIONS
                                  #     - NUMBER starts at 1
                                  #  - word: target plateform
                                  #V:X.Y...: alternative writing

TIMESTAMP ==>                     #E.g. 20120302, or Ubuntu 11.10
                                  #Easier to create but communicate less information to users

WORDS ==>                         #More marketing, but less information to technical users


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            STAGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PRE-RELEASE ==>                   #Stages:
                                  #  - pre-alpha: before implementation (e.g. research)
                                  #  - alpha (a*): start testing
                                  #  - beta (b*): major bugs fixed
                                  #  - release candidates (rc): most bugs fixed
                                  #  - release to manufacturing (RTM): can be deployed
                                  #  - canary: deployed to small number of end-users
                                  #  - production / general availability (GA): deployed to all
                                  #  - end-of-life: will retire
