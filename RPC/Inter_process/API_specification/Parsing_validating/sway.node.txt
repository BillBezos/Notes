
        
   SWAY  
        



VERSION ==>                  ##1.0.0

FEATURES ==>                 ##  - dereference JSON pointers
                             ##  - OpenAPI 2.0 only
                             ##  - validation
                             ##Also creates an object model
                             ##Can validate against a REQ|RES
                             ##Can generate mock data (using JSON-SCHEMA-FAKER)
                             ##Uses z-schema for JSON schema validation

SWAY.create(OPTS)
 ->PROMISE_SSPEC             ##OPTS.definitions SPEC|'PATH'|'URL'
SSPEC.options                ##OPTS


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          TRAVERSING           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSPEC|SPATHDEF|SOPERATION|
 SPARAM|SRESP                ##Wrapper around SPEC|PATHDEF|OPERATION|PARAM|RESP
SSPEC|SPATHDEF|SOPERATION|
 SPARAM|SRESP.definition     ##Underlying SPEC|PATHDEF|OPERATION|PARAM|RESP
SSPEC|SPATHDEF|SOPERATION|
 SPARAM|SRESP.*              ##Same as *.definitionFullyResolved.*

SSPEC.pathObjects|getPaths() ##{ '/PATH': SPATHDEF }
SSPEC.getPath('/PATH'|REQ)
 ->SPATHDEF                  ##Using REQ.originalUrl|url
SPATHDEF.path                ##'/PATH'
SPATHDEF.api                 ##SSPEC

SSPEC
 .getOperations(['/PATH'])
 ->SOPERATION_ARR            ##
SSPEC.getOperation
 (REQ|'operationId'|'METHOD'|
 '/PATH'[, 'METHOD'])
 ->SOPERATION                ##Using REQ.method
SPATHDEF.operationObjects|
 getOperations()             ##SOPERATION_ARR
SPATHDEF.getOperation
 ('operationId'|'METHOD')
 ->SOPERATION                ##
SSPEC|SPATHDEF
 .getOperationsByTag('TAG')
 ->SOPERATION_ARR            ##
SOPERATION.method            ##'METHOD'
SOPERATION.pathObject        ##SPATHDEF

SPATHDEF|SOPERATION.
 parameterObjects|
 getParameters()             ##SPARAM_ARR
SOPERATION.getParameter
 ('NAME'[, 'IN'])->SPARAM    ##
SPARAM.
 pathObject|operationObject  ##SPATHDEF|SOPERATION

SOPERATION.responseObjects|
 getResponses()              ##SRESP_ARR
SOPERATION.getResponse
 (['STATUS_CODE'])->SRESP    ##Def: 'default'
SRESP.statusCode             ##'STATUS_CODE'
SRESP.operationObject        ##SOPERATION


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:        JSON REFERENCES        :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


OPTS.jsonRefs                ##OBJ options to JSON-REFS (see its doc)
                             ##Including OBJ.resolveCirculars BOOL (def: false)

SSPEC|SPATHDEF|SOPERATION|
 SPARAM|SRESP.
 definitionFullyResolved     ##Like *.definition but with all JSON references resolved
SSPEC.
 definitionRemotesResolved   ##Like *.definition but with only remote JSON references resolved

SSPEC.references             ##JSON references
SPATHDEF|SOPERATION|SPARAM|
 SRESP.ptr                   ##JSON pointer STR to the property
SPATHDEF|SOPERATION|SPARAM|
 SRESP.pathToDefinition      ##'VAR'_ARR of the property path


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NORMALIZATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPATHDEF.regexp              ##PATH_REGEXP using PATH-TO-REGEXP (see its doc)

SOPERATION.consumes|produces ##ARR using either SPEC|OPERATION.consumes|produces

SPARAM.schema                ##[SMALL_]SCHEMA
SPARAM.getValue(REQ)         ##Returns:
 ->SPARAMVAL                 ##  - REQ.body if body PARAM
                             ##  - REQ.files.NAME if file PARAM
                             ##  - REQ.body.NAME if formData PARAM
                             ##  - REQ.headers.NAME if header PARAM
                             ##  - REQ.originalUrl|url's part if path PARAM
                             ##  - REQ.query.NAME if query PARAM
SPARAMVAL.parameterObject    ##SPARAM
SPARAMVAL.raw                ##Value without normalization
SPARAMVAL.value              ##Value after normalization:
                             ##  - parsed and validated according to PARAM.schema
                             ##  - using PARAM.schema.[items.]default if undefined

SRESP.getExample('MIME')->STR##RESP.examples.MIME
                             ##Stringified (if 'application/json' or 'application/x-yaml')

SOPERATION.getSecurity()
 ->SECURITY_USES             ##Using SPEC|OPERATION.security
SOPERATION.                  ##SECURITY_DEF
 securityDefinitions.SEC_NAME##SPEC.securityDefinitions.SEC_NAME using SPEC|OPERATION.security


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          VALIDATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SSPEC.validate()->VALRES     ##Validates:
                             ##  - official JSON schema
                             ##  - JSON references
                             ##  - SCHEMA are valid JSON schemas
                             ##  - duplicate 'PATH'|PARAM|operationId
                             ##  - PARAM: empty, multiple body|formData, missing|undeclared path

SOPERATION.validateRequest   ##Validates:
 (REQ)->VALRES               ##  - REQ.headers['content-type'] against SPEC|OPERATION.consumes
                             ##  - REQ.body|files|headers|originalUrl|url|query (see SPARAM.getValue()) against PARAM.schema
SPARAMVAL.valid              ##BOOL
                             ##Checks according to PARAM.schema|required|allowEmptyValue
SPARAMVAL.error              ##Same but as ERROR

SOPERATION.validateResponse
 (RES)->VALRES               ##Finds SRESP using RES.statusCode then calls SRESP.validateResponse()
SRESP.validateResponse(RES)  ##Validates:
 ->VALRES                    ##  - RES.headers['content-type'] against SPEC|OPERATION.produces
                             ##  - RES.headers.NAME against RESP.headers.NAME (including collectionFormat)
                             ##  - RES.body against RESP.schema

VALRES.errors|warnings       ##VAL_ARR
VAL.code                     ##STR
VAL.error                    ##ERROR
VAL.message                  ##'ERROR'
VAL.errors                   ##Nested VAL_ARR
VAL.path                     ##'VAR'_ARR path to the error property
VAL.lineage                  ##'PATH'_ARR for circular reference errors
VAL.name                     ##Header name STR for header errors
VAL.params                   ##On parameters errors
VAL.schemaId                 ##STR

OPTS|SSPEC.customValidators  ##FUNC_ARR(SSPEC)->VALRES to add custom validation
                             ##Can also use SSPEC.registerValidator()
OPTS|SSPEC.customFormats     ##When using custom JSON schema "format"
                             ##Can also use SSPEC.registerFormat()


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FAKE DATA           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SRESP|SPARAM.getSample()->OBJ##Creates fake data using JSON-SCHEMA-FAKER on RESP|PARAM.schema
