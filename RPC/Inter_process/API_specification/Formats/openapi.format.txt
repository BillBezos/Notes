
           
   SWAGGER  
           



ALTERNATIVES ==>              #  - OpenAPI (prefer)
                              #     - backed up by Linux foundation
                              #     - much more tools and high-profile
                              #     - YAML/JSON
                              #  - API blueprint
                              #     - MSON (markdown-based format)
                              #  - RAML:
                              #     - YAML
                              #     - seems to lose traction, most tools are not being updated

API SPECIFICATION ==>         #Declarative description of an API endpoints.
                              #Usual goals:
                              #  - documentation
                              #  - client creation
                              #  - API stubs creation
                              #  - mock servers
                              #  - validation
                              #  - testing
                              #There usually are also tools to create it from code or code comments.

VERSION ==>                   #3.0.1
                              #Formerly called Swagger
                       VERSION#Noted like this if version-specific

SERVING ==>                  2#Usually at HOST/swagger.json|yaml
                             3#Usually at HOST/openapi.json|yaml

FORMAT ==>                    #JSON or JSON-compatible YAML

JSON REFERENCES ==>           #Can only be used for SCHEMA|PARAM|RESP|PATHDEF
                              #Can use URI. Cannot use relative JSON pointers.

x-*                           #Custom properties can be present anywhere, providing they are prefixed with "x-"

MARKDOWN                     2#Can use GFM syntax
                             3#Can use CommonMark 0.27 syntax

REQUIRED PROPERTIES ==>      *#Are marked like this

SPEC ==>                    2*#  - swagger '2.0'
                            3*#  - openapi '3.0.1'
                             *#  - info INFO
                             2#  - host STR (def: current one): no protocol, only hostname
                             2#  - basePath STR: must start with "/", e.g. "/api/v1"
                             2#  - schemes 'http[s]|ws[s]'_ARR
                             3#  - servers SERVER_ARR
                             2#  - consumes|produces 'MIME'_ARR
                             2#    (later versions specify Accept|Content-Type [S] headers instead)
                             *#  - paths PATHS
                             2#  - definitions|parameters|responses.NAME SCHEMA|PARAM|RESP
                             2#     - sole purpose is to be used as targets for JSON references
                             2#  - securityDefinitions SECURITY_DEFS
                             3#  - components COMPONENTS
                              #  - security SECURITY_USES
                              #  - tags TAGS_ARR
                              #  - externalDocs EXTERNALDOCS

INFO                         *#  - title STR
                              #  - description 'MARKDOWN'
                             *#  - version STR
                              #  - termsOfService 'URL'
                              #  - contact CONTACT
                              #  - license LICENSE

CONTACT                       #  - name STR
                              #  - url 'URL'
                              #  - email 'EMAIL'

LICENSE                      *#  - name STR
                              #  - url 'URL'

SERVER                      *3#  - url 'URL'
                             3#     - can contain {SERVER_VAR_NAME}
                             3#  - description STR
                             3#  - variables.SERVER_VAR_NAME SERVER_VAR

SERVER_VAR                  *3#  - default STR
                             3#  - enum STR_ARR
                             3#  - description STR

COMPONENTS ???

PATHS                         #  - "/PATH": PATHDEF
                              #     - can replace part of PATH with {PARAM_VAR}

PATHDEF                       #  - get|put|post|delete|options|head|patch OPERATION
                             3#  - trace OPERATION
                              #  - parameters PARAM_ARR
                             3#  - summary STR: max 120 chars recommended
                             3#  - description 'MARKDOWN'
                             3#  - servers SERVER_ARR

OPERATION                     #  - description|summary|externalDocs: same as above
                             2#  - consumes|produce|schemes: same as above
                             3#  - servers SERVER_ARR
                              #  - operationId 'FUNC': used by client APIs
                              #  - tags 'TAG'_ARR
                              #  - deprecated BOOL
                              #  - parameters PARAM_ARR
                             3#  - requestBody REQ_BODY
                             *#  - responses RESPONSES
                             3#  - callbacks.FUNC CALLBACK
                              #  - security SECURITY_USES

PARAM                        *#  - name 'PARAM_VAR'
                             *#  - in STR:
                              #     - "path": part of path
                              #     - "query"
                              #     - "header"
                             3#     - "cookie"
                             2#     - "formData": body when multipart/form-data or x-www-form-urlencoded
                             2#     - "body": body otherwise. name must be "body" too
                              #  - description STR
                             3#  - deprecated BOOL
                              #  - required BOOL
                              #  - allowEmptyValue BOOL (def: false) (only for "query|formData")
                             3#  - STYLE_PROPS items
                             2#  (if not in "body")
                             2#  - ITEM members
                             2#  (if in "body")
                            2*#  - schema SCHEMA
                             3#  - schema SCHEMA or content.MIME CONTENT
                             3#  - example VAL or examples.MIME EXAMPLE

STYLE_PROPS                  3#  - allowReserved BOOL (def: false):
                             3#     - allow characters that should be URI encoded in QUERY not to be URI encoded
                             3#     - only for "query"
                             3#  - style: how to deserialize:
                             3#     - "simple" (def for "path|query|header"): like no SUFFIX in URI templates
                             3#     - "label": like . SUFFIX in URI templates
                             3#     - "matrix": like ; SUFFIX in URI templates
                             3#     - "form" (def for "cookie"): like ? SUFFIX in URI templates
                             3#     (array only)
                             3#     - "spaceDelimited": "VAL ..."
                             3#     - "pipeDelimited": "VAL|..."
                             3#     (object only)
                             3#     - "deepObject": "VAR[VAR2][...]=VAL&..."
                             3#  - explode BOOL (def: false unless style "form"): like * SUFFIX in URI templates

ITEM                        2*#  - type "string|number|integer|boolean|array|file"
                             2#     - if "file", must consume "multipart/form-data" and use in "formData"
                             2#  - format STR:
                             2#     - "integer" can be "int32|int64"
                             2#     - "number" can be "float|double"
                             2#     - "string" can be nothing, "byte|date|date-time|password|binary" or anything in JSON schema
                             2#     - others don't use
                             2#  - the following JSON schema v4 properties:
                             2#     - enum|default
                             2#     - multipleOf|[exclusive]maximum|minimum NUM
                             2#        - note that exclusiveMaximum|Minimum is BOOL
                             2#     - min|maxLength|pattern
                             2#     - min|maxItems|uniqueItems
                            2*#     - items ITEM (if array)
                             2#  - collectionFormat STR:
                             2#     - only if type "array"
                             2#     - can be:
                             2#        - "csv" (def): VAR,VAR2
                             2#        - "ssv": VAR VAR2
                             2#        - "tsv": VAR\tVAR2
                             2#        - "pipes": VAR|VAR2
                             2#        - "multi": VAR=VAL&VAR2=VAL2 (only for in "query|formData")

SCHEMA                        #  - ITEM members
                              #  - type can be "object"
                              #  - the following JSON schema v4 properties:
                              #     - properties|additionalProperties|minProperties|maxProperties|required
                              #     - allOf
                              #  - title STR
                              #  - description 'MARKDOWN'
                              #  - externalDocs EXTERNALDOCS
                              #  - readOnly BOOL
                              #  - discriminator STR:
                              #     - for inheritance
                              #     - to define on parent class, STR being one of this parent members inherited by chidren,
                              #       and differentiating them as subclasses
                              #  - example VAL
                              #  - xml: name STR, namespace STR, prefix STR, attribute BOOL, wrapped BOOL

REQ_BODY                     3#  - description 'MIME'
                             3#  - required BOOL (def: false)
                            *3#  - content.MIME CONTENT

CONTENT                      3#  - schema SCHEMA
                             3#  - example VAL or examples.MIME EXAMPLE
                             3#  (only for REQ_BODY and with MIME 'multipart|x-www-form-urlencoded')
                             3#  - encoding.PROP ENCODING

ENCODING                     3#  - contentType 'MIME,...'
                             3#     - MIME can contain * wildcard
                             3#     - default for PROP is:
                             3#        - 'application/octet-stream' if "format" "binary|byte"
                             3#        - 'application/json' if "type" "object" or array with object "items"
                             3#        - 'text/plain' otherwise
                             3#  (for body with MIME "multipart")
                             3#  - headers.HEADER HEADER_VAL
                             3#     - PROPs to be considered request headers instead
                             3#  (for body with MIME "x-www-form-urlencoded")
                             3#  - STYLE_PROPS items

HEADER_VAL                   3#Like PARAM, but without "name" nor "in"

RESPONSES                     #  - HTTP_STATUS_CODE: RESP
                              #     - HTTP_STATUS_CODE can be "default"
                             3#     - HTTP_STATUS_CODE can be "1XX|2XX|3XX|4XX|5XX"

RESP                         *#  - description 'MARKDOWN'
                              #  - schema SCHEMA
                             2#  - headers.HEADER ITEM
                             3#  - headers.HEADER HEADER_VAL
                              #  - examples.MIME VAL

EXAMPLE                      3#  - summary STR
                             3#  - description 'MARKDOWN'
                             3#  - value VAL or externalValue 'URL'

SECURITY_USES                 #OBJ_ARR:
                              #  - SEC_NAME: SCOPE_ARR

SECURITY_DEFS                 #  - SEC_NAME: SECURITY_DEF

SECURITY_DEF                 *#  - type "basic|apiKey|oauth2"
                              #  - description 'MARKDOWN'
                              #  (for apiKey)
                             *#  - name 'VAR'
                             *#  - in 'query|header'
                              #  (for oauth2)
                             *#  - flow 'implicit|password|application|accessCode'
                             *#  - scopes: VAR: 'DESCRIPTION'
                              #  (for oauth2, implicit|accessCode)
                             *#  - authorizationUrl URL
                              #  (for oauth2, accessCode|password|application)
                             *#  - tokenUrl URL

TAGS                         *#  - name 'TAG'
                              #  - description 'MARKDOWN'
                              #  - externalDocs EXTERNALDOCS

EXTERNALDOCS                  #  - description 'MARKDOWN'
                             *#  - url 'URL'





SWAGGER-CLIENT ==>            #Creates JavaScript server-side and client-side from Swagger .json spec (1.2 only), returned as
                              #API_OBJ.
                              #Version 2.1.10-M1
                              #API_OBJ can be wrapped/augmented, e.g.:
                              #  - promises instead of callbacks (Bluebird)
                              #  - caching system
                              #  - easier authentication
GLOBAL                        #Either SWAGGER-CLIENT (server-side) or WINDOW (client-side)
GLOBAL.authorizations.add     #Adds Authentication for discovery calls and following API calls, where AUTH can be:
(VAR, AUTH)                   #  - query|header: new GLOBAL.ApiKeyAuthorization(VAR2, VAL2, "query|header")
GLOBAL.authorizations.remove  #  - cookie: new GLOBAL.CookieAuthorization(COOKIE_OBJ)
(VAR)                         #  - Basic HTTP Authentication: new GLOBAL.PasswordAuthorization(NAME_NOT_USED, USER, PASSWORD)
                              #VAR is "apiKey|oauth2|basicAuth"
new GLOBAL.SwaggerApi(OBJ)    #OBJ:
                              #  - url URL: to the .json spec
                              #  - success FUNC():
                              #     - must then check API_OBJ.ready true
                              #Returns API_OBJ:
                              #  - basePath, url, info, swaggerVersion, apiVersion, consumes, produces, schemes, host
                              #  - authSchemes MAIN_AUTH_OBJ
                              #  - RESOURCE.NICKNAME(OBJ, FUNC(OBJ2), FUNC2(OBJ3)):
                              #     - use OBJ.body STR for request body (must stringify) and OBJ for headers
                              #     - OBJ2:
                              #        - headers.input|normalized OBJ (normalized put in capital-first dashed)
                              #        - url STR
                              #        - method STR
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ5
                              #     - OBJ3: for errors. If response from server, like OBJ2. Otherwise:
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ4:
                              #           - code STR
                              #           - errno STR
                              #           - syscall STR
                              #  - api.RESOURCE.NICKNAME.help(BOOL): returns parameters as print help.
                              #    If BOOL false (def), prints them too.
                              #  - api.RESOURCE.NICKNAME.asCurl(...): same as RESOURCE.NICKNAME(...) but prints Curl shell
                              #    command
                              #Uses:
                              #  - User-Agent: Shred [C]
                              #  - Right Content-Type, Accept, Content-Length [C]

SWAGGER-CODEGEN               #Like SWAGGER-JS but for Flash, Java, Objc, PHP, Python, Python3 or Ruby.

SWAGGER-CLI-CLIENT(JSON_OBJ)  #Like SWAGGER-JS but for CLI. Version 0.1.11
                              #Should be pretty much the only line in the CLI module.
                              #JSON_OBJ is generated from:
                              #  - FETCH-SWAGGER-SCHEMA(URL, FUNC(ERROR, JSON_OBJ)) (version 0.1.2)
                              #  - or via command line fetch-swagger-schema URL (prints to stdout)
                              #To use Node as command line use Node shabang #!/usr/bin/env node
--PARAM VAL                   #
--basePathOverride PATH       #Override base path of API. Can also use envvar APPNAME_BASE_PATH or ./.APPNAME json file with
                              #basePath PATH

SWAGGER-NODE-EXPRESS          #Node.js module that generates Express server based on models .js files and also serves Swagger
                              #spec .json file.

SWAGGER-UI                    #HTML/CSS/JavaScript templates that show documentation based on .json spec (hardcoded URL in
                              #main HTML file (must be api-docs file for spec 1.2)).
                              #To customize:
                              #  - sources are in src/
                              #  - compile with npm install, npm run-script build
                              #To add API key header, add JavaScript event handler with:
                              #  window.authorizations.add("key", new ApiKeyAuthorization(HEADER_VAR, HEADER_VAL, "header"))
                              #Version 2.1.0
