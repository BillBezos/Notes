
           
   OPENAPI  
           



ALTERNATIVES ==>              #  - OpenAPI (prefer)
                              #     - backed up by Linux foundation
                              #     - much more tools and high-profile
                              #     - YAML/JSON
                              #  - API blueprint
                              #     - MSON (markdown-based format)
                              #  - RAML:
                              #     - seems to lose traction, most tools are not being updated
                              #     - YAML

API SPECIFICATION ==>         #Declarative description of an API endpoints.
                              #Usual goals:
                              #  - documentation
                              #  - client creation
                              #  - API stubs creation
                              #  - mock servers
                              #  - validation
                              #  - testing
                              #There usually are also tools to create it from code or code comments.

VERSION ==>                   #3.0.1
                              #Formerly called Swagger
                              #Different versions are marked in parenthesis

SWAGGER HUB ==>              ##SaaS with swagger-editor, swagger-codegen, API mocking, swagger-ui
                             ##Paid for entreprise features: access control, Git integration, communication


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            GENERAL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SERVING (2) ==>               #Usually at HOST/swagger.json|yaml
SERVING (3) ==>               #Usually at HOST/openapi.json|yaml

FORMAT ==>                    #JSON or JSON-compatible YAML

MARKDOWN (2) ==>              #Can use GFM syntax
MARKDOWN (3) ==>              #Can use CommonMark 0.27 syntax

SUMMARY ==>                   #Version 2.0 recommends max 120 chars

JSON REFERENCES ==>           #Can only be used for SCHEMA|PARAM|RESP|PATHDEF|EXAMPLE|REQ_BODY|HEADER_VAL|LINK|CALLBACK
                              #Can use URI. Cannot use relative JSON pointers.

x-*                           #Custom properties can be present anywhere, providing they are prefixed with "x-"

REQUIRED PROPERTIES ==>      *#Are marked like this

INCLUDE MEMBERS ==>           #  - <-- VAR this means VAR members are included|inherited

MIME_RANGE                    #MIME type, but allow * wildcard


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         SPECIFICATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SPEC                         *#  - info INFO
                             *#  - paths PATHS
                              #  - security SECURITY_USES
                              #  - tags TAG_ARR
                              #  - externalDocs EXTERNALDOCS
SPEC (2)                     *#  - swagger '2.0'
                              #  - <-- SERVER
                              #  - consumes|produces 'MIME'_ARR
                              #    (later versions specify Accept|Content-Type [S] headers instead)
                              #  - <-- COMPONENTS
SPEC (3)                     *#  - openapi '3.0.1'
                              #  - servers SERVER_ARR
                              #  - components COMPONENTS

INFO                         *#  - title STR
                              #  - description 'MARKDOWN'
                             *#  - version STR
                              #  - termsOfService 'URL'
                              #  - contact:
                              #     - name STR
                              #     - url 'URL'
                              #     - email 'EMAIL'
                              #  - license:
                             *#     - name STR
                              #     - url 'URL'

SERVER (2)                    #  - schemes 'http[s]|ws[s]'_ARR
                              #  - host STR (def: current one): no protocol, only hostname
                              #  - basePath STR: must start with "/", e.g. "/api/v1"
SERVER (3)                   *#  - url 'URL'
                              #     - can contain {SERVER_VAR_NAME}
                              #  - variables.SERVER_VAR_NAME:
                             *#     - default STR
                              #     - enum STR_ARR
                              #     - description STR
                              #  - description STR

COMPONENTS                    #Members whose sole purpose is to be used as targets for JSON references
                              #(except for SECURITY_DEF):
                              #  - parameters.NAME PARAM
                              #  - responses.NAME RESP
                              #NAME must be [[:alnum:].-_]
COMPONENTS (2)                #  - securityDefinitions.SEC_NAME SECURITY_DEF
                              #  - definitions.NAME SCHEMA
COMPONENTS (3)                #  - securitySchemes.SEC_NAME SECURITY_DEF
                              #  - schemas.NAME SCHEMA
                              #  - examples.NAME EXAMPLE
                              #  - requestBodies.NAME REQ_BODY
                              #  - headers.NAME HEADER_VAL
                              #  - links.NAME LINK
                              #  - callbacks.NAME CALLBACK

PATHS                         #  - "/PATH": PATHDEF
                              #     - can replace part of PATH with {PARAM_VAR}

PATHDEF                       #  - get|put|post|delete|options|head|patch OPERATION
                              #  - parameters PARAM_ARR
PATHDEF (3)                   #  - trace OPERATION
                              #  - summary STR
                              #  - description 'MARKDOWN'
                              #  - servers SERVER_ARR

OPERATION                     #  - description|summary|externalDocs: same as above
                              #  - operationId 'FUNC': used by client APIs
                              #  - parameters PARAM_ARR
                             *#  - responses RESPONSES
                              #  - security SECURITY_USES
                              #  - tags 'TAG'_ARR
                              #  - deprecated BOOL (def: false)
OPERATION (2)                 #  - consumes|produces|schemes: same as above
OPERATION (3)                 #  - requestBody REQ_BODY
                              #  - callbacks.FUNC CALLBACK
                              #  - servers SERVER_ARR

PARAM                        *#  - name 'PARAM_VAR'
                             *#  - in STR:
                              #     - "path": part of path
                              #     - "query"
                              #     - "header"
                              #  - description STR
                              #  - required BOOL (def: false)
                             *#    (must be required: true if "in" "path")
                              #  - allowEmptyValue BOOL (def: false) (only for "query|formData")
PARAM (2)                    *#  - in STR: also:
                              #     - "formData": body when multipart/form-data or x-www-form-urlencoded
                              #     - "body": body otherwise. name must be "body" too
                              #  (unless in "body")
                              #  - <-- SMALL_SCHEMA
                              #  (if in "body")
                             *#  - schema SCHEMA
PARAM (3)                    *#  - in STR: also:
                              #     - "cookie"
                              #  - deprecated BOOL
                              #  - <-- STYLE_PROPS
                              #  - schema SCHEMA or content CONTENTS
                              #     - content CONTENTS only needed when parameter is not a simple value, e.g. when passing
                              #       JSON in query variables or requests headers
                              #  - example VAL or examples.MIME EXAMPLE

HEADER_VAL (3)                #Like PARAM, but without "name" nor "in"

REQ_BODY (3)                  #  - description 'MARKDOWN'
                              #  - required BOOL (def: false)
                             *#  - content CONTENTS

RESPONSES                     #  - HTTP_STATUS_CODE: RESP
                              #     - HTTP_STATUS_CODE can be "default"
RESPONSES (3)                 #HTTP_STATUS_CODE can be "1XX|2XX|3XX|4XX|5XX"

RESP                         *#  - description 'MARKDOWN'
RESP (2)                      #  - schema SCHEMA
                              #  - headers.HEADER SMALL_SCHEMA
                              #  - examples.MIME VAL
RESP (3)                      #  - content CONTENTS
                              #  - headers.HEADER HEADER_VAL
                              #  - links.NAME LINK

CONTENTS (3)                  #  - MIME_RANGE: CONTENT

CONTENT (3)                   #  - schema SCHEMA
                              #  - example VAL or examples.MIME EXAMPLE
                              #  (only for REQ_BODY and with MIME 'multipart|x-www-form-urlencoded')
                              #  - encoding.PROP:
                              #     - contentType 'MIME_RANGE,...'
                              #        - default for PROP is:
                              #           - 'application/octet-stream' if "format" "binary|byte"
                              #           - 'application/json' if "type" "object" or array with object "items"
                              #           - 'text/plain' otherwise
                              #     (for body with MIME "multipart")
                              #     - headers.HEADER HEADER_VAL
                              #        - PROPs to be considered request headers instead
                              #     (for body with MIME "x-www-form-urlencoded")
                              #     - <-- STYLE_PROPS

STYLE_PROPS (3)               #  - allowReserved BOOL (def: false):
                              #     - allow characters that should be URI encoded in QUERY not to be URI encoded
                              #     - only for "query"
                              #  - style: how to deserialize:
                              #     - "simple" (def for "path|query|header"): like no SUFFIX in URI templates
                              #     - "label": like . SUFFIX in URI templates
                              #     - "matrix": like ; SUFFIX in URI templates
                              #     - "form" (def for "cookie"): like ? SUFFIX in URI templates
                              #     (array only)
                              #     - "spaceDelimited": "VAL ..."
                              #     - "pipeDelimited": "VAL|..."
                              #     (object only)
                              #     - "deepObject": "VAR[VAR2][...]=VAL&..."
                              #  - explode BOOL (def: false unless style "form"): like * SUFFIX in URI templates

EXAMPLE (3)                   #  - summary STR
                              #  - description 'MARKDOWN'
                              #  - value VAL or externalValue 'URL'

SCHEMA                        #  - the following JSON schema v4 properties:
                             *#     - type
                              #     - enum|default
                              #     - title|readOnly
                              #     - multipleOf|[exclusive]maximum|minimum NUM
                              #        - note that exclusiveMaximum|Minimum is BOOL
                              #     - min|maxLength|pattern
                              #     - min|maxItems|uniqueItems
                             *#     - items SMALL_SCHEMA (if array)
                              #     - properties|additionalProperties|minProperties|maxProperties|required
                              #     - allOf
                              #  - format STR:
                              #     - "integer" can be "int32|int64"
                              #     - "number" can be "float|double"
                              #     - "string" can be nothing, "byte|date|date-time|password|binary" or anything in JSON schema
                              #     - others don't use it
                              #  - description 'MARKDOWN'
                              #  - externalDocs EXTERNALDOCS
                              #  - example VAL
                              #  - xml: name STR, namespace STR, prefix STR, attribute BOOL, wrapped BOOL
SCHEMA (2)                    #  - type "file":
                              #     - with MIME "multipart/form-data"
                              #     - only if PARAM "in" "formData" or with RESP
                              #        - if RESP, can only use SCHEMA.type|default|title|readOnly|required|format|description|externalDocs|example
                              #  - discriminator 'PROP':
                              #     - for inheritance
                              #     - must be present in both parent and children
                              #     - 'PROP' is member shared by both parent and children and specifying their TYPE
                              #     - 'PROP' must be required
                              #     - children must specify their parent's SCHEMA using anyOf|allOf|oneOf
SCHEMA (3)                    #  - the following JSON schema v5 properties:
                              #     - oneOf|anyOf|not|writeOnly
                              #  - deprecated BOOL (def: false)
                              #  - nullable BOOL (def: false): allow `null`
                              #  - discriminator:
                             *#     - propertyName 'PROP'
                              #     - mapping.TYPE JSON_POINTER (to a SCHEMA)

SMALL_SCHEMA (2)              #Like SCHEMA (2) except:
                              #  - no type 'object' nor properties|additionalProperties|minProperties|maxProperties|required
                              #  - no title|externalDocs|readOnly
                              #  - no example, but x-example often supported by tools
                              #  - no allOf
                              #  - no discriminator|xml
                              #Also has:
                              #  - collectionFormat STR:
                              #     - only if type "array"
                              #     - can be:
                              #        - "csv" (def): VAR,VAR2
                              #        - "ssv": VAR VAR2
                              #        - "tsv": VAR\tVAR2
                              #        - "pipes": VAR|VAR2
                              #        - "multi": VAR=VAL&VAR2=VAL2 (only for in "query|formData")

LINK (3)                      #Operation to perform to access a related resource (e.g. "next" page):
                              #  - operationRef JSON_POINTER (to an OPERATION) or operationId 'FUNC'
                              #  - parameters { '[path|query|header|cookie].VAR': VAL } (can contain RUNTIME_EXPR)
                              #     - note that the dot is in the key name itself
                              #  - requestBody VAL (can contain RUNTIME_EXPR)
                              #  - description STR
                              #  - server SERVER

CALLBACK (3)                  #HTTP requests performed by the server (i.e. webhook)
                              #  - URL: PATHDEF
                              #     - URL can contain {RUNTIME_EXPR}

RUNTIME_EXPR (3)              #Refers to current request|response. Can be:
                              #  - "$url"
                              #  - "$method"
                              #  - "$statusCode"
                              #  - "$request|response.path|query|header.VAR"
                              #  - "$request|response.body[#JSON_POINTER]"

SECURITY_USES                 #OBJ_ARR:
                              #  - SEC_NAME: SCOPE_ARR

SECURITY_DEF                 *#  - type STR:
                             *#     - "apiKey"
                             *#     - "oauth2"
                              #  - description 'MARKDOWN'
                              #  (for apiKey)
                             *#  - name 'VAR'
                             *#  - in 'query|header'
SECURITY_DEF (2)             *#  - type STR:
                             *#     - "basic"
                              #  (for oauth2)
                             *#  - flow 'implicit|password|application|accessCode'
                              #  - <-- OAUTH2
SECURITY_DEF (3)             *#  - type STR:
                             *#     - "http"
                             *#     - "openIdConnect"
                              #  (for oauth2)
                             *#  - flows.implicit|password|clientCredentials|authorizationCode OAUTH2
                              #  (for apiKey)
                             *#  - in 'query|header|cookie'
                              #  (for openIdConnect)
                             *#  - openIdConnectUrl 'URL'
                              #  (for http)
                             *#  - scheme 'basic|digest|bearer|...'
                              #  (for http with scheme 'bearer')
                             *#  - bearerFormat STR (e.g. 'JWT'): token format, hint for client

OAUTH2                       *#  - scopes: VAR: 'DESCRIPTION'
                              #  (for implicit|accessCode|authorizationCode)
                             *#  - authorizationUrl 'URL'
                              #  (for accessCode|authorizationCode|password|application|clientCredentials)
                             *#  - tokenUrl 'URL'
OAUTH2 (3)                    #  - refreshUrl 'URL'

TAG                           #Used to group OPERATIONs. Often by 'MODEL'.
                             *#  - name 'TAG'
                              #  - description 'MARKDOWN'
                              #  - externalDocs EXTERNALDOCS

EXTERNALDOCS                  #  - description 'MARKDOWN'
                             *#  - url 'URL'


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          GENERATION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALTERNATIVES ==>              #From code:
                              #  - OpenAPI 2.0:
                              #     - swagger-definer: using imperative FUNC() calls|decorators
                              #From code (framework-specific, i.e. avoid)
                              #  - OpenAPI 2.0:
                              #     - fastify-swagger: as extra OBJ to framework routers FUNC()
                              #     - hapi-swagger: as extra OBJ to framework routers FUNC(). Also guess some from router definitions.
                              #     - hapi-swaggered: as extra OBJ to framework routers FUNC(). Also guess some from router definitions.
                              #     - koa-swagger-decorator: using imperative FUNC() calls|decorators
                              #     - koa-joi-router-docs: as extra OBJ to framework routers FUNC(). Also guess some from router definitions.
                              #     - loopback-swagger: from router definitions
                              #     - nestjs swagger: using imperative FUNC() calls|decorators
                              #     - sails-hook-swagger-generator: as extra OBJ to framework routers FUNC(). Also guess some from router definitions.
                              #From code comments (prefered):
                              #  - OpenAPI 2.0:
                              #     - swagger-jsdoc (prefered)


SWAGGER-JSDOC ==>            ##Version 1.9.7
                             ##Extract OpenAPI definition from JSDoc comments and JSON|YAML standalone files.
                             ##Also validates and filters definitions using swagger-parser

DEFINITIONS ==>              ##Can be:
                             ##  - JSDoc comment @swagger followed by YAML:
                             ##     - consumes|produces 'MIME'_ARR
                             ##     - tags TAG[_ARR]: ignore duplicates
                             ##     - parameters|responses|securityDefinitions|definitions|paths.*: shallow merged to SPEC
                             ##     - /PATH.*: shallow merged to SPEC.paths./PATH
                             ##  - .y[a]ml file:
                             ##     - same as JSDoc comment content but directly
                             ##  - single .js|.json file (SPEC_FILE):
                             ##     - base definition
                             ##     - must contain top-level properties, at least SPEC.info.title|version
                             ##     - required
SPEC_FILE.apis               ##'GLOB'_ARR of files to parse for JSDoc comments and .y[a]ml files.

swagger-jsdoc                ##Extraction
-d SPEC_FILE
--definition SPEC-FILE       ##
-o FILE
--output FILE                ##Output. Can be .json|y[a]ml. Def: ./swagger.json
-w
--watch                      ##Using chokidar (see its doc)

SWAGGER-JSDOC(OPTS)->OBJ     ##Same as Node module
                             ##OPTS: swaggerDefinition SPEC_OBJ, apis 'GLOB'_ARR


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:      PARSING/VALIDATING       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALTERNATIVES ==>              #  - official json schema (prefered for 2.0)
                              #  - speccy (prefered for 3.0): most checks, validation-focused
                              #  - sway (prefered for 2.0): most checks
                              #  - swagger-parser
                              #  - swagger2
                              #  - oai-ts-core: supports 3.0, but not enough checks


OFFICIAL JSON SCHEMA ==>      #Available to validate OpenAPI 2.0
                              #Module 'swagger-schema-official'


SPECCY ==>                   ##Uses REFTOOLS to dereference JSON references.
                             ##Supports OpenAPI 3.0
                             ##Validates using JSON schema and many extra checks.
                             ##Validation/linting-focused


SWAY ==>                     ##Uses JSON-REFS to dereference JSON references.
                             ##Only supports OpenAPI 2.0
                             ##Thorough validation:
                             ##  - official JSON schema
                             ##  - check JSON references
                             ##  - check SCHEMA are valid JSON schemas
                             ##  - duplicate 'PATH'|PARAM|operationId
                             ##  - PARAM: empty, multiple body|formData, missing|undeclared path
                             ##Also creates an object model
                             ##Can validate against a REQ|RES
                             ##Can generate mock data (using JSON-SCHEMA-FAKER)
                             ##Version 1.0.0
SWAY.create(OPTS)            ##OPTS:
 ->PROMISE_API               ##  - definitions SPEC|'PATH'|'URL'
                             ##  - jsonRefs OBJ (options to JSON-REFS)
                             ##     - including OBJ.resolveCirculars BOOL (def: false)
                             ##  - customValidators FUNC_ARR(API)->VALRES: to add custom validation

API.validate()->VALRES       ##
VALRES.errors|warnings       ##VAL_ARR
VAL.code                     ##STR
VAL.error                    ##ERROR
VAL.message                  ##'ERROR'
VAL.errors                   ##Nested VAL_ARR
VAL.path                     ##'VAR'_ARR path to the error property
VAL.lineage                  ##'PATH'_ARR for circular reference errors
VAL.name                     ##Header name STR for header errors
VAL.params                   ##On parameters errors
VAL.schemaId                 ##STR
OPERATION.validateRequest(REQ)->VALRES
 ##PARAM against

API.definition               ##Original SPEC
API.definitionRemotesResolved##SPEC with remote JSON references resolved
API.definitionFullyResolved  ##SPEC with all JSON references resolved
API.options                  ##OPTS
API.references               ##JSON references
API.customValidators         ##FUNC_ARR

API.pathObjects./PATH        ##SPATHDEF
SPATHDEF.
 definition[FullResolved]    ##PATHDEF
SPATHDEF.api                 ##API
SPATHDEF.path                ##'/PATH'
SPATHDEF.pathToDefinition    ##['paths', '/PATH']
SPATHDEF.ptr                 ##JSON pointer to it
SPATHDEF.regexp              ##PATH_REGEXP using PATH-TO-REGEXP (see its doc)

API.*()                      ##Methods to retrieve and validate subparts of the SPEC. See online doc
                             ##Can also generate sample PARAM|RESP using json-schema-faker

SWAGGER-PARSER ==>           ##Inherits from JSON-SCHEMA-REF-PARSER (i.e. dereferences JSON references)
                             ##Only supports OpenAPI 2.0
                             ##Version 4.0.2
REFPARSER.validate(...)      ##Like REFPARSER.dereference(...) except checks specification syntax is valid
                             ##Uses official JSON schema, then does some extra checks


SWAGGER2 ==>                 ##Validates against official JSON schema
                             ##Only supports OpenAPI 2.0
                             ##Version 0.0.30


OAI-TS-CORE ==>              ##Validates using JavaScript (not JSON schema)
                             ##Also creates an object model, with visitors
                             ##Supports OpenAPI 2.0, 3.0.0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         DOCUMENTATION         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALTERNATIVES ==>             ##To HTML:
                             ##  - OpenAPI 2.0, 3.0:
                             ##     - swagger-ui (best text documentation and most well-known but UI is not great)
                             ##        - most high-profile
                             ##        - React|Redux-based
                             ##        - can change spec, logo, deep linking, requests testing, authentication, JSON request samples
                             ##        - one-column, ok design, a bit non-user-friendly and ugly. Very non-mobile-friendly.
                             ##        - misses: the least features of all, but not far from redoc
                             ##     - redoc (pretty good but widdershins is better)
                             ##        - high-profile
                             ##        - React|Redux-based
                             ##        - can change spec, search, logo, deep linking, multi-language request samples
                             ##        - three-columns, pretty
                             ##        - misses: a little more than swagger-ui
                             ##  - OpenAPI 3.0:
                             ##     - open-api-renderer:
                             ##        - less maintained
                             ##        - React|Redux-based
                             ##        - can change spec, deep linking
                             ##        - one-column, not very pretty
                             ##        - misses: not checked
                             ##  - OpenAPI 2.0:
                             ##     - dapperdox:
                             ##        - less maintained
                             ##        - logo, requests testing, authentication, deep linking, guides
                             ##        - one-column, separated into several pages, not very pretty
                             ##        - not mobile-friendly
                             ##        - misses: not checked
                             ##     - pretty-swag:
                             ##        - less maintained
                             ##        - search, requests testing, JSON request samples
                             ##        - one-column, ok design
                             ##        - misses: not checked
                             ##To HTML|Markdown:
                             ##  - OpenAPI 2.0, 3.0:
                             ##     - widdershins (best UI and has Markdown support):
                             ##        - search, logo, deep linking, multi-language request samples
                             ##        - three-columns, pretty
                             ##        - misses: a bit more than swagger-ui or redoc
                             ##  - OpenAPI 2.0:
                             ##     - spectacle:
                             ##        - logo, deep linking, JSON request samples
                             ##        - three-columns, pretty
                             ##        - misses: not checked
                             ##To Markdown:
                             ##  - OpenAPI 2.0:
                             ##     - swagger2markup: less maintained
                             ##     - swagger-markdown: less maintained, misses much info
                             ##Missing OpenAPI properties:
                             ##  - swagger-ui|redoc|widdershins:
                             ##     - important:
                             ##        - OpenAPI 2.0, 3.0: SCHEMA.minItems|maxItems|uniqueItems, SCHEMA.additionalProperties|minProperties|maxProperties, SCHEMA.allowEmptyValue, SCHEMA.readOnly
                             ##        - OpenAPI 3.0: PARAM.content|examples, CONTENT.encoding|example[s]
                             ##     - less important:
                             ##        - OpenAPI 2.0, 3.0: SCHEMA.title|externalDocs|xml
                             ##        - OpenAPI 2.0: SCHEMA.discriminator
                             ##        - OpenAPI 3.0: PATHDEF.summary|description, STYLE_PROPS, SCHEMA.oneOf|anyOf|not|writeOnly|deprecated|nullable|discriminator
                             ##  - swagger-ui:
                             ##     - important:
                             ##        - OpenAPI 2.0, 3.0: SCHEMA.format
                             ##        - OpenAPI 3.0: SECURITY_DEF 'openIdConnect'
                             ##     - less important:
                             ##        - OpenAPI 2.0, 3.0: OPERATION.operationId, SCHEMA.multipleOf
                             ##        - OpenAPI 2.0: OPERATION.schemes
                             ##        - OpenAPI 3.0: SERVER[.variables].description, LINK.requestBody|server, SECURITY_DEF.bearerFormat, OAUTH2.refreshUrl
                             ##  - redoc:
                             ##     - important:
                             ##        - OpenAPI 3.0: CALLBACK, RESP.content, LINK
                             ##     - less important:
                             ##        - OpenAPI 2.0, 3.0: TAGS|OPERATION.externalDocs, OPERATION.operationId, SCHEMA.multipleOf
                             ##        - OpenAPI 2.0: SCHEMA.collectionFormat, RESP.examples (but generates fake from RESP.schema)
                             ##        - OpenAPI 3.0: SERVER.variables|description, PATHDEF.trace, PATHDEF.servers, REQ_BODY.required|description, STATUS_CODE 2XX|3XX|4XX|5XX
                             ##  - widdershins:
                             ##     - important:
                             ##        - OpenAPI 2.0, 3.0: OPERATION.deprecated, SCHEMA.default, SCHEMA.multipleOf|[exclusive]minimum|maximum, SCHEMA.minLength|maxLength|pattern
                             ##        - OpenAPI 3.0: PARAM.deprecated, RESP.content, LINK, SECURITY_DEF 'openIdConnect'
                             ##     - less important:
                             ##        - OpenAPI 2.0, 3.0: OPERATION.externalDocs
                             ##        - OpenAPI 2.0: OPERATION.schemes, SCHEMA.collectionFormat, RESP.examples (but generates fake from RESP.schema)
                             ##        - OpenAPI 3.0: SERVER.description, PATHDEF|OPERATION.servers, SECURITY_DEF.bearerFormat, OAUTH2.refreshUrl


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          GUI EDITOR           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


ALTERNATIVES ==>             ##  - OpenAPI 2.0, 3.0:
                             ##     - swagger-editor (prefered):
                             ##        - by far the most high-profile
                             ##        - views: YAML editor, swagger-ui documentation
                             ##        - validation (official JSON schema, then several extra checks)
                             ##        - most support for OpenAPI definition
                             ##     - apicurio-studio (prefered if really need non-developer-friendly UI):
                             ##        - views: YAML editor, non-developer-friendly UI
                             ##     - openapi-gui:
                             ##        - views: non-developer-friendly UI
                             ##        - quite non-user-friendly and ugly
                             ##  - OpenAPI 2.0:
                             ##     - openapi-designer:
                             ##        - not maintained
                             ##        - views: non-developer-friendly UI, YAML editor, swagger-ui documentation


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:       VERSION MIGRATION       :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SWAGGER2OPENAPI ==>          ##Converts from OpenAPI 2.0 to 3.0.0
                             ##Also does validation
                             ##Version 2.11.16


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          CONVERSION           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


POSTMAN ==>                  ##Alternatives:
                             ##  - direct import from Postman (prefered):
                             ##     - OpenAPI 2.0
                             ##     - still many properties missing:
                             ##        - description-related: many INFO.*, tags, externalDocs, operationId
                             ##        - response-related
                             ##        - security-related
                             ##        - several schemes
                             ##  - swagger2postman2:
                             ##     - OpenAPI 2.0
                             ##     - has around same number of parameters exported as direct import from Postman
                             ##     - maybe not maintained
                             ##  - swaggman:
                             ##     - OpenAPI 2.0
                             ##     - less properties exported
                             ##  - api-flow:
                             ##     - OpenAPI 2.0
                             ##     - less properties exported

INSOMNIA ==>                 ##Only alternative is direct import from Insomnia:
                             ##  - OpenAPI 2.0
                             ##  - still many properties missing:
                             ##     - description-related: many INFO.*, tags, externalDocs, OPERATION.description
                             ##     - response-related
                             ##     - security-related
                             ##     - several schemes


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             TOOLS             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


SWAGGER-CLIENT ==>            #Creates JavaScript server-side and client-side from Swagger .json spec (1.2 only), returned as
                              #API_OBJ.
                              #Version 2.1.10-M1
                              #API_OBJ can be wrapped/augmented, e.g.:
                              #  - promises instead of callbacks (Bluebird)
                              #  - caching system
                              #  - easier authentication
GLOBAL                        #Either SWAGGER-CLIENT (server-side) or WINDOW (client-side)
GLOBAL.authorizations.add     #Adds Authentication for discovery calls and following API calls, where AUTH can be:
(VAR, AUTH)                   #  - query|header: new GLOBAL.ApiKeyAuthorization(VAR2, VAL2, "query|header")
GLOBAL.authorizations.remove  #  - cookie: new GLOBAL.CookieAuthorization(COOKIE_OBJ)
(VAR)                         #  - Basic HTTP Authentication: new GLOBAL.PasswordAuthorization(NAME_NOT_USED, USER, PASSWORD)
                              #VAR is "apiKey|oauth2|basicAuth"
new GLOBAL.SwaggerApi(OBJ)    #OBJ:
                              #  - url URL: to the .json spec
                              #  - success FUNC():
                              #     - must then check API_OBJ.ready true
                              #Returns API_OBJ:
                              #  - basePath, url, info, swaggerVersion, apiVersion, consumes, produces, schemes, host
                              #  - authSchemes MAIN_AUTH_OBJ
                              #  - RESOURCE.NICKNAME(OBJ, FUNC(OBJ2), FUNC2(OBJ3)):
                              #     - use OBJ.body STR for request body (must stringify) and OBJ for headers
                              #     - OBJ2:
                              #        - headers.input|normalized OBJ (normalized put in capital-first dashed)
                              #        - url STR
                              #        - method STR
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ5
                              #     - OBJ3: for errors. If response from server, like OBJ2. Otherwise:
                              #        - status NUM
                              #        - data BUFFER
                              #        - obj OBJ4:
                              #           - code STR
                              #           - errno STR
                              #           - syscall STR
                              #  - api.RESOURCE.NICKNAME.help(BOOL): returns parameters as print help.
                              #    If BOOL false (def), prints them too.
                              #  - api.RESOURCE.NICKNAME.asCurl(...): same as RESOURCE.NICKNAME(...) but prints Curl shell
                              #    command
                              #Uses:
                              #  - User-Agent: Shred [C]
                              #  - Right Content-Type, Accept, Content-Length [C]

SWAGGER-CODEGEN               #Like SWAGGER-JS but for Flash, Java, Objc, PHP, Python, Python3 or Ruby.

SWAGGER-CLI-CLIENT(JSON_OBJ)  #Like SWAGGER-JS but for CLI. Version 0.1.11
                              #Should be pretty much the only line in the CLI module.
                              #JSON_OBJ is generated from:
                              #  - FETCH-SWAGGER-SCHEMA(URL, FUNC(ERROR, JSON_OBJ)) (version 0.1.2)
                              #  - or via command line fetch-swagger-schema URL (prints to stdout)
                              #To use Node as command line use Node shabang #!/usr/bin/env node
--PARAM VAL                   #
--basePathOverride PATH       #Override base path of API. Can also use envvar APPNAME_BASE_PATH or ./.APPNAME json file with
                              #basePath PATH
