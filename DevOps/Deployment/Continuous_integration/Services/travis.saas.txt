
          
   TRAVIS  
          



https://github.com/travis-ci/travis.rb
https://docs.travis-ci.com/user/developer/

https://github.com/PaulRosset/previs
https://github.com/vadimdemedes/trevor
https://github.com/travis-ci/travis-build
https://github.com/travis-ci/gimme
https://github.com/bluzi/travis-buddy
https://github.com/Spirals-Team/repairnator
https://github.com/egoist/testen
https://github.com/alrra/travis-scripts
https://github.com/pwmckenna/node-travis-ci
https://github.com/scribu/travis-stats
https://github.com/dmakhno/travis_after_all


PLANS ==>                     #  - pro: for private GitHub repos
                              #  - enterprise: on-premise


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            CONFIG             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF                          #ROOT_DIR/.travis.yml
                              #YAML 1.1

LINTING ==>                   #Can lint CONF on lint.travis-ci.org


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            TRIGGER            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


PUSH ==>                      #Pushing to GitHub triggers builds.

PULL REQUESTS ==>             #Can trigger builds.
                              #  - not done if merge conflicts
                              #Updates status image.
                              #They never use *deploy phases
                              #Pull requests from forks cannot use encrypted VARs
                              #  - reason: forks could log decrypted VARs to gain access to them
                              #  - should test ENVVAR TRAVIS_PULL_REQUEST before using encrypted VARs in 'BASH'

CRON ==>                      #Runs builds at regular intervals (daily|weekly|monthly)
                              #Uses latest commit
                              #  - can specify branch
                              #  - can skip if there was no build in last 24 hours

REST API ==>                  #Can trigger builds
                              #Can be triggered from the web app (manual trigger)

CANCELLING BUILDS ==>         #Web app has an option to cancel builds that have not started, when a new build is queued.
                              #Can be either for 'push' or 'pull_request' builds.

TIMEOUT ==>                   #Job-wise: 50mins (or 10mins with no output)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            ACTIONS            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


travis settings               #Max number of parallel builds
 maximum_number_of_builds     #Def|max:
 --set NUM                    #  - 5 for open-source
                              #  - 1|2|5|10 for pro, depending on pricing plan

ORDER ==>                     #  - build: set of stages run serially
                              #  - stage: set of jobs run in parallel
                              #  - job: set of phases run serially
                              #  - phase: set of Bash commands run serially
                              #Each job has a separate VM/container (does not share any state)

CONF.stages                   #'STAGE'|STAGE_ARR
                              #Stages serial order (def: 'test' then first-defined stages first)
STAGE.name                    #'STAGE'

CONF.stage                    #Default 'STAGE' (def: 'test')

MATRIX ==>                    #One job is run for each combination (cartesian product) of MCONF properties.
                              #Max 200 total combinations.
MCONF                         #Like CONF but only:
                              #  - CONF.os|dist|osx_image
                              #  - CONF.env
                              #  - language-specific environment CONF.* (e.g. CONF.node_js)
CONF.jobs|matrix.exclude      #MCONF_ARR. Exclude matrix combinations from cartesian product.

CONF.PHASE                    #'BASH'[_ARR] or 'skip|ignore|true'
                              #  - should use ARR not 'STR; STR2'
                              #Phases for each matrix job.
                              #Must use sudo for privileges (don't require password typing), e.g. apt-get
                              #Serial order is as followed.
CONF.before_install           #E.g. apt-get install -y (not apt-get upgrade)
CONF.install                  #E.g. npm install
CONF.before_script            #E.g. starts database|server|daemon, set config
CONF.script                   #E.g. npm test
CONF.before_cache             #E.g. cleaning up previous cache
CONF.after_success            #E.g. deploying
CONF.after_failure            #E.g. notifications
CONF.before_deploy            #Run once per provider
CONF.deploy                   #DEPLOY[_ARR] (see below)
CONF.after_deploy             #Run once per provider
CONF.after_script             #

CONF.jobs|matrix.include      #JOB_ARR. Add extra jobs.
                              #If MATRIX has only one job, replace it. Otherwise, added to MATRIX jobs.
JOB.name                      #STR
JOB.stage                     #'STAGE'
                              #Def: same as previous item in JOB_ARR, or CONF.stage if first item
JOB.PHASE                     #Def: CONF.PHASE
JOB.os|dist|osx_image|env|... #Any MCONF.*
                              #Def: first element of each MATRIX dimension


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           FAILURES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


FAILURES ==>                  #A failure (exit code !== 0) at any stage|job|phase|Bash command:
                              #  - cancel next ones
                              #  - make parent build|stage|job|phase fail
                              #Exceptions:
                              #  - jobs are run in parallel, i.e. do not cancel each others
                              #  - before_cache, after_* phases:
                              #     - do not cancel next phases nor make job fail
                              #     - are not cancelled by "script" failure (but *deploy are cancelled)

CONF.matrix.allow_failures    #MCONF_ARR
                              #Do not make stage fail when matching jobs fail
CONF.matrix.fast_finish       #BOOL (def: false): do not wait for "allow_failures" combinations to complete to mark stage as "completed"

set -e                        #Recommended in Bash scripts (exit whole file when one statement has exit code !== 0)

travis_retry ...              #Available in Bash. Runs ... and retries it twice if exit code !== 0


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SKIPPING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.branches.only|except     #'LBRANCH'|'/LBRANCH_REGEXP/'[_ARR]
                              #Whitelist|blacklist (can't use both)
                              #Branch "gh-pages" is excluded by default

EXCLUDING COMMIT ==>          #If commit message includes "[ci skip]"

CONF|STAGE|JOB.if CONDITION   #Filters build|stage|job according to CONDITION
                              #Possible VARs:
                              #  - type 'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
                              #  - repo 'USER/REPO'
                              #  - branch 'LBRANCH'
                              #  - head_repo|branch: same for pull requests
                              #  - tag 'TAG'
                              #  - commit_message STR
                              #  - sender 'USER'
                              #  - fork BOOL (if repo is a fork)
                              #  - os STR
                              #  - dist STR (OS distribution)
                              #  - group STR (container image)
                              #  - language STR
                              #  - sudo BOOL
                              #Types:
                              #  - true|false
                              #  - "STR" 'STR' or unquoted STR
                              #  - /REGEXP/ or "REGEXP"
                              #  - (VAL,...) (array)
                              #Operators:
                              #  - VAL == != VAL2
                              #  - STR =~ !~ REGEXP
                              #  - VAL [not] in ARR
                              #  - VAL is [not] present|blank
                              #  - ! || && (aliases: not or and)
                              #  - ()
                              #Functions:
                              #  - env('ENVVAR') (only the ones defined in CONF)
                              #  - concat(STR,...)

DEPLOY.on                     #Conditional deploy.
                              #'LBRANCH' or OBJ:
                              #  - repo 'USER/REPO'
                              #  - branch LBRANCH (def: app-*, master) or all_branches true
                              #  - node|jdk|perl|php|python|ruby|scala|go VERSION[_ARR]
                              #  - condition 'BASH_COMMAND' (e.g. '$ENVVAR == VAL')
                              #  - tags true: only when TAG is applied (only if all_branches true)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              ENV              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.env[.matrix]             #"ENVVAR=VAL ..."[_ARR]
CONF.env.global               #Like CONF.env.matrix but for all matrix combinations

travis env                    #Set ENVVARs shared by all builds and jobs
                              #Encrypt them

ENVVAR CI
ENVVAR TRAVIS
ENVVAR CONTINUOUS_INTEGRATION #'true'

ENVVAR LANG|LC_ALL            #'en_US.UTF-8'
ENVVAR PATH                   #Includes './node_modules/.bin'
ENVVAR USER                   #'travis'
ENVVAR HOME                   #'/home/travis'
ENVVAR SHELL                  #'/bin/bash'
ENVVAR TERM                   #'xterm'

ENVVAR DEBIAN_FRONTEND        #'noninteractive'

ENVVAR TRAVIS_BUILD_DIR       #ROOTDIR absolute path
ENVVAR TRAVIS_BUILD_STAGE_NAME#STAGE.name
ENVVAR TRAVIS_BUILD_
 ID|NUMBER|WEB_URL            #
ENVVAR TRAVIS_JOB_
 ID|NUMBER|WEB_URL            #

ENVVAR TRAVIS_CMD             #Current 'BASH' command
ENVVAR TRAVIS_TEST_RESULT     #'0' if all commands in the 'script' phase had exit code 0

ENVVAR TRAVIS_EVENT_TYPE      #'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
ENVVAR TRAVIS_REPO_SLUG
ENVVAR TRAVIS_
 PULL_REQUEST_SLUG            #'USER/REPO'
ENVVAR TRAVIS_
 [PULL_REQUEST_]BRANCH        #'LBRANCH'
ENVVAR TRAVIS_TAG             #'TAG'
ENVVAR TRAVIS_COMMIT
ENVVAR TRAVIS_PULL_REQUEST_SHA#'COMMIT'
ENVVAR TRAVIS_COMMIT_RANGE    #'COMMI2...COMMIT'
ENVVAR TRAVIS_COMMIT_MESSAGE  #STR
ENVVAR TRAVIS_PULL_REQUEST    #'PR_ID|false'

ENVVAR TRAVIS_OS_NAME         #CONF.os
ENVVAR TRAVIS_DIST            #CONF.dist
ENVVAR TRAVIS_OSX_IMAGE       #CONF.osx_image
ENVVAR TRAVIS_LANGUAGE        #CONF.language
ENVVAR TRAVIS_*               #Language-specific MCONF.* e.g. TRAVIS_NODE_VERSION
ENVVAR TRAVIS_ALLOW_FAILURE   #CONF.matrix.allow_failures

CONF.addons.hosts             #HOSTNAME_ARR: customize host names (/etc/hosts)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SECURITY            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


travis encrypt STR            #Encrypts with auto-generated RSA from user account.
                              #Can then put { secure: 'ENCRYPTED' } instead of STR anywhere in CONF
--add CONF.VARR               #Modify CONF directly
--override                    #
--split                       #When receiving several STR... by stdin

travis encrypt-file FILE      #Same for file

travis pubkey                 #Retrieve personal public key
-r USER/REPO                  #
--pem                         #
--fingerprint                 #

ENVVAR TRAVIS_SECURE_ENV_VARS #'true|false' if some { secure: 'ENCRYPTED' } are used


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              OS               :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.os                       #STR[_ARR]. Either:
CONF.dist                     #  - os 'windows'
CONF.osx_image                #     - Windows Server 2016 VM
                              #     - uses Bash
                              #     - cannot use sudo
                              #  - os 'osx'
                              #     - OSX VM
                              #     - osx_image 'xcodeVERSION' (def: '9.4')
                              #  - os 'linux' (def)
                              #     - dist 'precise'
                              #        - Ubuntu 12.04 VM
                              #     - dist 'trusty' (def)
                              #        - Ubuntu 14.04 VM
                              #3GB of RAM


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           LANGUAGES           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.language                 #STR.
                              #See online doc for full list, but some useful ones:
                              #  - 'minimal' (also called 'sh|shell|bash'): git, build-essential, docker, curl|wget, openssl, python
                              #  - 'generic':
                              #     - also ruby, node, go, jvm, php, hhvm, all databases from CONF.services|addons
                              #     - Linux 'Trusty' environment is based on this
                              #  - 'node_js'

NODE.JS ==>                   #Def PHASE:
                              #  - install:
                              #     - if package-lock|npm-shrinkwrap.json, npm ci
                              #     - npm install
                              #  - script: npm test
                              #If ./yarn.lock exists, use yarn [test] instead
CONF.node_js                  #STR_ARR, among anything nvm understands (see its doc)
                              #Can also use .nvmrc
ENVVAR TRAVIS_NODE_VERSION    #


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              GIT              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


GIT CLONING ==>               #Does:
                              #  - git clone --branch=LBRANCH REPO DIR
                              #  - cd DIR
                              #  - git checkout -qf COMMIT

CONF.git.depth                #NUM or BOOL (def: 50). How many recent commits to clone.
CONF.git.quiet                #BOOL (def: false). Whether to use git clone -q

CONF.git.submodules           #BOOL (def: true): automatically init and update git submodules if .gitmodules

CONF.git.sparse_checkout      #'PATH' (def: none). Copy 'PATH' to .git/info/sparse-checkout (see Git doc)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            INSTALL            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.addons.apt.packages      #'PACKAGE'_ARR to install with apt-get install (Linux)
CONF.addons.apt.sources       #Sources of packages to download using apt-get update
                              #Can be:
                              #  - OBJ:
                              #     - sourceline STR (/etc/apt/sources.list line, e.g. "deb URL DIST main")
                              #     - key_url STR: GPG key if one is needed
                              #  - STR:
                              #     - pre-defined alias among the list at https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
                              #Default distribution packages list are available by default.

CONF.addons.homebrew.packages #'PACKAGE'_ARR to install with Homebrew (OSX)
CONF.addons.homebrew.update   #BOOL (def: false): runs brew update
CONF.addons.homebrew.casks    #'PACKAGE'[_ARR] to install with Homebrew casks
CONF.addons.homebrew.taps     #'PACKAGE'[_ARR] to install with Homebrew casks taps
CONF.addons.homebrew.brewfile #'PATH' or BOOL (def: false): if true use ROOTDIR/Brewfile

PRIVATE REPOSITORIES ==>      #  - GitHub "deploy key": repository-specific SSH key
                              #  - GitHub "user key": user-specific SSH key
                              #     - manipulated with CLI "travis sshkey"
                              #  - any other credentials, e.g. password or API key
CONF.addons.ssh_known_hosts   #'HOSTNAME'[_ARR] to add to ~/.ssh/known_hosts
                              #Secure for *.github.com. For others, read online documentation on security implication


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           SERVICES            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


DOCKER ==>                    #Is available in any 'BASH', providing 'docker' specified in CONF.services
                              #docker-compose also available

CONF.services                 #STR[_ARR]
                              #Automatically starts a database server at before_install PHASE
                              #Available: 'mysql', 'postgresql', 'mongodb', 'couchdb', 'rabbitmq', 'riak', 'memcached',
                              #'redis-server', 'cassandra', 'neo4j', 'elasticsearch', 'docker'
CONF.postgresql|mariadb
 rethinkdb                    #'VERSION'. Like CONF.services
CONF.addons.firefox           #'VERSION|latest[-esr|beta|dev|nightly|unsigned]' (already installed, but can specify version here)
CONF.addons.chrome            #'stable|beta'

CONF.addons.sauce_connect     #To launch Sauce Connect (not Sauce Labs)
                              #Either:
                              #  - OBJ.username|access_key STR
                              #  - BOOL true:
                              #     - alternative using ENVVAR SAUCE_USERNAME|ACCESS_KEY
                              #CAPAB_OBJ:
                              #  - tunnel-identifier: TRAVIS_JOB_NUMBER
                              #  - build: TRAVIS_BUILD_NUMBER
                              #  - tags: TRAVIS_*_VERSION, CI


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:          DEPLOYMENT           :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF|JOB.deploy               #DEPLOY[_ARR]
                              #Automatic deploy on success
DEPLOY.provider               #'PROVIDER'
                              #Can have same PROVIDER several times in CONF.deploy DEPLOY_ARR
DEPLOY.skip_cleanup           #BOOL (def: true): cleanup files and Travis local changes before deploying
DEPLOY.*                      #Other options depend on 'PROVIDER'

AVAILABLE PROVIDERS ==>       #  - 'script' (see below)
                              #  - 'npm' (see its doc)
                              #  - 'github' (see its doc)
                              #  - 'heroku' (see its doc)
                              #  - 's3' (see its doc)
                              #  - others: see online doc

SCRIPT_DEPLOY.provider        #'script'
                              #Run bash command
SCRIPT_DEPLOY.script          #'BASH'
                              #Checks exit code


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:         NOTIFICATIONS         :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.notifications.PROVIDER   #NOTIFY. Notify according to build status failure|success
                              #By default, NOTIFY.email is enabled
NOTIFY.on_success             #'always|never|change' (def: 'change' for email, 'always' otherwise)
NOTIFY.on_failure             #'always|never|change' (def: 'always')
NOTIFY.on_pull_requests       #BOOL (def: true)
NOTIFY.template               #STR[_ARR]. Can use template ${VAR} with build information (see online doc for list)

NOTIFY.email[.recipents]      #EMAIL[_ARR] or BOOL
                              #true (def) means to committer email, providing it's:
                              #  - someone who can push to Travis
                              #  - registered to GitHub

NOTIFY.slack[.rooms]          #'ACCOUNT:TOKEN[#CHANNEL]'[_ARR]
                              #  - TOKEN is obtained when installing Slack's integration

NOTIFY.webhooks[.urls]        #'URL'[_ARR]:
                              #  - method: POST
                              #  - Signature: TOKEN [C]
                              #     - TOKEN is SHA1(PAYLOAD) signed by public key
                              #     - public key can be retrieved with REST API (see online doc)
                              #     - should be checked
                              #  - Content-Type: application/x-www-form-urlencoded [C]
                              #  - payload: see online doc
NOTIFY.webhooks.on_start      #'always|never|change' (def: 'never')
NOTIFY.webhooks.on_cancel     #'always|never|change' (def: 'always')
NOTIFY.webhooks.on_error      #'always|never|change' (def: 'always')

NOTIFY.irc|flowdock|pushover|
 opsgenie                     #Other providers

BUILDNOTIFY ==>               #Desktop status bar notification
                              #Must install buildnotify then add either:
                              #  - https://api.travis-ci.org/repos/USER.xml
                              #  - https://api.travis-ci.org/repos/USER/REPO/cc.xml[?branch=LBRANCH]

ATOM FEED ==>                 #Available at https://api.travis-ci.org/repos/USER/REPO/builds[.atom]
                              #Can use ?token for private repositories

WALLS ==>                     #  - node-build-monitor
                              #  - ahmedelsayed-93 ci-dashboard

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            LOGGING            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


LOGGING ==>                   #stdout|stderr is logged
                              #Max output: 4MB
set -v                        #Possible in Bash scripts (prints script's every statement)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:             CACHE             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


CONF.cache.directories        #'DIR'_ARR to cache between builds
                              #Cached files:
                              #  - are downloaded from S3
                              #  - done right after 'before_cache'
                              #Should only be used for files slow to build, not for big files (since they are still downloaded)
                              #There is one cache per LBRANCH and per MCONF
                              #  - can set explicit cache with ENVVAR CACHE_NAME
CONF.cache                    #STR[_ARR] or false (def). Alias for pre-defined list of files to cache for a given package installer
                              #Available: 'npm', 'yarn', 'pip', 'ccache', 'packages' (R), 'cargo', 'cocoapods', 'bundler' (Ruby)
CONF.cache.STR                #BOOL. Same as using CONF.cache STR
CONF.cache.timeout            #NUM (def: 180, in secs)


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:              CLI              :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


TODO ==> PUT SOME OF THIS IN OTHER PARTS OF THE DOC

travis.rb                     #CLI

~/.travis/config.yml          #CONF

travis
-i|--[no-]interactive         #Colors (def: auto)
--debug                       #Show API requests
--debug-http                  #Show HTTP requests
--skip-version-check          #Do not check for updates
--skip-completion-check       #Do not check for auto-completion
CONF.checked_completion       #BOOL

travis
-t|--token API_TOKEN
ENVVAR TRAVIS_TOKEN           #Authentication

travis branches|cache|cancel|
 disable|enable|encrypt|
 encrypt-file|env|history|
 init|logs|monitor|open|
 pubkey|requests|restart|
 settings|setup|show|sshkey|
 status
-r|--repo USER/REPO           #GitHub reposition (def: auto-detect)
-R|--store-repo USER/REPO     #Same but persist value for current repo

travis accounts               #List organizations for current user

travis branches               #List branches and their statuses

travis cache                  #List cached directories, their size and mtime
-m|--match STR                #Only whose name include STR
-b|--branch LBRANCH           #
-d|--delete                   #Delete cached directories
-f|--force                    #No confirmation on deletion

travis cancel [BUILD|JOB_NUM] #Cancels a job|build

travis console                #Run a Ruby client to access REST API
-x|--eval STR                 #Ruby code to evaluate

travis enabled|disable        #Enable|disable using Travis for this repository
-s|--skip-sync                #Don't sync with GitHub

travis encrypt                #Encrypt a value to be used in CONF
-a|--add VARR                 #Add to CONF.VARR
-x|--override                 #Override if already existing
-p|--append                   #Prepend to arrays instead of overwriting
-s|--[no-]split               #Streaming mode: use newline-separated stdin

travis encrypt-file FILE      #Encrypt file with AES-256
 [FILE2]                      #Def FILE2: stdout
                              #Create REPO_ENVVARs encrypted_ID_key|iv to store encryption key|IV
-K|--key STR                  #Encryption key (def: random)
--iv STR                      #Encryption IV (def: random)
-p|--print-key                #Prints --key and --iv
-f|--force                    #Overwrite FILE2
-d|--decrypt                  #Decrypt instead of encrypt
-a|--add PHASE                #Add decryption command to CONF.PHASE
-w|--decrypt-to PATH          #Where decryption command should output decrypted file

REPO_ENVVARs                  #ENVVARs added to all builds of a given repository

travis env ...                #Manipulate REPO_ENVVARs
-P|--[no-]public
-p|--[no-]private             #Make new values public|private (def: private)
-f|--force                    #No confirmation on deletion
-u|--[no-]unescape            #Do not escape values

travis env list               #
travis env set VAR VAL        #
travis env unset VAR...       #
travis env copy VAR...        #
travis env clear              #

travis history                #
-b|--branch LBRANCH           #
-p|--pull-request PR_NUM      #
-a|--after BUILD_NUM          #
-l|--limit NUM                #Def: 10
--[no-]all                    #No limits
-d|--date
-c|--committer                #Also print data|committer

travis init [LANGUAGE] [FILE] #Creates a .travis.yml
--PHASE VALUE
--env VALUE
--LANGUAGE_ENV VALUE          #Add specific CONF.* properties
-k|--skip-enable              #Do not trigger travis enable
-s|--skip-sync                #Do not sync with GitHub
-f|--force                    #No confirmation on override
-p|--print-conf               #Dry run

travis lint [FILE]            #Lint .travis.yml
-q|--[no-]quiet               #
-x|--[no-]exit-code           #Set exit code to 1 if warnings

travis login                  #
-g|--github-token OAUTH_TOKEN
-T|--auto-token
-p|--auto-password
-a|--auto
-u|--user STR
-M|--no-manual
--list-github-token
--skip-token-check

travis logout                 #

travis logs [BUILD|JOB_NUM]   #
-d|--delete [STR]
-f|--force
--[no-]stream

travis monitor                #
-m|--my-repos
-n|--[no-]notify [STR]
-b|--builds
-p|--push
-P|--pull

travis open [BUILD|JOB_NUM]   #
-g|--github
-p|--print

travis pubkey                 #
-p|--pem
-f|--fingerprint

travis raw RESOURCE           #
--[no-]json

travis report                 #
-r|--known-repos

travis repos                  #
-m|--match STR
-o|--owner STR
-n|--name STR
-a|--active
-A|--inactive
-d|--admin
-D|--no-admin

travis requests               #
-l|--limit NUM

travis restart [BUILD|JOB_NUM]#

travis settings [VARR...]     #
--keys
-t|--enable
-f|--disable
-s|--set VAL
-c|--configure

travis setup SERVICE          #
-f|--force

travis show [BUILD|JOB_NUM]   #

travis sshkey                 #
-D|--delete
-d|--description STR
-u|--upload FILE
-s|--stdin
-c|--check
-g|--generate
-p|--passphrase STR

travis status                 #
-x|--[no-]exit-code
-q|--[no-]quiet
-p|--[no-]fail-pending

travis sync                   #
-c|--check
-b|--background
-f|--force

travis token                  #

travis whatsup                #
-m|--my-repos

travis whoami                 #

                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:           REST API            :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


REST API                      #Authentication:
                              #  - POST - /auth/github:
                              #     - github_token: GITHUB_OAUTH_TOKEN: scopes "read:org", "user:email",
                              #       "repo_deployment", "repo:status", "write:repo_hook"
                              #     -> access_token: TOKEN
                              #Requests:
                              #  - domain https://api.travis.org/
                              #  - User-Agent [C]
                              #  - Accept: application/vnd.travis-ci.2+json [C]
                              #  - Authorization: token TOKEN [C]
                              #Resources:
                              #  - accounts
                              #  - users:
                              #     - permissions
                              #  - builds
                              #     - commits
                              #  - jobs:
                              #     - annotations
                              #  - repos:
                              #     - branches
                              #     - caches
                              #     - key
                              #     - settings
                              #        - sshkey
                              #     - envvar
                              #  - logs
                              #  - requests
                              #  - hooks
                              #  - broadcasts
                              #  - lint
                              #Methods:
                              #  - GET|POST|PUT|PATCH|DELETE /RESOURCES[/ID]


                                             /=+===============================+=\
                                            /  :                               :  \
                                            )==:            BADGES             :==(
                                            \  :_______________________________:  /
                                             \=+===============================+=/


BADGE ==>                     #  - https://img.shields.io/travis/USER/REPO[/BRANCH].svg
                              #  - https://travis-ci.org/USER/REPO.svg[?branch=LBRANCH]
                              #Def LBRANCH is latest build's
                              #Should link to https://travis-ci.org/USER/REPO[?branch=LBRANCH]
