
          
   TRAVIS  
          



https://docs.travis-ci.com/user/notifications/
https://docs.travis-ci.com/user/for-beginners/
https://docs.travis-ci.com/user/developer/
https://docs.travis-ci.com/user/enterprise/
https://github.com/travis-ci/travis.rb
https://github.com/search?o=desc&q=travis&s=stars&type=Repositories


CONF                          #ROOT_DIR/.travis.yml

BUILD ==>                     #Sets of jobs

CONF.jobs.include             #JOB_ARR
JOB.script                    #'BASH'[_ARR] or 'skip|ignore|true'
                              #  - should use ARR not 'STR; STR2'
                              #Required
                              #Must use sudo for privileges (don't require password typing), e.g. apt-get
JOB.name                      #STR
JOB.stage                     #'STAGE' (def: same as previous item in JOB_ARR, 'test' if first item)
                              #Stages are run serially
                              #Jobs within same stage are run in parallel
                              #If a job fails (exit code !== 0), parallel jobs are still run, but not next serial jobs.
                              #Jobs are each run in a separate VM/container.
CONF.stages                   #'STAGE'|STAGE_ARR
                              #Stages serial order (def: first-defined stages first)
STAGE.name                    #'STAGE'

set -e                        #Recommended in Bash scripts (exit whole file when one statement has exit code !== 0)

CONF.script 'BASH'???

CONF.STEP                     #Same value as JOB.script
                              #Steps are pre-defined job stages:
                              #  - before_install:
                              #     - e.g. apt-get update -q
                              #     - e.g. apt-get install -y (not apt-get upgrade)
                              #  - install:
                              #     - e.g. npm install
                              #  - before_script:
                              #     - e.g. starts database|server|daemon, set config
                              #  - script:
                              #     - e.g. npm test
                              #  - before_cache:
                              #     - e.g. cleaning up previous cache
                              #  - after_success:
                              #     - e.g. deploying
                              #  - after_failure:
                              #     - e.g. notifications
                              #  - after_script
                              #  - before|after_deploy
                              #     - run once (including before|after_deploy) per provider
                              #  - after_script
                              #How do they interact with non-predefined job stages???
                              #Failures in:
                              #  - after_* do not stop build
                              #  - [before_]install and before_script stop parallel jobs

GIT CLONING ==>               #Does:
                              #  - git clone --depth=50 --branch=LBRANCH REPO DIR
                              #  - cd DIR
                              #  - git checkout -qf COMMIT
CONF.branches.only|except     #LBRANCH_STR|REGEXP[_ARR]
                              #Whitelist|blacklist (can't use both)
                              #Branch "gh-pages" is excluded by default
EXCLUDING COMMIT              #If commit message includes "[ci skip]"
CONF.git.submodules           #BOOL (def: true): automatically init and update git submodules if .gitmodules

CONF.addons.apt.packages      #'PACKAGE'_ARR to install with apt-get install (Linux)
CONF.addons.apt.sources       #Sources of packages to download using apt-get update
                              #Can be:
                              #  - OBJ:
                              #     - sourceline STR (/etc/apt/sources.list line, e.g. "deb URL DIST main")
                              #     - key_url STR: GPG key if one is needed
                              #  - STR:
                              #     - pre-defined alias among the list at https://github.com/travis-ci/apt-source-safelist/blob/master/ubuntu.json
                              #Default distribution packages list are available by default.
CONF.addons.homebrew.packages #'PACKAGE'_ARR to install with Homebrew (OSX)
CONF.addons.homebrew.update   #BOOL (def: false): runs brew update
CONF.addons.homebrew.casks    #'PACKAGE'[_ARR] to install with Homebrew casks
CONF.addons.homebrew.taps     #'PACKAGE'[_ARR] to install with Homebrew casks taps
CONF.addons.homebrew.brewfile #'PATH' or BOOL (def: false): if true use ROOTDIR/Brewfile

PRIVATE REPOSITORIES ==>      #  - GitHub "deploy key":
                              #     - repository-specific SSH key
                              #  - GitHub "user key"
                              #     - user-specific SSH key
                              #     - manipulated with CLI "travis sshkey"
                              #  - any other credentials, e.g. password or API key
CONF.addons.ssh_known_hosts   #'HOSTNAME'[_ARR] to add to ~/.ssh/known_hosts
                              #Secure for *.github.com. For others, read online documentation on security implication

CONF.cache.directories        #'DIR'_ARR to cache between builds
                              #Cached files:
                              #  - are downloaded from S3
                              #  - done right after 'before_cache'
                              #Should only be used for files slow to build, not for big files (since they are still downloaded)
                              #There is one cache per LBRANCH and per MCONF
                              #  - can set explicit cache with ENVVAR CACHE_NAME
CONF.cache                    #STR[_ARR] or false. Alias for pre-defined list of files to cache for a given package installer
                              #Available: 'npm', 'yarn', 'pip', 'ccache', 'packages' (R), 'cargo', 'cocoapods', 'bundler' (Ruby)
CONF.cache.STR                #BOOL. Same as using CONF.cache STR
CONF.cache.timeout            #NUM (def: 180, in secs)

MCONF                         #CONF.* but limited to:
                              #  - CONF.env
                              #  - CONF.os|dist|osx_image
                              #  - language-specific environment CONF.* (e.g. CONF.node_js)
                              #  - stage 'STAGE': only do matrix for specific stage
                              #     - if pre-defined stages, which is used???
                              #     - if non-pre-defined stages, do it on all stages by default???
                              #     - with non-pre-defined stages, can use MCONF.* inside JOB.*???
MATRIX ==>                    #One job is run in parallel for each combination (cartesian product) of MCONF
                              #Max 200 total combinations.
CONF.matrix.include           #MCONF_ARR
                              #Specify matrix combinations instead of using cartesian product.
CONF.matrix.exclude           #MCONF_ARR. Same but instead exclude matrix combinations from cartesian product.
CONF.matrix.allow_failures    #MCONF_ARR
                              #Do not make build fail when those specific combinations fail
CONF.matrix.fast_finish       #BOOL (def: false): do not wait for "allow_failures" combinations to complete to mark whole build
                              #as "completed"

CONF.jobs.include is alias of CONF.matrix.include???

CONF|STAGE|JOB.if CONDITION   #Filters build|stage|job according to CONDITION
                              #Possible VARs:
                              #  - type 'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
                              #  - repo 'USER/REPO'
                              #  - branch 'LBRANCH'
                              #  - head_repo|branch: same for pull requests
                              #  - tag 'TAG'
                              #  - commit_message STR
                              #  - sender 'USER'
                              #  - fork BOOL (if repo is a fork)
                              #  - os STR
                              #  - dist STR (OS distribution)
                              #  - group STR (container image)
                              #  - language STR
                              #  - sudo BOOL
                              #Types:
                              #  - true|false
                              #  - "STR" 'STR' or unquoted STR
                              #  - /REGEXP/ or "REGEXP"
                              #  - (VAL,...) (array)
                              #Operators:
                              #  - VAL == != VAL2
                              #  - STR =~ !~ REGEXP
                              #  - VAL [not] in ARR
                              #  - VAL is [not] present|blank
                              #  - ! || && (aliases: not or and)
                              #  - ()
                              #Functions:
                              #  - env('ENVVAR') (only the ones defined in CONF)
                              #  - concat(STR,...)

TIMEOUT ==>                   #Job-wise: 50mins (logging stops at 10mins)

LOGGING ==>                   #stdout is logged
set -v                        #Possible in Bash scripts (prints script's every statement)

CONF.addons.hosts             #HOSTNAME_ARR: customize host names

LINTING ==>                   #Can lint CONF on lint.travis-ci.org

CONF.env[.matrix]             #"ENVVAR=VAL ..."[_ARR]
CONF.env.global               #Like CONF.env.matrix but for all matrix combinations

travis env                    #Set ENVVARs shared by all builds and jobs
                              #Encrypted, i.e. can be confidential

ENVVAR CI
ENVVAR TRAVIS
ENVVAR CONTINUOUS_INTEGRATION #'true'

ENVVAR LANG|LC_ALL            #'en_US.UTF-8'
ENVVAR PATH                   #Includes './node_modules/.bin'
ENVVAR USER                   #'travis'
ENVVAR HOME                   #'/home/travis'

ENVVAR TRAVIS_BUILD_DIR       #From git clone REPO DIR
ENVVAR TRAVIS_BUILD_STAGE_NAME#STAGE.name
ENVVAR TRAVIS_BUILD_
 ID|NUMBER|WEB_URL            #
ENVVAR TRAVIS_JOB_
 ID|NUMBER|WEB_URL            #
ENVVAR TRAVIS_TEST_RESULT     #'0' if all commands in the 'script' step had exit code 0

ENVVAR TRAVIS_EVENT_TYPE      #'push' (normal trigger), 'pull_request', 'api' (REST API), 'cron'
ENVVAR TRAVIS_REPO_SLUG
ENVVAR TRAVIS_
 PULL_REQUEST_SLUG            #'USER/REPO'
ENVVAR TRAVIS_
 [PULL_REQUEST_]BRANCH        #'LBRANCH'
ENVVAR TRAVIS_TAG             #'TAG'
ENVVAR TRAVIS_COMMIT
ENVVAR TRAVIS_PULL_REQUEST_SHA#'COMMIT'
ENVVAR TRAVIS_COMMIT_RANGE    #'COMMI2...COMMIT'
ENVVAR TRAVIS_COMMIT_MESSAGE  #STR
ENVVAR TRAVIS_PULL_REQUEST    #'PR_ID|false'

ENVVAR TRAVIS_OS_NAME         #CONF.os
ENVVAR TRAVIS_OSX_IMAGE       #CONF.osx_image

ENVVAR TRAVIS_ALLOW_FAILURE   #'true|false' according to CONF.matrix.allow_failures

ENVVAR DEBIAN_FRONTEND        #'noninteractive'

travis encrypt STR            #Encrypts with auto-generated RSA from user account.
                              #Can then put { secure: 'ENCRYPTED' } instead of STR anywhere in CONF
                              #Not available for pull requests from forks.
--add CONF.VARR               #Modify CONF directly
--override                    #
--split                       #When receiving several STR... by stdin

travis encrypt-file FILE      #Same for file

travis pubkey                 #Retrieve personal public key
-r USER/REPO                  #
--pem                         #
--fingerprint                 #

ENVVAR TRAVIS_SECURE_ENV_VARS #'true|false' if some { secure: 'ENCRYPTED' } are used

CONF.os                       #Either:
CONF.dist                     #  - os 'windows'
CONF.osx_image                #     - Windows Server 2016 VM
                              #     - uses Bash
                              #     - cannot use sudo
                              #  - os 'osx'
                              #     - OSX VM
                              #     - osx_image 'xcodeVERSION' (def: '9.4')
                              #  - os 'linux' (def)
                              #     - dist 'precise'
                              #        - Ubuntu 12.04 VM
                              #     - dist 'trusty' (def)
                              #        - Ubuntu 14.04 VM

CONF.language                 #STR.
                              #See online doc for full list, but some I use:
                              #  - 'minimal' (also called 'sh|shell|bash'): git, build-essential, docker, curl|wget, openssl, python
                              #  - 'generic':
                              #     - also ruby, node, go, jvm, php, hhvm, all databases from CONF.services|addons
                              #     - Linux 'Trusty' environment is based on this
                              #  - 'node_js'

NODE.JS ==>                   #Def STEP:
                              #  - install:
                              #     - if package-lock|npm-shrinkwrap.json, npm ci
                              #     - npm install
                              #  - script: npm test
                              #If ./yarn.lock exists, use yarn [test] instead
CONF.node_js                  #STR_ARR, among anything nvm understands (see its doc)
                              #Can also use .nvmrc
ENVVAR TRAVIS_NODE_VERSION    #

CONF.services                 #STR[_ARR]
                              #Automatically starts a database server at before_install STEP
                              #Available: 'mysql', 'postgresql', 'mongodb', 'couchdb', 'rabbitmq', 'riak', 'memcached',
                              #'redis-server', 'cassandra', 'neo4j', 'elasticsearch'
CONF.postgresql|mariadb
 rethinkdb                    #'VERSION'. Like CONF.services
CONF.addons.firefox           #'VERSION' (already installed, but can specify version here)

CONF.deploy                   #DEPLOY[_ARR]
                              #Automatic deploy on success
                              #Never done by pull requests
DEPLOY.provider               #'PROVIDER'
                              #Can have same PROVIDER several times in CONF.deploy DEPLOY_ARR
DEPLOY.on                     #Conditional deploy.
                              #'LBRANCH' or OBJ:
                              #  - repo 'USER/REPO'
                              #  - branch LBRANCH (def: app-*, master) or all_branches true
                              #  - node|jdk|perl|php|python|ruby|scala|go VERSION[_ARR]
                              #  - condition 'BASH_COMMAND' (e.g. '$ENVVAR == VAL')
                              #  - tags true: only when TAG is applied (only if all_branches true)
DEPLOY.skip_cleanup           #BOOL (def: true): cleanup files and Travis local changes before deploying
                              #If false, after build matrix, which build is used???
DEPLOY.*                      #Other options depend on 'PROVIDER'

AVAILABLE PROVIDERS ==>       #  - 'script' (see below)
                              #  - 'npm' (see its doc)
                              #  - 'github' (see its doc)
                              #  - 'heroku' (see its doc)
                              #  - 's3' (see its doc)

SCRIPT_DEPLOY.provider        #'script'
                              #Run bash command
SCRIPT_DEPLOY.script          #'BASH'
                              #Checks exit code

CONF.notifications.PROVIDER   #NOTIFY. Notify according to build status failure|success
                              #By default, NOTIFY.email is enabled
NOTIFY.on_success             #'always|never|change' (def: 'change' for email, 'always' otherwise)
NOTIFY.on_failure             #'always|never|change' (def: 'always')
NOTIFY.on_pull_requests       #BOOL (def: true)
NOTIFY.template               #STR[_ARR]. Can use template ${VAR} with build information (see online doc for list)

NOTIFY.email[.recipents]      #EMAIL[_ARR] or BOOL
                              #true (def) means to committer email, providing it's:
                              #  - someone who can push to Travis
                              #  - registered to GitHub

NOTIFY.webhooks[.urls]        #'URL'[_ARR]:
                              #  - method: POST
                              #  - Signature: TOKEN [C]
                              #     - TOKEN is SHA1(PAYLOAD) signed by public key
                              #     - public key can be retrieved with REST API (see online doc)
                              #     - should be checked
                              #  - Content-Type: application/x-www-form-urlencoded [C]
                              #  - payload: see online doc
NOTIFY.webhooks.on_start      #'always|never|change' (def: 'never')
NOTIFY.webhooks.on_cancel     #'always|never|change' (def: 'always')
NOTIFY.webhooks.on_error      #'always|never|change' (def: 'always')

NOTIFY.slack[.rooms]          #'ACCOUNT:TOKEN[#CHANNEL]'[_ARR]
                              #  - TOKEN is obtained when installing Slack's integration

NOTIFY.irc|campfire|flowdock|
 hipchat|pushover|opsgenie    #

CONF.addons.sauce_connect     #To launch Sauce Connect (not Sauce Labs)
                              #Either:
                              #  - OBJ.username|access_key:
                              #  - OBJ.sauce_connect true
                              #     - alternative using ENVVAR SAUCE_USERNAME|ACCESS_KEY
                              #CAPAB_OBJ:
                              #  - tunnel-identifier: TRAVIS_JOB_NUMBER
                              #  - build: TRAVIS_BUILD_NUMBER
                              #  - tags: TRAVIS_*_VERSION, CI
                              #Access key should be encrypted (i.e. cannot use for pull requests)

CLIENTS ==>                   #  - web app: https://travis-ci.org/USER/REPO
                              #  - CLI: travis.rb
                              #  - wall:
                              #     - http://williamdurand.fr/TravisLight
                              #     - http://egeloen.fr/travis-wall
                              #  - Mobile app:
                              #     - Mantis-CI (iPhone)
                              #     - Jarvis (iPad)
                              #     - Siren of shame (iPhone, Android phone, Android tablet, with Gamification)
                              #  - Desktop notifications: BuildNotify
                              #  - Browser plugin: My Travis (Chrome)

travis                        #CLI
travis login
--github-token OAUTH_TOKEN    #
travis logout                 #

MANUAL TRIGGER ==>            #GitHub REPO > Settings > Webhooks > Test service

REST API                      #Authentication:
                              #  - POST - /auth/github:
                              #     - github_token: GITHUB_OAUTH_TOKEN: scopes "read:org", "user:email",
                              #       "repo_deployment", "repo:status", "write:repo_hook"
                              #     -> access_token: TOKEN
                              #Requests:
                              #  - domain https://api.travis.org/
                              #  - User-Agent [C]
                              #  - Accept: application/vnd.travis-ci.2+json [C]
                              #  - Authorization: token TOKEN [C]
                              #Resources:
                              #  - accounts
                              #  - users:
                              #     - permissions
                              #  - builds
                              #     - commits
                              #  - jobs:
                              #     - annotations
                              #  - repos:
                              #     - branches
                              #     - caches
                              #     - key
                              #     - settings
                              #        - sshkey
                              #     - envvar
                              #  - logs
                              #  - requests
                              #  - hooks
                              #  - broadcasts
                              #  - lint
                              #Methods:
                              #  - GET|POST|PUT|PATCH|DELETE /RESOURCES[/ID]

PRO ==>                       #Features:
                              #  - private GitHub repos
                              #  - cache dependencies (so no need to always run install STEP)

BADGE ==>                     #  - https://img.shields.io/travis[/com]/USER/REPO[/BRANCH].svg
                              #  - https://travis-ci.org/USER/REPO.svg[?branch=LBRANCH]
                              #Def LBRANCH is latest build's
                              #Should link to https://travis-ci.org/USER/REPO[?branch=LBRANCH]
