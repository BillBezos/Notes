Validation:
  - use a --dry option:
     - i.e. does everything but stops just before the actual fetch call
        - what about depReturns then???
     - no validate command
     - no validation preliminary step. Instead throw errors where the error arises.
     - use it by api-service on gulp build
  - validate:
     - is OBJ
     - `operationId.testName`
     - only known properties, e.g. request|response
     - corresponding PARAM_NAME|SEC_NAME and response headers exists
     - valid JSON schemas v4
     - response.status is:
        - an integer from 100-599
        - among possible status codes for that operation (parsing enum|minimum|etc.)
     - Deps point to existing `operationId.testName`
     - just after Deps has been replaced, validates TEST's schemas values are valid JSON schema v4
     - testOpts value
     - if required true, cannot be 'type' 'null' or ['null', ...]
     - input (options)
     - OpenAPI specification input
     - go through whole code to try tp find more

Upgrade:
  - latest version of lint-staged

JSON-SCHEMA-FAKER issues:
  - minItems not working???
  - not: { type: ['null', 'boolean'] } sometimes generating null???

Test running:
  - should run NUM it() in parallel
     - NUM = OPTS.maxParallel / OPTS.repeat
     - in different microloops (for async parallelism)
     - in different processes (for CPU parallelism) (not as important)
     - maybe switch to ava to get that
     - should stop on failure if OPTS.stopOnFail true (def)
  - pass options to underlying test runner, e.g. reporters, reporting options, include|exclude, etc.
     - all those concerns should be offloaded to the test runner
     - maybe add OPTS.runner to choose between different runners (i.e. they would be adapters)
     - maybe force a specific runner???
     - maybe only allow specific runner options???
     - maybe force output to TAP format to allow different reporters???
  - probably:
     - use library to maintain NUM workers, where NUM is number of CPU cores
     - assign equal number of it() to each
        - they each spawn the same test file, but with a modulo to filter which tests they define
     - force a specific test runner:
        - should allow concurrent tests to have a maxParallel limit
        - should have lots of features, which should be directly accessible (and whitelisted) from user perspective
        - should report in TAP format, and add --reporter=MODULE option that points to tap reporter
  - things I might need the test runner for:
     - reporters
     - test REGEX selection
     - parallelism
     - allow test option to be a directory searched recursively
     - exclude option
     - test.only() and test.skikp()
     - bail

Connect to CI

Response body parsing:
  - should still:
     - parse according to Content-Type [S]
     - default to leaving it as is (i.e. as string)
  - add parsing for x-www-url-encoded (using QUERYSTRING) as an OBJ
     - use body-parser library instead???
  - Content-Type multipart/form-data (using another library) as an OBJ

Payloads:
  - add support for formData PARAM:
     - uses { PARAM_NAME: generatedValue, ... }
     - there can be several PARAMs of that type
     - Content-Type can only be x-www-form-urlencoded or multipart/form-data (already implemented)
     - use same stringifiers as body PARAMs
  - add PARAMs stringifiers for x-www-form-urlencoded and multipart/form-data:
     - PARAM must be an OBJ:
        - for body: [SMALL_]SCHEMA.type must be 'object'
        - for formData: it is always an OBJ
     - if formData, multipart/form-data and SMALL_SCHEMA.type 'file', add parameter filename="PARAM_NAME"
     - do not set multipart/form-data parameter Content-Type
  - [SMALL_]SCHEMA.type 'file':
     - before passing to OPENAPI-SCHEMA-TO-JSON-SCHEMA (which throws on them) should convert to:
        - if RESP.schema.type 'object'
        - if PARAM: try to guess type from siblings. If cannot guess, use 'string'

OpenAPI conformance:
  - add support for PARAM.allowEmptyValue in parameter generation
  - add OpenAPI "format"s
     - to ajv
     - to JSON-SCHEMA-FAKER

Add fuzzy testing values???
  - maybe propose as an option to JSON-SCHEMA-FAKER???

During stopServer(), should delete database

Also test middleware (not endpoints)

Add support for $data in x-tests JSON schemas
  - should be able to target merged response body, response headers, request
    parameters

Explore:
  - test runners, reporting
  - fuzzy testing
  - stress testing
  - load testing
  - test coverage

To improve???
  - reduce amount of mocking needed by users
  - reduce amount of setup and teardown (e.g. starting server) needed by users
     - including faking authentication

Produce code coverage report

Divide repository into smaller modules: request building, response validation, etc.

Schemes:
  - support over protocols than HTTP
     - including WebSocket
  - support OPERATION.schemes
  - unless OPTS.endpoint was given, should randomly pick protocol among SPEC|OPERATION.schemes for each test

Add support for HTTP authentication, OAuth2 and OpenID

Add support for OpenAPI 3.0, RAML, API blueprint
  - should use a specification abstraction layer
  - if api-elements is not good enough, create own

Re-use autoserver's ajv error beautification utility (separate it in a different module)

Load test file re-using same logic as autoserver to allow many formats ("autoformat")
  - should validate against circular references, but by adding this as a feature to autoformat

Dynamic properties keys:
  - problematic on parameter generation and response validation
     - for parameter name, response header names, OpenAPI schema properties
     - OpenAPI only allows static keys
  - possible solution:
     - use 'REGEXP' for keys
     - transform to patternProperties instead of properties
        - both ajv and JSON-SCHEMA-FAKER should then handle it correctly
     - how to mark that a key is a REGEXP not a STR??? Possible solutions:
        - all keys are REGEXPs
        - "/.../" key
        - global OPT
        - testOpt
        - property in specification, e.g. x-*
     - need to work with other specification formats too

Add configuration file and logic:
  - re-use same logic as autoserver

Check autoserver for feature suggestions:
  - including special linting tool

JSON schema v7:
  - allow v7 in OpenAPI SCHEMA
  - problems:
     - not supported by OpenAPI yet, i.e. OPENAPI-SCHEMA-TO-JSON-SCHEMA outputs JSON schema v4, but this is not a problem
     - however does not work with JSON-SCHEMA-FAKER yet

Cancel other sub-tests once one sub-test failed:
  - including HTTP request using AbortController:
     - not supported by node-fetch yet: https://github.com/bitinn/node-fetch/pull/437
  - including writing request bodies and reading response bodies (abort STREAMs)

Allow [SMALL_]SCHEMA.x-validate:
  - custom validation similar to autoserver's
  - needs to be added to AJV
  - problem with JSON-SCHEMA-FAKER:
     - not supported as is
     - might be even harder when it comes to combining with not|allOf|anyOf|oneOf

autopackage:
  - abtraction of package.json for many programming languages and OS package managers
  - automatically creates other package.json-like files
  - should whitelist the format we want,  to avoid pollution???
  - automatically publish:
     - maybe using a common user controlled by me
  - paying option:
     - to allow publishing
     - GitHub hooks
