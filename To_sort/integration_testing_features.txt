spec plugin tokens:
  - "same as OpenAPI" magic token:
      - from user perspective, same concept as "inverse of OpenAPI" but with a different token
      - goal: allowing user to re-use non-required OpenAPI parameters
  - tokens: "valid" and "invalid"
      - can escape with backslashes "\valid" and "\invalid"
          - substituted at end of spec handler by crawling task.call
  - both "valid" and "invalid" should be allowed in deep properties

task.alias:
  - { $$NAME: "call.response... [optional]" }
     - validate $$ starts with $$
     - validate value starts with plugin name followed by dot
     - validate value has correct syntax, including valid options
  - allows using helper $$NAME
     - in any task
     - async get function that trigger same logic as $$task: "CurrentTask ..."
     - remove $$task helper (merge it to task.alias logic)
  - allow traversing with dots:
     - helper aliases
        - e.g. { $$a: "$$b", $$b: { c: true } }, allow $$a.c
     - helper function return values
        - including async ones
           - including ones created by task.alias

Helpers/template:
  - allow $$VARR in keys not only values
     - value and key are processed in parallel with promiseAll()
  - string concatenation:
     - restrict $$VARR name to [a-zA-Z0-9_-] and [[].] (dots/brackets path)
     - allow $$VARR to have things before or after
        - concatenated
        - when used as keys or values, but not as function names
        - there can be several $$VARR in single string
           - they are processed in parallel with promiseAll()
        - transtype $$VARR value with String()
           - not JSON.stringify() because we want to be format-agnostic
        - return value is then always a string
  - rename "helpers" to "template"
     - change it in notes as well
  - turn into a library
     - eventually abstract to own module autotemplate
     - how:
        - allow personalizing variables prefix and escaping ($$)
        - non-autotask-specific way of passing data
        - make error throwing/handling more agnostic
        - separate what's autotask specific: core helpers, core exceptions
        - rename helpers to data, helpers (data that are functions) and view
        - crawl any object not only plain objects
     - advantages of a data template system (add it in comments):
        - not tied to a specific serialization format
           - e.g. jsonnet cannot be used with YAML
        - guarantees serialized version is still valid
           - e.g. Handlebars producing JSON output might not be valid JSON itself
        - readable helper functions with complex arguments
        - circular references
        - non serializable types (e.g. sockets)
     - other design decisions:
        - simple syntax, to keep it truly declarative
           - no operators, variables scoping, references, inline functions
        - only templating
           - no comments, string escaping, text blocks
  - add to autoserver notes: question whether should use autotemplate

Task nesting:
  - task.nested ARR instead of task.error.nested OBJ
     - i.e. nested tasks successful or not
     - might be challenging to do without too much boilerplate considering:
           - runTask() might be run in parallel (as they are in $task helpers)
           - runTask() might throw instead of returning
     - maybe pushing to a shared array could solve those issues
     - only for runTask() with getError !== undefined (i.e. for $task not for `repeat` plugin)
  - reporting:
     - iterates over siblings (children reported before next sibling)
     - apply task.nested.filter(({ error }) => error !== undefined) recursively, unless level "debug"
        - task.nested omitted if results in empty array
     - pretty reporter:
        - nested task header shows "PARENT_TASK.key > NESTED_TASK.key > ..." instead of "Nested task: ..."
        - use color red|green|gray using same logic as parent task (i.e. based on nested task's resultType)
  - error.nested should be last in properties order in return value and in "data" reporter
  - make TAP reporter work with error.nested:
     - at the moment it does not work with error.nested (it creates extra tests)
     - instead skip nested tasks and print top-level task with "nested" as an error property:
        - JSON stringified (on single line)
        - only print first element OBJ of each error.nested ARR with OBJ.error !== undefined
           - recursively

Spec:
  - task.spec.definition URL|PATH
     - remove config.spec
  - task.spec.operation OPERATION_ID
     - defaults to key prefix "OPERATION_ID:"
        - must be followed by colon
  - if any is undefined, do nothing
  - memoize instead of doing things during start handlers???

call.path:
  - use Express-style path parameters markers instead of OpenAPI-style
     - richer syntax
     - allows optional path parameters
  - re-use same library I use in autoserver
  - `spec` plugin should convert from OpenAPI syntax to Express-style syntax

Custom properties:
  - config|task._*
  - are ignored
  - are kept in return value but not reporting (since part of originalTask)
     - i.e. can be used to return metadata or helpers values

Other programming languages:
  - should include WebAssembly
  - Node.js script runner core plugin should use JSON references, i.e. allowing several programming languages

JSON references:
  - use same code as autoserver:
     - including relative references
     - including can be used to target functions
  - can be used both in config and tasks file
  - resolved during config/tasks load, before start handlers

Function parameters:
  - as opposed to helpers:
     - passed to plugins instead of automatically handled by task runner
     - can access current task (not just originalTask)
  - should be discouraged as non-declarative
  - declared in plugin.config.*.* using JsonSchema.format 'function'
     - add an ajv format handler
  - passed by user using JSON references
  - use it for validate.custom FUNC(task.call)->BOOL

$data:
  - only for JSON schemas
  - places:
     - main ajv validation utility:
        - i.e. used by task.validate
        - make sure it works in other places using the utility
     - `$random` helper:
        - somehow make json-schema-faker leave it as is
        - then use json-schema-faker return value and crawl and substitute all $data objects

CLI options:
  - get all possible plugins using readdir list from plugins dir
      - add TODO to use node_modules instead
  - then require all plugins
  - build CLI options descriptions using PLUGIN.conf.general|task.description|default|schema.type|required|others? and PLUGIN.conf.examples
  - think of type "object" and "array"
  - check code from autoserver
  - default value should be appended to description instead of using yargs.default()
  - task options should be added as an option under task category but throw error during parsing. An explanation at beginning of --help should explain how task options work
  - should work with dynamic options like config.report.options.* but still be strict enough to validate typos

config.maxParallel:
  - max number of tasks at once
  - def 100
  - buffered in the beginning of runTask, i.e.:
     - depReqs count as one task
     - repeated tasks each count as one task

Should add headers added by default by node-fetch to rawRequest

Content negotiation:
  - autoformat
     - use it in stringify/parse
     - add multipart/form-data format:
        - parsed as { "VAR[;filename=FILE][;content-type=MIME]": VAL, ... }
        - stringify not on plain object should throw
        - each VAL is parsed according to that MIME, or left as unparsed string otherwise
     - should maybe default to raw format instead of throwing exception
  - Content-Type [C]:
     - intersection of:
        - types supported by library (for serialization)
        - arrays merge (in priority order) of:
           - task.call.headers.content-type
              - matched case-insensitive
              - if specified, must only use:
                 - type 'string'
                 - enum
                 - default|title|description
           - spec.consumes
           - def: application/json
     - intersection:
        - if empty array, throw that MIME is unsupported
        - should work with MIMEs being just '+EXT'
        - MIME options:
           - if none specified, leave as is
           - if specified by one side only, pick it
           - if specified by both sides and equal, pick it
           - if specified by both sides and different, do not pick that MIME
  - Accept [C]:
     - same but with:
        - types supported by library (for parsing)
        - using:
           - task.request.headers.accept
           - spec.produces
           - def: any
  - Content-Type [S]
     - if not among possible library parsers, throw error
     - used to pick how to parse body
     - def: application/octet-stream
     - validate according to same logic as other standard headers
Â  - [SMALL_]SCHEMA.type 'file':
     - PARAM:
        - during spec normalization, set Content-Type [C] to multipart/form-data
        - adds parameter filename="PARAM_NAME"
     - RESP:
        - validate Content-Type [S] is multipart/form-data
        - validates every part has "filename"
     - when normalizing OpenAPI schema to JSON schema:
        - convert to another type by guessing from other properties, and defaulting to string
        - should propose a PR to OPENAPI-SCHEMA-TO-JSON-SCHEMA (which throws at the moment)

Validate:
  - custom formats
  - at the moment, ajv formats (e.g. uuid) are included by default: good idea???
     - should work with `random` as well

Explore:
  - fuzzy testing
  - stress testing
  - load testing

To improve???
  - reduce amount of mocking needed by users
  - reduce amount of setup and teardown (e.g. starting server) needed by users
     - including faking authentication

Plugins:
  - move plugins to own repositories
  - create a repository with some core plugins already included, so users don't have to
  - remove CORE_PLUGINS array

Plugin that only execute binary or Node.js file

Schemes:
  - support over protocols than HTTP
     - including WebSocket
  - support OPERATION.schemes
Â  - unless OPTS.endpoint was given, should randomly pick protocol among SPEC|OPERATION.schemes for each task

Think about using OpenAPI 2.0 collectionFormat or OpenAPI 3.0 styles outside of OpenAPI

Add support for HTTP authentication, OAuth2 and OpenID

Add support for OpenAPI 3.0, RAML, API blueprint
  - should use a specification abstraction layer
  - if api-elements is not good enough, create own

collectionFormat on formData for OpenAPI 2.0 does not currently work

Re-use autoserver's ajv error beautification utility (separate it in a different module)

Globbing:
  - go through globbing in to_learn.txt to improve current usage of globbing (e.g. in config.tasks or in 'glob' plugin)
  - allow passing directories (included recursively) to config.tasks

Reporters:
  - go through CLI doc in to_learn.txt to improve current reporters
  - add '...' ellipsis after truncating:
     - problem: it conflicts with emphasis automatic syntax highlighting
  - try to simplify reporter.*() interface:
     - too many methods: options(), start(), tick(), complete(), end()
  - 'min' reporter:
     - replace spinner by progress bar
     - add diffs between ERROR.expected and ERROR.actual
  - 'object' reporter:
     - use autoformat
     - add a 'path' option (e.g. JSON path)
  - 'notify' reporter:
     - go through to_learn.txt for desktop notifications
     - show project icon in popup
  - add other reporters:
     - see list in my reporters doc: minimal sentence, sentence, dot, progress, nyan, plane, flat, spec, markdown, styleless
       HTML, static HTML, dynamic HTML, JSON stream, XUnit, JUnit, NUnit, Teamcity, AppVeyor
     - try to use a generic input (not test-openapi-specific) so that they can be used by other projects
        - i.e. same idea as TAP but using a stream of JavaScript objects instead of using TAP string parsing

Dynamic properties keys:
  - problematic on parameter generation and response validation
     - for parameter name, response header names, OpenAPI schema properties
     - OpenAPI only allows static keys
  - possible solution:
     - use 'REGEXP' for keys
     - transform to patternProperties instead of properties
        - both ajv and JSON-SCHEMA-FAKER should then handle it correctly
     - how to mark that a key is a REGEXP not a STR??? Possible solutions:
        - all keys are REGEXPs
        - "/.../" key
        - global OPT
        - taskOpt
        - property in specification, e.g. x-*
     - need to work with other specification formats too

Polymorphism:
  - support config|task.PLUGIN values being either an object or not
     - at the moment it does not work, e.g. when retrieving final return value

Snapshot testing:
  - persist (if not yet) response.raw string as is and check difference on next run
  - persist in a Markdown file with code blocks (i.e. can be used as documentation, and gives nice git diff)
  - automatic pruning (i.e. delete snapshot folder before writing to it)
  - what about dynamic attributes (e.g timestamps)???
  - how to update snapshots???
     - think of CI mode

Maybe: watch mode

Add configuration file and logic:
  - re-use same logic as autoserver
  - including JSON references (including in task files)
  - load task file re-using same logic as autoserver to allow many formats ("autoformat")

Check autoserver for feature suggestions:
  - including special linting tool

JSON schema v7:
  - allow v7 in OpenAPI SCHEMA
  - problems:
     - not supported by OpenAPI yet, i.e. OPENAPI-SCHEMA-TO-JSON-SCHEMA outputs JSON schema v4, but this is not a problem
     - however does not work with JSON-SCHEMA-FAKER yet

How to enforce handler arguments are read-only???
  - deepFreeze problems:
     - slow
     - some arguments might need to mutate state, e.g. streams or servers attached to task|config.*

autopackage:
  - abtraction of package.json for many programming languages and OS package managers
  - automatically creates other package.json-like files
  - should whitelist the format we want,  to avoid pollution???
  - automatically publish:
     - maybe using a common user controlled by me
  - paying option:
     - to allow publishing
     - GitHub hooks

autotask:
  - based of autovalidate
  - parallel, stateless task runner
  - as opposed to Gulp, Grunt, autotools, brunch:
     - optimized for parallelism, not sequencing
        - run an array of tasks, not a tree
        - tasks are independent
           - failure do not stop other tasks
     - stateless/functional:
        - tasks are meant to return values not modify state
           - rich and diverse reporting
        - not meant for builds
           - reporting is silent on success, verbose on failure (not the inverse)
  - also uses declarative approach
  - autovalidate:
     - simply autotask with some default plugins
     - should allow users specifying extra plugins though, including between default plugins

Business idea:
  - CI features:
     - executes requests on cloud/FaaS
     - notifications (GitHub hooks, etc.)
  - configuration editor
     - linting
     - execute as you type
  - nice reporting
