
                
   ROADMAP-NPXV  
                



npxv ...
  - run shell command "..." on multiple node.js versions
  - shell-agnostic
  - OS-agnostic
  - can also be run as NPXV('SHELL_COMMAND', OPTS)
     - OPTS.output STREAM (def: process.stdout)

Uses npx -p node@VERSION SHELL_COMMAND
  - i.e. `node` in SHELL_COMMAND will use the right version
     - can run files with SHELL_COMMAND "node FILE"
     - can run JavaScript with SHELL_COMMAND "node -e STR"
     - since anything that uses node will use right version,
       works with npm tasks, Gulp, test runners, etc.
  - alternative implementations:
     - execute with libnpx instead of npx binary
     - use only `libnpx` parts we need, then use `execa`
     - use `node-bin-gen` + `execa`, do not use `libnpx`
        - this option might allow better caching
  - i.e. written in Node.js, not in Shell

Specifying versions:
  - -v|--versions|OPTS.versions RANGE
     - def: package.json 'engines.node'
        - if none, all supported versions
  - -a|--all|OPTS.all
     - if false (def), only keep supported LTS
  - ---[no-]latest: true (def)
  - SEMVER ranges parsing:
     - merge ranges together, removing duplicates
     - split ranges that span several major version into one range per major version
     - keep minimum version of each range + (if --latest) maximum version of highest range
  - abstract to its own package so it can be used by babel setup

Versions order:
  - in serial run: max to min
  - in output: min to max

-s|--serial|OPTS.serial BOOL
  - if false (def), parallel
  - if true, serial:
     - stop execution on first command with exit code !== 0

-r|--reporter|OPTS.reporter STR
  - among:
     - 'stream': print as is (including in parallel runs), but prepend each line with padded Node.version
     - 'full':
        - buffer so that versions output are not mixed
        - prepend each version output with a pretty line showing the Node.js version
     - 'pretty' (default):
        - like 'min' but Node.js versions that have exit code !== 0 print their output like 'full'
     - 'min':
        - one line per Node.version
        - show pending|check|cross symbol first, then padded Node.js version, then right-padded duration (when completed)
        - get inspiration from how testen looks
        - show an ora spinner on bottom
