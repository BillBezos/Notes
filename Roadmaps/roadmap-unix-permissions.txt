
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



TOKEN.add:
  - full(PERM)->PERM: no TOKEN -> add:false
  - partial(PERM)->PERM: add:false -> no TOKEN
  - set|unset[Special]|contains(): noop on no TOKEN
  - invert(): does full() first, i.e. no TOKEN inverted to add:true, add:true inverted to add:false

PERM is 'SYMBOLIC'|NUM|'OCTAL'|'STAT' but logic operates on TOKENS

full(PERM)->PERM
partial(PERM)->PERM

contains(PERM, PERM2)->BOOL

set(PERM, PERM2)->PERM
unset(PERM, PERM2)->PERM
invert(PERM)->PERM (unset special bits, invert other bits)
flip(PERM)->PERM (invert all bits, including special ones)

Document:
  - to do equal() instead of contains(): use converter + `===`
  - to unset special flags, do unset('a-st')
  - converting from symbolic|object to octal|number|stat removes the '-' operations

Moize what needs to be moized

Should test set() === behavior of fs.chmod()

Repos for wrappers for chmod, stat and umask

Todo:
  - symbolic notation like "a+o", i.e. "o" means "permissions of o" (this is supported by Unix chmod)
  - symbolic notation X should be noop if "u", "g" and "o" do not have "x"
