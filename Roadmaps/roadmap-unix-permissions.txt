
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



PERM is 'SYMBOLIC'|NUM|'OCTAL'|'STAT' but logic operates on TOKENS

full(PERM)->PERM
  - full(PERM)->PERM: no TOKEN -> add:false

contains(PERM, PERM2)->BOOL
  - skip arg2 with no token

[un]set(PERM, PERM2)->PERM
  - if arg2 has add:true|false, set arg1 to add:false|true (add token if none)
  - skip arg2 with no token
invert(PERM)->PERM (unset special bits, invert other bits)
  - invert|flip(): does full() first, i.e. no TOKEN inverted to add:true, add:true inverted to add:false
flip(PERM)->PERM (invert all bits, including special ones)

Document:
  - to do equal() instead of contains(): use converter + `===`
  - to unset special flags, do unset('a-st')
  - converting from symbolic|object to octal|number|stat removes the '-' operations

Moize what needs to be moized

Should test set() === behavior of fs.chmod()

Repos for wrappers for chmod, stat and umask

Todo:
  - symbolic notation like "a+o", i.e. "o" means "permissions of o" (this is supported by Unix chmod)
  - symbolic notation X should be noop if "u", "g" and "o" do not have "x"
