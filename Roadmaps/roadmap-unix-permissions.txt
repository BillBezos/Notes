
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



Support 'OCTAL'
  - might have a leading 0
  - might omit the special flags digit during parsing, but should always serialize it
  - might be preceded by = (def), + or -

Add type "object":
  - { user|group|others: { read|write|execute|setuid|setgid|sticky: true|false|undefined } }
  - can be partial

TOKEN.add:
  - can be add:true, add:false or no TOKEN
  - parsing:
     - symbolic, 'OCTAL' with explicit operator, object: '-' -> add:false, not mentioned -> no TOKEN
     - number, stat, 'OCTAL' with no explicit operator: 0 or (for stat) '-' -> no TOKEN
  - serializing:
     - symbolic, 'OCTAL' with explicit operator, object: add:false -> '-', no TOKEN -> not mentioned
     - number, stat, 'OCTAL' with no explicit operator: add:false or no TOKEN -> 0 or (for stat) '-'
  - full(PERM)->PERM: no TOKEN -> add:false
  - partial(PERM)->PERM: add:false -> no TOKEN
  - set|unset[Special]|contains(): noop on no TOKEN
  - invert(): does full() first, i.e. no TOKEN inverted to add:true, add:true inverted to add:false

PERM is 'SYMBOLIC'|NUM|'OCTAL'|'STAT' but logic operates on TOKENS

full(PERM)->PERM
partial(PERM)->PERM

contains(PERM, PERM2)->BOOL

set(PERM, PERM2)->PERM
unset(PERM, PERM2)->PERM
invert(PERM[, { special }])->PERM
  - OPTS.special:
     - false (def): unset special bits
     - true: invert special bits

unsetSpecial(PERM)->PERM

Document:
  - to do equal() instead of contains(): use converter + `===`
  - converting from symbolic|object to octal|number|stat removes the '-' operations

Moize what needs to be moized

Should test set() === behavior of fs.chmod()

Repos for wrappers for chmod, stat and umask

Todo:
  - symbolic notation like "a+o", i.e. "o" means "permissions of o" (this is supported by Unix chmod)
  - symbolic notation X should be noop if "u", "g" and "o" do not have "x"
