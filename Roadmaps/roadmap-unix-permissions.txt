
                            
   ROADMAP-UNIX-PERMISSIONS  
                            



TYPE() -> convert.TYPE()

Variadic args on binary operations:
  - binaryMap() use reduce()
  - binaryTest() use every()

Add 0-n arguments mapper (for min|max())

PERM is 'SYMBOLIC'|NUM|'OCTAL'|'STAT' but logic operates on TOKENS

full(PERM)->PERM
  - full(PERM)->PERM: no TOKEN -> add:false

contains(PERM, PERM2)->BOOL
  - skip arg2 with no token

[un]set(PERM, PERM2)->PERM
  - if arg2 has add:true|false, set arg1 to add:false|true (add token if none)
  - skip arg2 with no token
invert(PERM)->PERM (unset special bits, invert other bits)
  - invert|flip(): does full() first, i.e. no TOKEN inverted to add:true, add:true inverted to add:false
flip(PERM)->PERM (invert all bits, including special ones)

min|max(PERM,...)->PERM
  - there can be 0, 1 or n arguments
  - per-flag not per-PERM, i.e. check bit-by-bit
  - no TOKEN should bw treated as "unknown" using tri-logic
      - can work for both min() and max() by making - as 0, no token as 1, + as 2

categories:
  - select.user|group|others(PERM)->CAT_PERM
     - e.g. g=rx to rx
     - how:
        - TYPE.parse()
        - in type-agnostic way, remove nodes from other categories, then delete node.category
        - TYPE.select(nodes)->CAT_PERM
  - deselect.user|group|others(CAT_PERM)->PERM
     - e.g. rx to g=rx
     - fill with "no TOKEN" (not add:false)
     - how:
        - TYPE.deselect(CAT_PERM)->nodes
        - in type-agnostic way, add node.category CAT
        - TYPE.serialize()
  - select() and deselect() are like parse(), guessing TYPE by iterating and returning undefined
  - cannot use CAT_PERM with any other methods, i.e. must use deselect()
  - should take into account special flags, i.e. sticky is for others, setgid for group, setuid for user
     - for numbers and octal, they all equal 8 (i.e. next bit) for their respective group

Document:
  - to do equal() instead of contains(): use converter + `===`
  - to unset special flags, do unset('a-st')
  - converting from symbolic|object to octal|number|stat removes the '-' operations
  - usage with Node.js core functions: fs.stat(), umask(), chmod(), fs.writeFile()

Moize what needs to be moized

Todo:
  - symbolic notation like "a+o", i.e. "o" means "permissions of o" (this is supported by Unix chmod)
  - symbolic notation X should be noop if "u", "g" and "o" do not have "x"
